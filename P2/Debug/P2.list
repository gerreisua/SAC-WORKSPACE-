
P2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056c0  080001f4  080001f4  000101f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  080058b4  080058b4  000158b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005934  08005934  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005934  08005934  00015934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800593c  0800593c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800593c  0800593c  0001593c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005940  08005940  00015940  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005944  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000440  2000000c  08005950  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000044c  08005950  0002044c  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a74f  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003566  00000000  00000000  0003a7d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015b0  00000000  00000000  0003dd40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000109a  00000000  00000000  0003f2f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002d715  00000000  00000000  0004038a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001905d  00000000  00000000  0006da9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0012763a  00000000  00000000  00086afc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005cbc  00000000  00000000  001ae138  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  001b3df4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f4 <__do_global_dtors_aux>:
 80001f4:	b510      	push	{r4, lr}
 80001f6:	4c05      	ldr	r4, [pc, #20]	; (800020c <__do_global_dtors_aux+0x18>)
 80001f8:	7823      	ldrb	r3, [r4, #0]
 80001fa:	b933      	cbnz	r3, 800020a <__do_global_dtors_aux+0x16>
 80001fc:	4b04      	ldr	r3, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x1c>)
 80001fe:	b113      	cbz	r3, 8000206 <__do_global_dtors_aux+0x12>
 8000200:	4804      	ldr	r0, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x20>)
 8000202:	f3af 8000 	nop.w
 8000206:	2301      	movs	r3, #1
 8000208:	7023      	strb	r3, [r4, #0]
 800020a:	bd10      	pop	{r4, pc}
 800020c:	2000000c 	.word	0x2000000c
 8000210:	00000000 	.word	0x00000000
 8000214:	0800589c 	.word	0x0800589c

08000218 <frame_dummy>:
 8000218:	b508      	push	{r3, lr}
 800021a:	4b03      	ldr	r3, [pc, #12]	; (8000228 <frame_dummy+0x10>)
 800021c:	b11b      	cbz	r3, 8000226 <frame_dummy+0xe>
 800021e:	4903      	ldr	r1, [pc, #12]	; (800022c <frame_dummy+0x14>)
 8000220:	4803      	ldr	r0, [pc, #12]	; (8000230 <frame_dummy+0x18>)
 8000222:	f3af 8000 	nop.w
 8000226:	bd08      	pop	{r3, pc}
 8000228:	00000000 	.word	0x00000000
 800022c:	20000010 	.word	0x20000010
 8000230:	0800589c 	.word	0x0800589c

08000234 <__aeabi_uldivmod>:
 8000234:	b953      	cbnz	r3, 800024c <__aeabi_uldivmod+0x18>
 8000236:	b94a      	cbnz	r2, 800024c <__aeabi_uldivmod+0x18>
 8000238:	2900      	cmp	r1, #0
 800023a:	bf08      	it	eq
 800023c:	2800      	cmpeq	r0, #0
 800023e:	bf1c      	itt	ne
 8000240:	f04f 31ff 	movne.w	r1, #4294967295
 8000244:	f04f 30ff 	movne.w	r0, #4294967295
 8000248:	f000 b982 	b.w	8000550 <__aeabi_idiv0>
 800024c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000250:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000254:	f000 f806 	bl	8000264 <__udivmoddi4>
 8000258:	f8dd e004 	ldr.w	lr, [sp, #4]
 800025c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000260:	b004      	add	sp, #16
 8000262:	4770      	bx	lr

08000264 <__udivmoddi4>:
 8000264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000268:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800026a:	460d      	mov	r5, r1
 800026c:	4604      	mov	r4, r0
 800026e:	460f      	mov	r7, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d146      	bne.n	8000302 <__udivmoddi4+0x9e>
 8000274:	428a      	cmp	r2, r1
 8000276:	4694      	mov	ip, r2
 8000278:	d95e      	bls.n	8000338 <__udivmoddi4+0xd4>
 800027a:	fab2 f382 	clz	r3, r2
 800027e:	b143      	cbz	r3, 8000292 <__udivmoddi4+0x2e>
 8000280:	fa02 fc03 	lsl.w	ip, r2, r3
 8000284:	f1c3 0220 	rsb	r2, r3, #32
 8000288:	409f      	lsls	r7, r3
 800028a:	409c      	lsls	r4, r3
 800028c:	fa20 f202 	lsr.w	r2, r0, r2
 8000290:	4317      	orrs	r7, r2
 8000292:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000296:	fa1f f58c 	uxth.w	r5, ip
 800029a:	0c22      	lsrs	r2, r4, #16
 800029c:	fbb7 f1fe 	udiv	r1, r7, lr
 80002a0:	fb0e 7711 	mls	r7, lr, r1, r7
 80002a4:	fb01 f005 	mul.w	r0, r1, r5
 80002a8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002ac:	4290      	cmp	r0, r2
 80002ae:	d908      	bls.n	80002c2 <__udivmoddi4+0x5e>
 80002b0:	eb1c 0202 	adds.w	r2, ip, r2
 80002b4:	f101 37ff 	add.w	r7, r1, #4294967295
 80002b8:	d202      	bcs.n	80002c0 <__udivmoddi4+0x5c>
 80002ba:	4290      	cmp	r0, r2
 80002bc:	f200 8134 	bhi.w	8000528 <__udivmoddi4+0x2c4>
 80002c0:	4639      	mov	r1, r7
 80002c2:	1a12      	subs	r2, r2, r0
 80002c4:	b2a4      	uxth	r4, r4
 80002c6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ca:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ce:	fb00 f505 	mul.w	r5, r0, r5
 80002d2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002d6:	42a5      	cmp	r5, r4
 80002d8:	d908      	bls.n	80002ec <__udivmoddi4+0x88>
 80002da:	eb1c 0404 	adds.w	r4, ip, r4
 80002de:	f100 32ff 	add.w	r2, r0, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0x86>
 80002e4:	42a5      	cmp	r5, r4
 80002e6:	f200 8119 	bhi.w	800051c <__udivmoddi4+0x2b8>
 80002ea:	4610      	mov	r0, r2
 80002ec:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002f0:	1b64      	subs	r4, r4, r5
 80002f2:	2100      	movs	r1, #0
 80002f4:	b11e      	cbz	r6, 80002fe <__udivmoddi4+0x9a>
 80002f6:	40dc      	lsrs	r4, r3
 80002f8:	2300      	movs	r3, #0
 80002fa:	e9c6 4300 	strd	r4, r3, [r6]
 80002fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000302:	428b      	cmp	r3, r1
 8000304:	d908      	bls.n	8000318 <__udivmoddi4+0xb4>
 8000306:	2e00      	cmp	r6, #0
 8000308:	f000 80fc 	beq.w	8000504 <__udivmoddi4+0x2a0>
 800030c:	2100      	movs	r1, #0
 800030e:	e9c6 0500 	strd	r0, r5, [r6]
 8000312:	4608      	mov	r0, r1
 8000314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000318:	fab3 f183 	clz	r1, r3
 800031c:	2900      	cmp	r1, #0
 800031e:	d14c      	bne.n	80003ba <__udivmoddi4+0x156>
 8000320:	42ab      	cmp	r3, r5
 8000322:	f0c0 80f2 	bcc.w	800050a <__udivmoddi4+0x2a6>
 8000326:	4282      	cmp	r2, r0
 8000328:	f240 80ef 	bls.w	800050a <__udivmoddi4+0x2a6>
 800032c:	4608      	mov	r0, r1
 800032e:	2e00      	cmp	r6, #0
 8000330:	d0e5      	beq.n	80002fe <__udivmoddi4+0x9a>
 8000332:	e9c6 4700 	strd	r4, r7, [r6]
 8000336:	e7e2      	b.n	80002fe <__udivmoddi4+0x9a>
 8000338:	b902      	cbnz	r2, 800033c <__udivmoddi4+0xd8>
 800033a:	deff      	udf	#255	; 0xff
 800033c:	fab2 f382 	clz	r3, r2
 8000340:	2b00      	cmp	r3, #0
 8000342:	f040 809f 	bne.w	8000484 <__udivmoddi4+0x220>
 8000346:	1a8a      	subs	r2, r1, r2
 8000348:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800034c:	fa1f f78c 	uxth.w	r7, ip
 8000350:	2101      	movs	r1, #1
 8000352:	fbb2 f5fe 	udiv	r5, r2, lr
 8000356:	fb0e 2015 	mls	r0, lr, r5, r2
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000360:	fb07 f005 	mul.w	r0, r7, r5
 8000364:	4290      	cmp	r0, r2
 8000366:	d90f      	bls.n	8000388 <__udivmoddi4+0x124>
 8000368:	eb1c 0202 	adds.w	r2, ip, r2
 800036c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000370:	bf2c      	ite	cs
 8000372:	f04f 0901 	movcs.w	r9, #1
 8000376:	f04f 0900 	movcc.w	r9, #0
 800037a:	4290      	cmp	r0, r2
 800037c:	d903      	bls.n	8000386 <__udivmoddi4+0x122>
 800037e:	f1b9 0f00 	cmp.w	r9, #0
 8000382:	f000 80ce 	beq.w	8000522 <__udivmoddi4+0x2be>
 8000386:	4645      	mov	r5, r8
 8000388:	1a12      	subs	r2, r2, r0
 800038a:	b2a4      	uxth	r4, r4
 800038c:	fbb2 f0fe 	udiv	r0, r2, lr
 8000390:	fb0e 2210 	mls	r2, lr, r0, r2
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800039c:	42a7      	cmp	r7, r4
 800039e:	d908      	bls.n	80003b2 <__udivmoddi4+0x14e>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a8:	d202      	bcs.n	80003b0 <__udivmoddi4+0x14c>
 80003aa:	42a7      	cmp	r7, r4
 80003ac:	f200 80b3 	bhi.w	8000516 <__udivmoddi4+0x2b2>
 80003b0:	4610      	mov	r0, r2
 80003b2:	1be4      	subs	r4, r4, r7
 80003b4:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003b8:	e79c      	b.n	80002f4 <__udivmoddi4+0x90>
 80003ba:	f1c1 0420 	rsb	r4, r1, #32
 80003be:	408b      	lsls	r3, r1
 80003c0:	fa05 fc01 	lsl.w	ip, r5, r1
 80003c4:	fa22 f704 	lsr.w	r7, r2, r4
 80003c8:	40e5      	lsrs	r5, r4
 80003ca:	408a      	lsls	r2, r1
 80003cc:	431f      	orrs	r7, r3
 80003ce:	fa20 f304 	lsr.w	r3, r0, r4
 80003d2:	4088      	lsls	r0, r1
 80003d4:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003d8:	ea43 030c 	orr.w	r3, r3, ip
 80003dc:	fa1f fc87 	uxth.w	ip, r7
 80003e0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003e4:	fbb5 fef8 	udiv	lr, r5, r8
 80003e8:	fb08 551e 	mls	r5, r8, lr, r5
 80003ec:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 80003f0:	fb0e f90c 	mul.w	r9, lr, ip
 80003f4:	45a9      	cmp	r9, r5
 80003f6:	d90e      	bls.n	8000416 <__udivmoddi4+0x1b2>
 80003f8:	197d      	adds	r5, r7, r5
 80003fa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003fe:	bf2c      	ite	cs
 8000400:	f04f 0b01 	movcs.w	fp, #1
 8000404:	f04f 0b00 	movcc.w	fp, #0
 8000408:	45a9      	cmp	r9, r5
 800040a:	d903      	bls.n	8000414 <__udivmoddi4+0x1b0>
 800040c:	f1bb 0f00 	cmp.w	fp, #0
 8000410:	f000 808d 	beq.w	800052e <__udivmoddi4+0x2ca>
 8000414:	46d6      	mov	lr, sl
 8000416:	eba5 0509 	sub.w	r5, r5, r9
 800041a:	fa1f f983 	uxth.w	r9, r3
 800041e:	fbb5 f3f8 	udiv	r3, r5, r8
 8000422:	fb08 5513 	mls	r5, r8, r3, r5
 8000426:	fb03 fc0c 	mul.w	ip, r3, ip
 800042a:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 800042e:	45ac      	cmp	ip, r5
 8000430:	d906      	bls.n	8000440 <__udivmoddi4+0x1dc>
 8000432:	197d      	adds	r5, r7, r5
 8000434:	f103 38ff 	add.w	r8, r3, #4294967295
 8000438:	d201      	bcs.n	800043e <__udivmoddi4+0x1da>
 800043a:	45ac      	cmp	ip, r5
 800043c:	d87e      	bhi.n	800053c <__udivmoddi4+0x2d8>
 800043e:	4643      	mov	r3, r8
 8000440:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000444:	eba5 050c 	sub.w	r5, r5, ip
 8000448:	fba3 9802 	umull	r9, r8, r3, r2
 800044c:	4545      	cmp	r5, r8
 800044e:	46ce      	mov	lr, r9
 8000450:	46c4      	mov	ip, r8
 8000452:	d302      	bcc.n	800045a <__udivmoddi4+0x1f6>
 8000454:	d106      	bne.n	8000464 <__udivmoddi4+0x200>
 8000456:	4548      	cmp	r0, r9
 8000458:	d204      	bcs.n	8000464 <__udivmoddi4+0x200>
 800045a:	3b01      	subs	r3, #1
 800045c:	ebb9 0e02 	subs.w	lr, r9, r2
 8000460:	eb68 0c07 	sbc.w	ip, r8, r7
 8000464:	2e00      	cmp	r6, #0
 8000466:	d06f      	beq.n	8000548 <__udivmoddi4+0x2e4>
 8000468:	ebb0 020e 	subs.w	r2, r0, lr
 800046c:	eb65 050c 	sbc.w	r5, r5, ip
 8000470:	40ca      	lsrs	r2, r1
 8000472:	fa05 f404 	lsl.w	r4, r5, r4
 8000476:	40cd      	lsrs	r5, r1
 8000478:	4618      	mov	r0, r3
 800047a:	4314      	orrs	r4, r2
 800047c:	2100      	movs	r1, #0
 800047e:	e9c6 4500 	strd	r4, r5, [r6]
 8000482:	e73c      	b.n	80002fe <__udivmoddi4+0x9a>
 8000484:	fa02 fc03 	lsl.w	ip, r2, r3
 8000488:	f1c3 0220 	rsb	r2, r3, #32
 800048c:	4099      	lsls	r1, r3
 800048e:	409c      	lsls	r4, r3
 8000490:	40d5      	lsrs	r5, r2
 8000492:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000496:	fa20 f202 	lsr.w	r2, r0, r2
 800049a:	fa1f f78c 	uxth.w	r7, ip
 800049e:	fbb5 f0fe 	udiv	r0, r5, lr
 80004a2:	430a      	orrs	r2, r1
 80004a4:	fb0e 5510 	mls	r5, lr, r0, r5
 80004a8:	0c11      	lsrs	r1, r2, #16
 80004aa:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ae:	fb00 f507 	mul.w	r5, r0, r7
 80004b2:	428d      	cmp	r5, r1
 80004b4:	d90e      	bls.n	80004d4 <__udivmoddi4+0x270>
 80004b6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ba:	f100 38ff 	add.w	r8, r0, #4294967295
 80004be:	bf2c      	ite	cs
 80004c0:	f04f 0901 	movcs.w	r9, #1
 80004c4:	f04f 0900 	movcc.w	r9, #0
 80004c8:	428d      	cmp	r5, r1
 80004ca:	d902      	bls.n	80004d2 <__udivmoddi4+0x26e>
 80004cc:	f1b9 0f00 	cmp.w	r9, #0
 80004d0:	d031      	beq.n	8000536 <__udivmoddi4+0x2d2>
 80004d2:	4640      	mov	r0, r8
 80004d4:	1b49      	subs	r1, r1, r5
 80004d6:	b292      	uxth	r2, r2
 80004d8:	fbb1 f5fe 	udiv	r5, r1, lr
 80004dc:	fb0e 1115 	mls	r1, lr, r5, r1
 80004e0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004e4:	fb05 f107 	mul.w	r1, r5, r7
 80004e8:	4291      	cmp	r1, r2
 80004ea:	d907      	bls.n	80004fc <__udivmoddi4+0x298>
 80004ec:	eb1c 0202 	adds.w	r2, ip, r2
 80004f0:	f105 38ff 	add.w	r8, r5, #4294967295
 80004f4:	d201      	bcs.n	80004fa <__udivmoddi4+0x296>
 80004f6:	4291      	cmp	r1, r2
 80004f8:	d823      	bhi.n	8000542 <__udivmoddi4+0x2de>
 80004fa:	4645      	mov	r5, r8
 80004fc:	1a52      	subs	r2, r2, r1
 80004fe:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000502:	e726      	b.n	8000352 <__udivmoddi4+0xee>
 8000504:	4631      	mov	r1, r6
 8000506:	4630      	mov	r0, r6
 8000508:	e6f9      	b.n	80002fe <__udivmoddi4+0x9a>
 800050a:	1a84      	subs	r4, r0, r2
 800050c:	eb65 0203 	sbc.w	r2, r5, r3
 8000510:	2001      	movs	r0, #1
 8000512:	4617      	mov	r7, r2
 8000514:	e70b      	b.n	800032e <__udivmoddi4+0xca>
 8000516:	4464      	add	r4, ip
 8000518:	3802      	subs	r0, #2
 800051a:	e74a      	b.n	80003b2 <__udivmoddi4+0x14e>
 800051c:	4464      	add	r4, ip
 800051e:	3802      	subs	r0, #2
 8000520:	e6e4      	b.n	80002ec <__udivmoddi4+0x88>
 8000522:	3d02      	subs	r5, #2
 8000524:	4462      	add	r2, ip
 8000526:	e72f      	b.n	8000388 <__udivmoddi4+0x124>
 8000528:	3902      	subs	r1, #2
 800052a:	4462      	add	r2, ip
 800052c:	e6c9      	b.n	80002c2 <__udivmoddi4+0x5e>
 800052e:	f1ae 0e02 	sub.w	lr, lr, #2
 8000532:	443d      	add	r5, r7
 8000534:	e76f      	b.n	8000416 <__udivmoddi4+0x1b2>
 8000536:	3802      	subs	r0, #2
 8000538:	4461      	add	r1, ip
 800053a:	e7cb      	b.n	80004d4 <__udivmoddi4+0x270>
 800053c:	3b02      	subs	r3, #2
 800053e:	443d      	add	r5, r7
 8000540:	e77e      	b.n	8000440 <__udivmoddi4+0x1dc>
 8000542:	3d02      	subs	r5, #2
 8000544:	4462      	add	r2, ip
 8000546:	e7d9      	b.n	80004fc <__udivmoddi4+0x298>
 8000548:	4618      	mov	r0, r3
 800054a:	4631      	mov	r1, r6
 800054c:	e6d7      	b.n	80002fe <__udivmoddi4+0x9a>
 800054e:	bf00      	nop

08000550 <__aeabi_idiv0>:
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000554:	b480      	push	{r7}
 8000556:	b085      	sub	sp, #20
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800055c:	4b08      	ldr	r3, [pc, #32]	; (8000580 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800055e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000560:	4907      	ldr	r1, [pc, #28]	; (8000580 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	4313      	orrs	r3, r2
 8000566:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000568:	4b05      	ldr	r3, [pc, #20]	; (8000580 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800056a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	4013      	ands	r3, r2
 8000570:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000572:	68fb      	ldr	r3, [r7, #12]
}
 8000574:	bf00      	nop
 8000576:	3714      	adds	r7, #20
 8000578:	46bd      	mov	sp, r7
 800057a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057e:	4770      	bx	lr
 8000580:	40021000 	.word	0x40021000

08000584 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_USB
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8000584:	b480      	push	{r7}
 8000586:	b085      	sub	sp, #20
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 800058c:	4b08      	ldr	r3, [pc, #32]	; (80005b0 <LL_APB1_GRP2_EnableClock+0x2c>)
 800058e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000590:	4907      	ldr	r1, [pc, #28]	; (80005b0 <LL_APB1_GRP2_EnableClock+0x2c>)
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	4313      	orrs	r3, r2
 8000596:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8000598:	4b05      	ldr	r3, [pc, #20]	; (80005b0 <LL_APB1_GRP2_EnableClock+0x2c>)
 800059a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	4013      	ands	r3, r2
 80005a0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005a2:	68fb      	ldr	r3, [r7, #12]
}
 80005a4:	bf00      	nop
 80005a6:	3714      	adds	r7, #20
 80005a8:	46bd      	mov	sp, r7
 80005aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ae:	4770      	bx	lr
 80005b0:	40021000 	.word	0x40021000

080005b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b8:	f000 fe07 	bl	80011ca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005bc:	f000 f8a2 	bl	8000704 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c0:	f000 fa86 	bl	8000ad0 <MX_GPIO_Init>
  MX_ADC1_Init();
 80005c4:	f000 f904 	bl	80007d0 <MX_ADC1_Init>
  MX_ICACHE_Init();
 80005c8:	f000 f978 	bl	80008bc <MX_ICACHE_Init>
  MX_LPUART1_UART_Init();
 80005cc:	f000 f98a 	bl	80008e4 <MX_LPUART1_UART_Init>
  MX_RTC_Init();
 80005d0:	f000 f9d6 	bl	8000980 <MX_RTC_Init>
  MX_UCPD1_Init();
 80005d4:	f000 fa1e 	bl	8000a14 <MX_UCPD1_Init>
  MX_USB_PCD_Init();
 80005d8:	f000 fa52 	bl	8000a80 <MX_USB_PCD_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(interrupcion0==1){
 80005dc:	4b44      	ldr	r3, [pc, #272]	; (80006f0 <main+0x13c>)
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	2b01      	cmp	r3, #1
 80005e2:	d122      	bne.n	800062a <main+0x76>
		  if(estado==0){
 80005e4:	4b43      	ldr	r3, [pc, #268]	; (80006f4 <main+0x140>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d103      	bne.n	80005f4 <main+0x40>
			  estado=3;
 80005ec:	4b41      	ldr	r3, [pc, #260]	; (80006f4 <main+0x140>)
 80005ee:	2203      	movs	r2, #3
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	e016      	b.n	8000622 <main+0x6e>
		  }else if(estado==1){
 80005f4:	4b3f      	ldr	r3, [pc, #252]	; (80006f4 <main+0x140>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	2b01      	cmp	r3, #1
 80005fa:	d103      	bne.n	8000604 <main+0x50>
			  estado=0;
 80005fc:	4b3d      	ldr	r3, [pc, #244]	; (80006f4 <main+0x140>)
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
 8000602:	e00e      	b.n	8000622 <main+0x6e>
		  }else if(estado==2){
 8000604:	4b3b      	ldr	r3, [pc, #236]	; (80006f4 <main+0x140>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	2b02      	cmp	r3, #2
 800060a:	d103      	bne.n	8000614 <main+0x60>
			  estado=1;
 800060c:	4b39      	ldr	r3, [pc, #228]	; (80006f4 <main+0x140>)
 800060e:	2201      	movs	r2, #1
 8000610:	601a      	str	r2, [r3, #0]
 8000612:	e006      	b.n	8000622 <main+0x6e>
		  }else if(estado==3){
 8000614:	4b37      	ldr	r3, [pc, #220]	; (80006f4 <main+0x140>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	2b03      	cmp	r3, #3
 800061a:	d102      	bne.n	8000622 <main+0x6e>
			  estado=2;
 800061c:	4b35      	ldr	r3, [pc, #212]	; (80006f4 <main+0x140>)
 800061e:	2202      	movs	r2, #2
 8000620:	601a      	str	r2, [r3, #0]
		  }
		  interrupcion0=0;
 8000622:	4b33      	ldr	r3, [pc, #204]	; (80006f0 <main+0x13c>)
 8000624:	2200      	movs	r2, #0
 8000626:	701a      	strb	r2, [r3, #0]
 8000628:	e025      	b.n	8000676 <main+0xc2>

	  }else if(interrupcion1==1){
 800062a:	4b33      	ldr	r3, [pc, #204]	; (80006f8 <main+0x144>)
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	2b01      	cmp	r3, #1
 8000630:	d121      	bne.n	8000676 <main+0xc2>

		  if(estado==0){
 8000632:	4b30      	ldr	r3, [pc, #192]	; (80006f4 <main+0x140>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	2b00      	cmp	r3, #0
 8000638:	d103      	bne.n	8000642 <main+0x8e>
			  estado=1;
 800063a:	4b2e      	ldr	r3, [pc, #184]	; (80006f4 <main+0x140>)
 800063c:	2201      	movs	r2, #1
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	e016      	b.n	8000670 <main+0xbc>
		  }else if(estado==1){
 8000642:	4b2c      	ldr	r3, [pc, #176]	; (80006f4 <main+0x140>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	2b01      	cmp	r3, #1
 8000648:	d103      	bne.n	8000652 <main+0x9e>
			  estado=2;
 800064a:	4b2a      	ldr	r3, [pc, #168]	; (80006f4 <main+0x140>)
 800064c:	2202      	movs	r2, #2
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	e00e      	b.n	8000670 <main+0xbc>
		  }else if(estado==2){
 8000652:	4b28      	ldr	r3, [pc, #160]	; (80006f4 <main+0x140>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	2b02      	cmp	r3, #2
 8000658:	d103      	bne.n	8000662 <main+0xae>
			  estado=3;
 800065a:	4b26      	ldr	r3, [pc, #152]	; (80006f4 <main+0x140>)
 800065c:	2203      	movs	r2, #3
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	e006      	b.n	8000670 <main+0xbc>
		  }else if(estado==3){
 8000662:	4b24      	ldr	r3, [pc, #144]	; (80006f4 <main+0x140>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	2b03      	cmp	r3, #3
 8000668:	d102      	bne.n	8000670 <main+0xbc>
			  estado=0;
 800066a:	4b22      	ldr	r3, [pc, #136]	; (80006f4 <main+0x140>)
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
		  }
		  interrupcion1=0;
 8000670:	4b21      	ldr	r3, [pc, #132]	; (80006f8 <main+0x144>)
 8000672:	2200      	movs	r2, #0
 8000674:	701a      	strb	r2, [r3, #0]

	  }


	  if(estado==0){
 8000676:	4b1f      	ldr	r3, [pc, #124]	; (80006f4 <main+0x140>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	2b00      	cmp	r3, #0
 800067c:	d10a      	bne.n	8000694 <main+0xe0>

		  HAL_GPIO_WritePin(L0_GPIO_Port, L0_Pin, GPIO_PIN_RESET);
 800067e:	2200      	movs	r2, #0
 8000680:	2180      	movs	r1, #128	; 0x80
 8000682:	481e      	ldr	r0, [pc, #120]	; (80006fc <main+0x148>)
 8000684:	f002 f848 	bl	8002718 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(L1_GPIO_Port, L1_Pin, GPIO_PIN_SET);
 8000688:	2201      	movs	r2, #1
 800068a:	2180      	movs	r1, #128	; 0x80
 800068c:	481c      	ldr	r0, [pc, #112]	; (8000700 <main+0x14c>)
 800068e:	f002 f843 	bl	8002718 <HAL_GPIO_WritePin>
 8000692:	e7a3      	b.n	80005dc <main+0x28>


	  }else if(estado==1){
 8000694:	4b17      	ldr	r3, [pc, #92]	; (80006f4 <main+0x140>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	2b01      	cmp	r3, #1
 800069a:	d10a      	bne.n	80006b2 <main+0xfe>

		  HAL_GPIO_WritePin(L0_GPIO_Port, L0_Pin, GPIO_PIN_SET);
 800069c:	2201      	movs	r2, #1
 800069e:	2180      	movs	r1, #128	; 0x80
 80006a0:	4816      	ldr	r0, [pc, #88]	; (80006fc <main+0x148>)
 80006a2:	f002 f839 	bl	8002718 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(L1_GPIO_Port, L1_Pin, GPIO_PIN_RESET);
 80006a6:	2200      	movs	r2, #0
 80006a8:	2180      	movs	r1, #128	; 0x80
 80006aa:	4815      	ldr	r0, [pc, #84]	; (8000700 <main+0x14c>)
 80006ac:	f002 f834 	bl	8002718 <HAL_GPIO_WritePin>
 80006b0:	e794      	b.n	80005dc <main+0x28>


	  }else if(estado==2){
 80006b2:	4b10      	ldr	r3, [pc, #64]	; (80006f4 <main+0x140>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	2b02      	cmp	r3, #2
 80006b8:	d10a      	bne.n	80006d0 <main+0x11c>

		  HAL_GPIO_WritePin(L0_GPIO_Port, L0_Pin, GPIO_PIN_SET);
 80006ba:	2201      	movs	r2, #1
 80006bc:	2180      	movs	r1, #128	; 0x80
 80006be:	480f      	ldr	r0, [pc, #60]	; (80006fc <main+0x148>)
 80006c0:	f002 f82a 	bl	8002718 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(L1_GPIO_Port, L1_Pin, GPIO_PIN_SET);
 80006c4:	2201      	movs	r2, #1
 80006c6:	2180      	movs	r1, #128	; 0x80
 80006c8:	480d      	ldr	r0, [pc, #52]	; (8000700 <main+0x14c>)
 80006ca:	f002 f825 	bl	8002718 <HAL_GPIO_WritePin>
 80006ce:	e785      	b.n	80005dc <main+0x28>

	  }else if(estado==3){
 80006d0:	4b08      	ldr	r3, [pc, #32]	; (80006f4 <main+0x140>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	2b03      	cmp	r3, #3
 80006d6:	d181      	bne.n	80005dc <main+0x28>

		  HAL_GPIO_WritePin(L0_GPIO_Port, L0_Pin, GPIO_PIN_RESET);
 80006d8:	2200      	movs	r2, #0
 80006da:	2180      	movs	r1, #128	; 0x80
 80006dc:	4807      	ldr	r0, [pc, #28]	; (80006fc <main+0x148>)
 80006de:	f002 f81b 	bl	8002718 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(L1_GPIO_Port, L1_Pin, GPIO_PIN_RESET);
 80006e2:	2200      	movs	r2, #0
 80006e4:	2180      	movs	r1, #128	; 0x80
 80006e6:	4806      	ldr	r0, [pc, #24]	; (8000700 <main+0x14c>)
 80006e8:	f002 f816 	bl	8002718 <HAL_GPIO_WritePin>
	  if(interrupcion0==1){
 80006ec:	e776      	b.n	80005dc <main+0x28>
 80006ee:	bf00      	nop
 80006f0:	20000440 	.word	0x20000440
 80006f4:	20000444 	.word	0x20000444
 80006f8:	20000441 	.word	0x20000441
 80006fc:	42020800 	.word	0x42020800
 8000700:	42020400 	.word	0x42020400

08000704 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b098      	sub	sp, #96	; 0x60
 8000708:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800070a:	f107 0318 	add.w	r3, r7, #24
 800070e:	2248      	movs	r2, #72	; 0x48
 8000710:	2100      	movs	r1, #0
 8000712:	4618      	mov	r0, r3
 8000714:	f005 f896 	bl	8005844 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000718:	1d3b      	adds	r3, r7, #4
 800071a:	2200      	movs	r2, #0
 800071c:	601a      	str	r2, [r3, #0]
 800071e:	605a      	str	r2, [r3, #4]
 8000720:	609a      	str	r2, [r3, #8]
 8000722:	60da      	str	r2, [r3, #12]
 8000724:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 8000726:	2000      	movs	r0, #0
 8000728:	f002 f992 	bl	8002a50 <HAL_PWREx_ControlVoltageScaling>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000732:	f000 faa5 	bl	8000c80 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000736:	f002 f96d 	bl	8002a14 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800073a:	4b24      	ldr	r3, [pc, #144]	; (80007cc <SystemClock_Config+0xc8>)
 800073c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000740:	4a22      	ldr	r2, [pc, #136]	; (80007cc <SystemClock_Config+0xc8>)
 8000742:	f023 0318 	bic.w	r3, r3, #24
 8000746:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 800074a:	2336      	movs	r3, #54	; 0x36
 800074c:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800074e:	2381      	movs	r3, #129	; 0x81
 8000750:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000752:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000756:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000758:	2301      	movs	r3, #1
 800075a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800075c:	2340      	movs	r3, #64	; 0x40
 800075e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000760:	2301      	movs	r3, #1
 8000762:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000764:	2300      	movs	r3, #0
 8000766:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000768:	2360      	movs	r3, #96	; 0x60
 800076a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800076c:	2302      	movs	r3, #2
 800076e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000770:	2301      	movs	r3, #1
 8000772:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000774:	2301      	movs	r3, #1
 8000776:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 8000778:	2337      	movs	r3, #55	; 0x37
 800077a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800077c:	2307      	movs	r3, #7
 800077e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000780:	2302      	movs	r3, #2
 8000782:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000784:	2302      	movs	r3, #2
 8000786:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000788:	f107 0318 	add.w	r3, r7, #24
 800078c:	4618      	mov	r0, r3
 800078e:	f002 f9ef 	bl	8002b70 <HAL_RCC_OscConfig>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000798:	f000 fa72 	bl	8000c80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800079c:	230f      	movs	r3, #15
 800079e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007a0:	2303      	movs	r3, #3
 80007a2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007a4:	2300      	movs	r3, #0
 80007a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007a8:	2300      	movs	r3, #0
 80007aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007ac:	2300      	movs	r3, #0
 80007ae:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007b0:	1d3b      	adds	r3, r7, #4
 80007b2:	2105      	movs	r1, #5
 80007b4:	4618      	mov	r0, r3
 80007b6:	f002 feb1 	bl	800351c <HAL_RCC_ClockConfig>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80007c0:	f000 fa5e 	bl	8000c80 <Error_Handler>
  }
}
 80007c4:	bf00      	nop
 80007c6:	3760      	adds	r7, #96	; 0x60
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	40021000 	.word	0x40021000

080007d0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b08a      	sub	sp, #40	; 0x28
 80007d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80007d6:	f107 031c 	add.w	r3, r7, #28
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]
 80007e0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80007e2:	1d3b      	adds	r3, r7, #4
 80007e4:	2200      	movs	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]
 80007e8:	605a      	str	r2, [r3, #4]
 80007ea:	609a      	str	r2, [r3, #8]
 80007ec:	60da      	str	r2, [r3, #12]
 80007ee:	611a      	str	r2, [r3, #16]
 80007f0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007f2:	4b2f      	ldr	r3, [pc, #188]	; (80008b0 <MX_ADC1_Init+0xe0>)
 80007f4:	4a2f      	ldr	r2, [pc, #188]	; (80008b4 <MX_ADC1_Init+0xe4>)
 80007f6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007f8:	4b2d      	ldr	r3, [pc, #180]	; (80008b0 <MX_ADC1_Init+0xe0>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007fe:	4b2c      	ldr	r3, [pc, #176]	; (80008b0 <MX_ADC1_Init+0xe0>)
 8000800:	2200      	movs	r2, #0
 8000802:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000804:	4b2a      	ldr	r3, [pc, #168]	; (80008b0 <MX_ADC1_Init+0xe0>)
 8000806:	2200      	movs	r2, #0
 8000808:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800080a:	4b29      	ldr	r3, [pc, #164]	; (80008b0 <MX_ADC1_Init+0xe0>)
 800080c:	2200      	movs	r2, #0
 800080e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000810:	4b27      	ldr	r3, [pc, #156]	; (80008b0 <MX_ADC1_Init+0xe0>)
 8000812:	2204      	movs	r2, #4
 8000814:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000816:	4b26      	ldr	r3, [pc, #152]	; (80008b0 <MX_ADC1_Init+0xe0>)
 8000818:	2200      	movs	r2, #0
 800081a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800081c:	4b24      	ldr	r3, [pc, #144]	; (80008b0 <MX_ADC1_Init+0xe0>)
 800081e:	2200      	movs	r2, #0
 8000820:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000822:	4b23      	ldr	r3, [pc, #140]	; (80008b0 <MX_ADC1_Init+0xe0>)
 8000824:	2201      	movs	r2, #1
 8000826:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000828:	4b21      	ldr	r3, [pc, #132]	; (80008b0 <MX_ADC1_Init+0xe0>)
 800082a:	2200      	movs	r2, #0
 800082c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000830:	4b1f      	ldr	r3, [pc, #124]	; (80008b0 <MX_ADC1_Init+0xe0>)
 8000832:	2200      	movs	r2, #0
 8000834:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000836:	4b1e      	ldr	r3, [pc, #120]	; (80008b0 <MX_ADC1_Init+0xe0>)
 8000838:	2200      	movs	r2, #0
 800083a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800083c:	4b1c      	ldr	r3, [pc, #112]	; (80008b0 <MX_ADC1_Init+0xe0>)
 800083e:	2200      	movs	r2, #0
 8000840:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000844:	4b1a      	ldr	r3, [pc, #104]	; (80008b0 <MX_ADC1_Init+0xe0>)
 8000846:	2200      	movs	r2, #0
 8000848:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800084a:	4b19      	ldr	r3, [pc, #100]	; (80008b0 <MX_ADC1_Init+0xe0>)
 800084c:	2200      	movs	r2, #0
 800084e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000852:	4817      	ldr	r0, [pc, #92]	; (80008b0 <MX_ADC1_Init+0xe0>)
 8000854:	f000 fed0 	bl	80015f8 <HAL_ADC_Init>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800085e:	f000 fa0f 	bl	8000c80 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000862:	2300      	movs	r3, #0
 8000864:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000866:	f107 031c 	add.w	r3, r7, #28
 800086a:	4619      	mov	r1, r3
 800086c:	4810      	ldr	r0, [pc, #64]	; (80008b0 <MX_ADC1_Init+0xe0>)
 800086e:	f001 fc1f 	bl	80020b0 <HAL_ADCEx_MultiModeConfigChannel>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000878:	f000 fa02 	bl	8000c80 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800087c:	4b0e      	ldr	r3, [pc, #56]	; (80008b8 <MX_ADC1_Init+0xe8>)
 800087e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000880:	2306      	movs	r3, #6
 8000882:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000884:	2300      	movs	r3, #0
 8000886:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000888:	237f      	movs	r3, #127	; 0x7f
 800088a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800088c:	2304      	movs	r3, #4
 800088e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000890:	2300      	movs	r3, #0
 8000892:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000894:	1d3b      	adds	r3, r7, #4
 8000896:	4619      	mov	r1, r3
 8000898:	4805      	ldr	r0, [pc, #20]	; (80008b0 <MX_ADC1_Init+0xe0>)
 800089a:	f000 fff9 	bl	8001890 <HAL_ADC_ConfigChannel>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80008a4:	f000 f9ec 	bl	8000c80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008a8:	bf00      	nop
 80008aa:	3728      	adds	r7, #40	; 0x28
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	20000028 	.word	0x20000028
 80008b4:	42028000 	.word	0x42028000
 80008b8:	0c900008 	.word	0x0c900008

080008bc <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 80008c0:	2000      	movs	r0, #0
 80008c2:	f001 ff73 	bl	80027ac <HAL_ICACHE_ConfigAssociativityMode>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 80008cc:	f000 f9d8 	bl	8000c80 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 80008d0:	f001 ff8c 	bl	80027ec <HAL_ICACHE_Enable>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 80008da:	f000 f9d1 	bl	8000c80 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80008de:	bf00      	nop
 80008e0:	bd80      	pop	{r7, pc}
	...

080008e4 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80008e8:	4b22      	ldr	r3, [pc, #136]	; (8000974 <MX_LPUART1_UART_Init+0x90>)
 80008ea:	4a23      	ldr	r2, [pc, #140]	; (8000978 <MX_LPUART1_UART_Init+0x94>)
 80008ec:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 80008ee:	4b21      	ldr	r3, [pc, #132]	; (8000974 <MX_LPUART1_UART_Init+0x90>)
 80008f0:	4a22      	ldr	r2, [pc, #136]	; (800097c <MX_LPUART1_UART_Init+0x98>)
 80008f2:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008f4:	4b1f      	ldr	r3, [pc, #124]	; (8000974 <MX_LPUART1_UART_Init+0x90>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80008fa:	4b1e      	ldr	r3, [pc, #120]	; (8000974 <MX_LPUART1_UART_Init+0x90>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000900:	4b1c      	ldr	r3, [pc, #112]	; (8000974 <MX_LPUART1_UART_Init+0x90>)
 8000902:	2200      	movs	r2, #0
 8000904:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000906:	4b1b      	ldr	r3, [pc, #108]	; (8000974 <MX_LPUART1_UART_Init+0x90>)
 8000908:	220c      	movs	r2, #12
 800090a:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800090c:	4b19      	ldr	r3, [pc, #100]	; (8000974 <MX_LPUART1_UART_Init+0x90>)
 800090e:	2200      	movs	r2, #0
 8000910:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000912:	4b18      	ldr	r3, [pc, #96]	; (8000974 <MX_LPUART1_UART_Init+0x90>)
 8000914:	2200      	movs	r2, #0
 8000916:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000918:	4b16      	ldr	r3, [pc, #88]	; (8000974 <MX_LPUART1_UART_Init+0x90>)
 800091a:	2200      	movs	r2, #0
 800091c:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800091e:	4b15      	ldr	r3, [pc, #84]	; (8000974 <MX_LPUART1_UART_Init+0x90>)
 8000920:	2200      	movs	r2, #0
 8000922:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000924:	4b13      	ldr	r3, [pc, #76]	; (8000974 <MX_LPUART1_UART_Init+0x90>)
 8000926:	2200      	movs	r2, #0
 8000928:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800092a:	4812      	ldr	r0, [pc, #72]	; (8000974 <MX_LPUART1_UART_Init+0x90>)
 800092c:	f003 ff2a 	bl	8004784 <HAL_UART_Init>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 8000936:	f000 f9a3 	bl	8000c80 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800093a:	2100      	movs	r1, #0
 800093c:	480d      	ldr	r0, [pc, #52]	; (8000974 <MX_LPUART1_UART_Init+0x90>)
 800093e:	f004 fcc3 	bl	80052c8 <HAL_UARTEx_SetTxFifoThreshold>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 8000948:	f000 f99a 	bl	8000c80 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800094c:	2100      	movs	r1, #0
 800094e:	4809      	ldr	r0, [pc, #36]	; (8000974 <MX_LPUART1_UART_Init+0x90>)
 8000950:	f004 fcf8 	bl	8005344 <HAL_UARTEx_SetRxFifoThreshold>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 800095a:	f000 f991 	bl	8000c80 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800095e:	4805      	ldr	r0, [pc, #20]	; (8000974 <MX_LPUART1_UART_Init+0x90>)
 8000960:	f004 fc79 	bl	8005256 <HAL_UARTEx_DisableFifoMode>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 800096a:	f000 f989 	bl	8000c80 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800096e:	bf00      	nop
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	20000090 	.word	0x20000090
 8000978:	40008000 	.word	0x40008000
 800097c:	00033324 	.word	0x00033324

08000980 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b086      	sub	sp, #24
 8000984:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 8000986:	463b      	mov	r3, r7
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	605a      	str	r2, [r3, #4]
 800098e:	609a      	str	r2, [r3, #8]
 8000990:	60da      	str	r2, [r3, #12]
 8000992:	611a      	str	r2, [r3, #16]
 8000994:	615a      	str	r2, [r3, #20]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000996:	4b1d      	ldr	r3, [pc, #116]	; (8000a0c <MX_RTC_Init+0x8c>)
 8000998:	4a1d      	ldr	r2, [pc, #116]	; (8000a10 <MX_RTC_Init+0x90>)
 800099a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800099c:	4b1b      	ldr	r3, [pc, #108]	; (8000a0c <MX_RTC_Init+0x8c>)
 800099e:	2200      	movs	r2, #0
 80009a0:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80009a2:	4b1a      	ldr	r3, [pc, #104]	; (8000a0c <MX_RTC_Init+0x8c>)
 80009a4:	227f      	movs	r2, #127	; 0x7f
 80009a6:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80009a8:	4b18      	ldr	r3, [pc, #96]	; (8000a0c <MX_RTC_Init+0x8c>)
 80009aa:	22ff      	movs	r2, #255	; 0xff
 80009ac:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80009ae:	4b17      	ldr	r3, [pc, #92]	; (8000a0c <MX_RTC_Init+0x8c>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80009b4:	4b15      	ldr	r3, [pc, #84]	; (8000a0c <MX_RTC_Init+0x8c>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80009ba:	4b14      	ldr	r3, [pc, #80]	; (8000a0c <MX_RTC_Init+0x8c>)
 80009bc:	2200      	movs	r2, #0
 80009be:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80009c0:	4b12      	ldr	r3, [pc, #72]	; (8000a0c <MX_RTC_Init+0x8c>)
 80009c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009c6:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80009c8:	4b10      	ldr	r3, [pc, #64]	; (8000a0c <MX_RTC_Init+0x8c>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80009ce:	480f      	ldr	r0, [pc, #60]	; (8000a0c <MX_RTC_Init+0x8c>)
 80009d0:	f003 fd9e 	bl	8004510 <HAL_RTC_Init>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 80009da:	f000 f951 	bl	8000c80 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 80009de:	2300      	movs	r3, #0
 80009e0:	603b      	str	r3, [r7, #0]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 80009e2:	2300      	movs	r3, #0
 80009e4:	60fb      	str	r3, [r7, #12]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 80009e6:	2300      	movs	r3, #0
 80009e8:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 80009ea:	2300      	movs	r3, #0
 80009ec:	617b      	str	r3, [r7, #20]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 80009ee:	463b      	mov	r3, r7
 80009f0:	4619      	mov	r1, r3
 80009f2:	4806      	ldr	r0, [pc, #24]	; (8000a0c <MX_RTC_Init+0x8c>)
 80009f4:	f003 fe9a 	bl	800472c <HAL_RTCEx_PrivilegeModeSet>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 80009fe:	f000 f93f 	bl	8000c80 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000a02:	bf00      	nop
 8000a04:	3718      	adds	r7, #24
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	20000124 	.word	0x20000124
 8000a10:	40002800 	.word	0x40002800

08000a14 <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b086      	sub	sp, #24
 8000a18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1a:	463b      	mov	r3, r7
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	609a      	str	r2, [r3, #8]
 8000a24:	60da      	str	r2, [r3, #12]
 8000a26:	611a      	str	r2, [r3, #16]
 8000a28:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 8000a2a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000a2e:	f7ff fda9 	bl	8000584 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000a32:	2002      	movs	r0, #2
 8000a34:	f7ff fd8e 	bl	8000554 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000a38:	2001      	movs	r0, #1
 8000a3a:	f7ff fd8b 	bl	8000554 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB15   ------> UCPD1_CC2
  PA15 (JTDI)   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000a3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a42:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000a44:	2303      	movs	r3, #3
 8000a46:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a4c:	463b      	mov	r3, r7
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4809      	ldr	r0, [pc, #36]	; (8000a78 <MX_UCPD1_Init+0x64>)
 8000a52:	f004 fe4e 	bl	80056f2 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000a56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a5a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000a5c:	2303      	movs	r3, #3
 8000a5e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000a60:	2300      	movs	r3, #0
 8000a62:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a64:	463b      	mov	r3, r7
 8000a66:	4619      	mov	r1, r3
 8000a68:	4804      	ldr	r0, [pc, #16]	; (8000a7c <MX_UCPD1_Init+0x68>)
 8000a6a:	f004 fe42 	bl	80056f2 <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8000a6e:	bf00      	nop
 8000a70:	3718      	adds	r7, #24
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	42020400 	.word	0x42020400
 8000a7c:	42020000 	.word	0x42020000

08000a80 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000a84:	4b10      	ldr	r3, [pc, #64]	; (8000ac8 <MX_USB_PCD_Init+0x48>)
 8000a86:	4a11      	ldr	r2, [pc, #68]	; (8000acc <MX_USB_PCD_Init+0x4c>)
 8000a88:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000a8a:	4b0f      	ldr	r3, [pc, #60]	; (8000ac8 <MX_USB_PCD_Init+0x48>)
 8000a8c:	2208      	movs	r2, #8
 8000a8e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000a90:	4b0d      	ldr	r3, [pc, #52]	; (8000ac8 <MX_USB_PCD_Init+0x48>)
 8000a92:	2202      	movs	r2, #2
 8000a94:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a96:	4b0c      	ldr	r3, [pc, #48]	; (8000ac8 <MX_USB_PCD_Init+0x48>)
 8000a98:	2202      	movs	r2, #2
 8000a9a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000a9c:	4b0a      	ldr	r3, [pc, #40]	; (8000ac8 <MX_USB_PCD_Init+0x48>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000aa2:	4b09      	ldr	r3, [pc, #36]	; (8000ac8 <MX_USB_PCD_Init+0x48>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000aa8:	4b07      	ldr	r3, [pc, #28]	; (8000ac8 <MX_USB_PCD_Init+0x48>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000aae:	4b06      	ldr	r3, [pc, #24]	; (8000ac8 <MX_USB_PCD_Init+0x48>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000ab4:	4804      	ldr	r0, [pc, #16]	; (8000ac8 <MX_USB_PCD_Init+0x48>)
 8000ab6:	f001 fea9 	bl	800280c <HAL_PCD_Init>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000ac0:	f000 f8de 	bl	8000c80 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000ac4:	bf00      	nop
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	2000014c 	.word	0x2000014c
 8000acc:	4000d400 	.word	0x4000d400

08000ad0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b08a      	sub	sp, #40	; 0x28
 8000ad4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad6:	f107 0314 	add.w	r3, r7, #20
 8000ada:	2200      	movs	r2, #0
 8000adc:	601a      	str	r2, [r3, #0]
 8000ade:	605a      	str	r2, [r3, #4]
 8000ae0:	609a      	str	r2, [r3, #8]
 8000ae2:	60da      	str	r2, [r3, #12]
 8000ae4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ae6:	4b55      	ldr	r3, [pc, #340]	; (8000c3c <MX_GPIO_Init+0x16c>)
 8000ae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aea:	4a54      	ldr	r2, [pc, #336]	; (8000c3c <MX_GPIO_Init+0x16c>)
 8000aec:	f043 0304 	orr.w	r3, r3, #4
 8000af0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000af2:	4b52      	ldr	r3, [pc, #328]	; (8000c3c <MX_GPIO_Init+0x16c>)
 8000af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000af6:	f003 0304 	and.w	r3, r3, #4
 8000afa:	613b      	str	r3, [r7, #16]
 8000afc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000afe:	4b4f      	ldr	r3, [pc, #316]	; (8000c3c <MX_GPIO_Init+0x16c>)
 8000b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b02:	4a4e      	ldr	r2, [pc, #312]	; (8000c3c <MX_GPIO_Init+0x16c>)
 8000b04:	f043 0302 	orr.w	r3, r3, #2
 8000b08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b0a:	4b4c      	ldr	r3, [pc, #304]	; (8000c3c <MX_GPIO_Init+0x16c>)
 8000b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b0e:	f003 0302 	and.w	r3, r3, #2
 8000b12:	60fb      	str	r3, [r7, #12]
 8000b14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b16:	4b49      	ldr	r3, [pc, #292]	; (8000c3c <MX_GPIO_Init+0x16c>)
 8000b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b1a:	4a48      	ldr	r2, [pc, #288]	; (8000c3c <MX_GPIO_Init+0x16c>)
 8000b1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b22:	4b46      	ldr	r3, [pc, #280]	; (8000c3c <MX_GPIO_Init+0x16c>)
 8000b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b2a:	60bb      	str	r3, [r7, #8]
 8000b2c:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 8000b2e:	f001 ffeb 	bl	8002b08 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b32:	4b42      	ldr	r3, [pc, #264]	; (8000c3c <MX_GPIO_Init+0x16c>)
 8000b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b36:	4a41      	ldr	r2, [pc, #260]	; (8000c3c <MX_GPIO_Init+0x16c>)
 8000b38:	f043 0301 	orr.w	r3, r3, #1
 8000b3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b3e:	4b3f      	ldr	r3, [pc, #252]	; (8000c3c <MX_GPIO_Init+0x16c>)
 8000b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b42:	f003 0301 	and.w	r3, r3, #1
 8000b46:	607b      	str	r3, [r7, #4]
 8000b48:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(L0_GPIO_Port, L0_Pin, GPIO_PIN_RESET);
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	2180      	movs	r1, #128	; 0x80
 8000b4e:	483c      	ldr	r0, [pc, #240]	; (8000c40 <MX_GPIO_Init+0x170>)
 8000b50:	f001 fde2 	bl	8002718 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000b54:	2200      	movs	r2, #0
 8000b56:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b5a:	483a      	ldr	r0, [pc, #232]	; (8000c44 <MX_GPIO_Init+0x174>)
 8000b5c:	f001 fddc 	bl	8002718 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UCPD_DBN_Pin|L1_Pin, GPIO_PIN_RESET);
 8000b60:	2200      	movs	r2, #0
 8000b62:	21a0      	movs	r1, #160	; 0xa0
 8000b64:	4838      	ldr	r0, [pc, #224]	; (8000c48 <MX_GPIO_Init+0x178>)
 8000b66:	f001 fdd7 	bl	8002718 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B0_Pin */
  GPIO_InitStruct.Pin = B0_Pin;
 8000b6a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b70:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b76:	2300      	movs	r3, #0
 8000b78:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B0_GPIO_Port, &GPIO_InitStruct);
 8000b7a:	f107 0314 	add.w	r3, r7, #20
 8000b7e:	4619      	mov	r1, r3
 8000b80:	482f      	ldr	r0, [pc, #188]	; (8000c40 <MX_GPIO_Init+0x170>)
 8000b82:	f001 fc49 	bl	8002418 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8000b86:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000b8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b8c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b92:	2300      	movs	r3, #0
 8000b94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8000b96:	f107 0314 	add.w	r3, r7, #20
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	482a      	ldr	r0, [pc, #168]	; (8000c48 <MX_GPIO_Init+0x178>)
 8000b9e:	f001 fc3b 	bl	8002418 <HAL_GPIO_Init>

  /*Configure GPIO pin : L0_Pin */
  GPIO_InitStruct.Pin = L0_Pin;
 8000ba2:	2380      	movs	r3, #128	; 0x80
 8000ba4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000baa:	2300      	movs	r3, #0
 8000bac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(L0_GPIO_Port, &GPIO_InitStruct);
 8000bb2:	f107 0314 	add.w	r3, r7, #20
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4821      	ldr	r0, [pc, #132]	; (8000c40 <MX_GPIO_Init+0x170>)
 8000bba:	f001 fc2d 	bl	8002418 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8000bbe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8000bd0:	f107 0314 	add.w	r3, r7, #20
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	481b      	ldr	r0, [pc, #108]	; (8000c44 <MX_GPIO_Init+0x174>)
 8000bd8:	f001 fc1e 	bl	8002418 <HAL_GPIO_Init>

  /*Configure GPIO pins : UCPD_DBN_Pin L1_Pin */
  GPIO_InitStruct.Pin = UCPD_DBN_Pin|L1_Pin;
 8000bdc:	23a0      	movs	r3, #160	; 0xa0
 8000bde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be0:	2301      	movs	r3, #1
 8000be2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	2300      	movs	r3, #0
 8000be6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be8:	2300      	movs	r3, #0
 8000bea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	4815      	ldr	r0, [pc, #84]	; (8000c48 <MX_GPIO_Init+0x178>)
 8000bf4:	f001 fc10 	bl	8002418 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bf8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bfc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bfe:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c04:	2302      	movs	r3, #2
 8000c06:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c08:	f107 0314 	add.w	r3, r7, #20
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	480e      	ldr	r0, [pc, #56]	; (8000c48 <MX_GPIO_Init+0x178>)
 8000c10:	f001 fc02 	bl	8002418 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI8_IRQn, 0, 0);
 8000c14:	2200      	movs	r2, #0
 8000c16:	2100      	movs	r1, #0
 8000c18:	2013      	movs	r0, #19
 8000c1a:	f001 fbc8 	bl	80023ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI8_IRQn);
 8000c1e:	2013      	movs	r0, #19
 8000c20:	f001 fbdf 	bl	80023e2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI13_IRQn, 0, 0);
 8000c24:	2200      	movs	r2, #0
 8000c26:	2100      	movs	r1, #0
 8000c28:	2018      	movs	r0, #24
 8000c2a:	f001 fbc0 	bl	80023ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 8000c2e:	2018      	movs	r0, #24
 8000c30:	f001 fbd7 	bl	80023e2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c34:	bf00      	nop
 8000c36:	3728      	adds	r7, #40	; 0x28
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	40021000 	.word	0x40021000
 8000c40:	42020800 	.word	0x42020800
 8000c44:	42020000 	.word	0x42020000
 8000c48:	42020400 	.word	0x42020400

08000c4c <HAL_GPIO_EXTI_Rising_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	4603      	mov	r3, r0
 8000c54:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == B0_Pin){
 8000c56:	88fb      	ldrh	r3, [r7, #6]
 8000c58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000c5c:	d103      	bne.n	8000c66 <HAL_GPIO_EXTI_Rising_Callback+0x1a>
		interrupcion0 = 1;
 8000c5e:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <HAL_GPIO_EXTI_Rising_Callback+0x2c>)
 8000c60:	2201      	movs	r2, #1
 8000c62:	701a      	strb	r2, [r3, #0]

	}else {
		interrupcion1 = 1;
	}

}
 8000c64:	e002      	b.n	8000c6c <HAL_GPIO_EXTI_Rising_Callback+0x20>
		interrupcion1 = 1;
 8000c66:	4b05      	ldr	r3, [pc, #20]	; (8000c7c <HAL_GPIO_EXTI_Rising_Callback+0x30>)
 8000c68:	2201      	movs	r2, #1
 8000c6a:	701a      	strb	r2, [r3, #0]
}
 8000c6c:	bf00      	nop
 8000c6e:	370c      	adds	r7, #12
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr
 8000c78:	20000440 	.word	0x20000440
 8000c7c:	20000441 	.word	0x20000441

08000c80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c84:	b672      	cpsid	i
}
 8000c86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c88:	e7fe      	b.n	8000c88 <Error_Handler+0x8>
	...

08000c8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c92:	4b0f      	ldr	r3, [pc, #60]	; (8000cd0 <HAL_MspInit+0x44>)
 8000c94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c96:	4a0e      	ldr	r2, [pc, #56]	; (8000cd0 <HAL_MspInit+0x44>)
 8000c98:	f043 0301 	orr.w	r3, r3, #1
 8000c9c:	6613      	str	r3, [r2, #96]	; 0x60
 8000c9e:	4b0c      	ldr	r3, [pc, #48]	; (8000cd0 <HAL_MspInit+0x44>)
 8000ca0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ca2:	f003 0301 	and.w	r3, r3, #1
 8000ca6:	607b      	str	r3, [r7, #4]
 8000ca8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000caa:	4b09      	ldr	r3, [pc, #36]	; (8000cd0 <HAL_MspInit+0x44>)
 8000cac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cae:	4a08      	ldr	r2, [pc, #32]	; (8000cd0 <HAL_MspInit+0x44>)
 8000cb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cb4:	6593      	str	r3, [r2, #88]	; 0x58
 8000cb6:	4b06      	ldr	r3, [pc, #24]	; (8000cd0 <HAL_MspInit+0x44>)
 8000cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cbe:	603b      	str	r3, [r7, #0]
 8000cc0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cc2:	bf00      	nop
 8000cc4:	370c      	adds	r7, #12
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	40021000 	.word	0x40021000

08000cd4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b0ae      	sub	sp, #184	; 0xb8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cdc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
 8000ce4:	605a      	str	r2, [r3, #4]
 8000ce6:	609a      	str	r2, [r3, #8]
 8000ce8:	60da      	str	r2, [r3, #12]
 8000cea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cec:	f107 0310 	add.w	r3, r7, #16
 8000cf0:	2294      	movs	r2, #148	; 0x94
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f004 fda5 	bl	8005844 <memset>
  if(hadc->Instance==ADC1)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4a1f      	ldr	r2, [pc, #124]	; (8000d7c <HAL_ADC_MspInit+0xa8>)
 8000d00:	4293      	cmp	r3, r2
 8000d02:	d137      	bne.n	8000d74 <HAL_ADC_MspInit+0xa0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000d04:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d08:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000d0a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8000d0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d12:	f107 0310 	add.w	r3, r7, #16
 8000d16:	4618      	mov	r0, r3
 8000d18:	f002 fee4 	bl	8003ae4 <HAL_RCCEx_PeriphCLKConfig>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8000d22:	f7ff ffad 	bl	8000c80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000d26:	4b16      	ldr	r3, [pc, #88]	; (8000d80 <HAL_ADC_MspInit+0xac>)
 8000d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d2a:	4a15      	ldr	r2, [pc, #84]	; (8000d80 <HAL_ADC_MspInit+0xac>)
 8000d2c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000d30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d32:	4b13      	ldr	r3, [pc, #76]	; (8000d80 <HAL_ADC_MspInit+0xac>)
 8000d34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d3a:	60fb      	str	r3, [r7, #12]
 8000d3c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d3e:	4b10      	ldr	r3, [pc, #64]	; (8000d80 <HAL_ADC_MspInit+0xac>)
 8000d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d42:	4a0f      	ldr	r2, [pc, #60]	; (8000d80 <HAL_ADC_MspInit+0xac>)
 8000d44:	f043 0304 	orr.w	r3, r3, #4
 8000d48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d4a:	4b0d      	ldr	r3, [pc, #52]	; (8000d80 <HAL_ADC_MspInit+0xac>)
 8000d4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d4e:	f003 0304 	and.w	r3, r3, #4
 8000d52:	60bb      	str	r3, [r7, #8]
 8000d54:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8000d56:	2304      	movs	r3, #4
 8000d58:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d5c:	2303      	movs	r3, #3
 8000d5e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d62:	2300      	movs	r3, #0
 8000d64:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8000d68:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4805      	ldr	r0, [pc, #20]	; (8000d84 <HAL_ADC_MspInit+0xb0>)
 8000d70:	f001 fb52 	bl	8002418 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000d74:	bf00      	nop
 8000d76:	37b8      	adds	r7, #184	; 0xb8
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	42028000 	.word	0x42028000
 8000d80:	40021000 	.word	0x40021000
 8000d84:	42020800 	.word	0x42020800

08000d88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b0ae      	sub	sp, #184	; 0xb8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d90:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	605a      	str	r2, [r3, #4]
 8000d9a:	609a      	str	r2, [r3, #8]
 8000d9c:	60da      	str	r2, [r3, #12]
 8000d9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000da0:	f107 0310 	add.w	r3, r7, #16
 8000da4:	2294      	movs	r2, #148	; 0x94
 8000da6:	2100      	movs	r1, #0
 8000da8:	4618      	mov	r0, r3
 8000daa:	f004 fd4b 	bl	8005844 <memset>
  if(huart->Instance==LPUART1)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4a22      	ldr	r2, [pc, #136]	; (8000e3c <HAL_UART_MspInit+0xb4>)
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d13d      	bne.n	8000e34 <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000db8:	2320      	movs	r3, #32
 8000dba:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dc0:	f107 0310 	add.w	r3, r7, #16
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f002 fe8d 	bl	8003ae4 <HAL_RCCEx_PeriphCLKConfig>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000dd0:	f7ff ff56 	bl	8000c80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000dd4:	4b1a      	ldr	r3, [pc, #104]	; (8000e40 <HAL_UART_MspInit+0xb8>)
 8000dd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000dd8:	4a19      	ldr	r2, [pc, #100]	; (8000e40 <HAL_UART_MspInit+0xb8>)
 8000dda:	f043 0301 	orr.w	r3, r3, #1
 8000dde:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000de0:	4b17      	ldr	r3, [pc, #92]	; (8000e40 <HAL_UART_MspInit+0xb8>)
 8000de2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000de4:	f003 0301 	and.w	r3, r3, #1
 8000de8:	60fb      	str	r3, [r7, #12]
 8000dea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000dec:	4b14      	ldr	r3, [pc, #80]	; (8000e40 <HAL_UART_MspInit+0xb8>)
 8000dee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df0:	4a13      	ldr	r2, [pc, #76]	; (8000e40 <HAL_UART_MspInit+0xb8>)
 8000df2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000df6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000df8:	4b11      	ldr	r3, [pc, #68]	; (8000e40 <HAL_UART_MspInit+0xb8>)
 8000dfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e00:	60bb      	str	r3, [r7, #8]
 8000e02:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8000e04:	f001 fe80 	bl	8002b08 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_VCP_TX_Pin|ST_LINK_VCP_RX_Pin;
 8000e08:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000e0c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e10:	2302      	movs	r3, #2
 8000e12:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e16:	2300      	movs	r3, #0
 8000e18:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000e22:	2308      	movs	r3, #8
 8000e24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e28:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	4805      	ldr	r0, [pc, #20]	; (8000e44 <HAL_UART_MspInit+0xbc>)
 8000e30:	f001 faf2 	bl	8002418 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000e34:	bf00      	nop
 8000e36:	37b8      	adds	r7, #184	; 0xb8
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	40008000 	.word	0x40008000
 8000e40:	40021000 	.word	0x40021000
 8000e44:	42021800 	.word	0x42021800

08000e48 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b0a8      	sub	sp, #160	; 0xa0
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e50:	f107 030c 	add.w	r3, r7, #12
 8000e54:	2294      	movs	r2, #148	; 0x94
 8000e56:	2100      	movs	r1, #0
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f004 fcf3 	bl	8005844 <memset>
  if(hrtc->Instance==RTC)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4a16      	ldr	r2, [pc, #88]	; (8000ebc <HAL_RTC_MspInit+0x74>)
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d124      	bne.n	8000eb2 <HAL_RTC_MspInit+0x6a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000e68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e6c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000e6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e72:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e76:	f107 030c 	add.w	r3, r7, #12
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f002 fe32 	bl	8003ae4 <HAL_RCCEx_PeriphCLKConfig>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000e86:	f7ff fefb 	bl	8000c80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000e8a:	4b0d      	ldr	r3, [pc, #52]	; (8000ec0 <HAL_RTC_MspInit+0x78>)
 8000e8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e90:	4a0b      	ldr	r2, [pc, #44]	; (8000ec0 <HAL_RTC_MspInit+0x78>)
 8000e92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000e9a:	4b09      	ldr	r3, [pc, #36]	; (8000ec0 <HAL_RTC_MspInit+0x78>)
 8000e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e9e:	4a08      	ldr	r2, [pc, #32]	; (8000ec0 <HAL_RTC_MspInit+0x78>)
 8000ea0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ea4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ea6:	4b06      	ldr	r3, [pc, #24]	; (8000ec0 <HAL_RTC_MspInit+0x78>)
 8000ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eaa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000eae:	60bb      	str	r3, [r7, #8]
 8000eb0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000eb2:	bf00      	nop
 8000eb4:	37a0      	adds	r7, #160	; 0xa0
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	40002800 	.word	0x40002800
 8000ec0:	40021000 	.word	0x40021000

08000ec4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b0ae      	sub	sp, #184	; 0xb8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ecc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	605a      	str	r2, [r3, #4]
 8000ed6:	609a      	str	r2, [r3, #8]
 8000ed8:	60da      	str	r2, [r3, #12]
 8000eda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000edc:	f107 0310 	add.w	r3, r7, #16
 8000ee0:	2294      	movs	r2, #148	; 0x94
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f004 fcad 	bl	8005844 <memset>
  if(hpcd->Instance==USB)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4a22      	ldr	r2, [pc, #136]	; (8000f78 <HAL_PCD_MspInit+0xb4>)
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d13d      	bne.n	8000f70 <HAL_PCD_MspInit+0xac>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000ef4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ef8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000efa:	2300      	movs	r3, #0
 8000efc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f00:	f107 0310 	add.w	r3, r7, #16
 8000f04:	4618      	mov	r0, r3
 8000f06:	f002 fded 	bl	8003ae4 <HAL_RCCEx_PeriphCLKConfig>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000f10:	f7ff feb6 	bl	8000c80 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f14:	4b19      	ldr	r3, [pc, #100]	; (8000f7c <HAL_PCD_MspInit+0xb8>)
 8000f16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f18:	4a18      	ldr	r2, [pc, #96]	; (8000f7c <HAL_PCD_MspInit+0xb8>)
 8000f1a:	f043 0301 	orr.w	r3, r3, #1
 8000f1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f20:	4b16      	ldr	r3, [pc, #88]	; (8000f7c <HAL_PCD_MspInit+0xb8>)
 8000f22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f24:	f003 0301 	and.w	r3, r3, #1
 8000f28:	60fb      	str	r3, [r7, #12]
 8000f2a:	68fb      	ldr	r3, [r7, #12]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000f2c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000f30:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f34:	2302      	movs	r3, #2
 8000f36:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f40:	2300      	movs	r3, #0
 8000f42:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000f46:	230a      	movs	r3, #10
 8000f48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f4c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f50:	4619      	mov	r1, r3
 8000f52:	480b      	ldr	r0, [pc, #44]	; (8000f80 <HAL_PCD_MspInit+0xbc>)
 8000f54:	f001 fa60 	bl	8002418 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000f58:	4b08      	ldr	r3, [pc, #32]	; (8000f7c <HAL_PCD_MspInit+0xb8>)
 8000f5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f5c:	4a07      	ldr	r2, [pc, #28]	; (8000f7c <HAL_PCD_MspInit+0xb8>)
 8000f5e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f62:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000f64:	4b05      	ldr	r3, [pc, #20]	; (8000f7c <HAL_PCD_MspInit+0xb8>)
 8000f66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f6c:	60bb      	str	r3, [r7, #8]
 8000f6e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000f70:	bf00      	nop
 8000f72:	37b8      	adds	r7, #184	; 0xb8
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	4000d400 	.word	0x4000d400
 8000f7c:	40021000 	.word	0x40021000
 8000f80:	42020000 	.word	0x42020000

08000f84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f88:	e7fe      	b.n	8000f88 <NMI_Handler+0x4>

08000f8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f8e:	e7fe      	b.n	8000f8e <HardFault_Handler+0x4>

08000f90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f94:	e7fe      	b.n	8000f94 <MemManage_Handler+0x4>

08000f96 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f96:	b480      	push	{r7}
 8000f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f9a:	e7fe      	b.n	8000f9a <BusFault_Handler+0x4>

08000f9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fa0:	e7fe      	b.n	8000fa0 <UsageFault_Handler+0x4>

08000fa2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fa6:	bf00      	nop
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr

08000fb0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fb4:	bf00      	nop
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr

08000fbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fc2:	bf00      	nop
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr

08000fcc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fd0:	f000 f952 	bl	8001278 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fd4:	bf00      	nop
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <EXTI8_IRQHandler>:

/**
  * @brief This function handles EXTI line8 interrupt.
  */
void EXTI8_IRQHandler(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI8_IRQn 0 */

  /* USER CODE END EXTI8_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000fdc:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000fe0:	f001 fbb2 	bl	8002748 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI8_IRQn 1 */

  /* USER CODE END EXTI8_IRQn 1 */
}
 8000fe4:	bf00      	nop
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B0_Pin);
 8000fec:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000ff0:	f001 fbaa 	bl	8002748 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8000ff4:	bf00      	nop
 8000ff6:	bd80      	pop	{r7, pc}

08000ff8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ffc:	4b06      	ldr	r3, [pc, #24]	; (8001018 <SystemInit+0x20>)
 8000ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001002:	4a05      	ldr	r2, [pc, #20]	; (8001018 <SystemInit+0x20>)
 8001004:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001008:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800100c:	bf00      	nop
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	e000ed00 	.word	0xe000ed00

0800101c <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 800101c:	b480      	push	{r7}
 800101e:	b087      	sub	sp, #28
 8001020:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 8001022:	4b4f      	ldr	r3, [pc, #316]	; (8001160 <SystemCoreClockUpdate+0x144>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f003 0308 	and.w	r3, r3, #8
 800102a:	2b00      	cmp	r3, #0
 800102c:	d107      	bne.n	800103e <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 800102e:	4b4c      	ldr	r3, [pc, #304]	; (8001160 <SystemCoreClockUpdate+0x144>)
 8001030:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001034:	0a1b      	lsrs	r3, r3, #8
 8001036:	f003 030f 	and.w	r3, r3, #15
 800103a:	617b      	str	r3, [r7, #20]
 800103c:	e005      	b.n	800104a <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 800103e:	4b48      	ldr	r3, [pc, #288]	; (8001160 <SystemCoreClockUpdate+0x144>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	091b      	lsrs	r3, r3, #4
 8001044:	f003 030f 	and.w	r3, r3, #15
 8001048:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 800104a:	4a46      	ldr	r2, [pc, #280]	; (8001164 <SystemCoreClockUpdate+0x148>)
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001052:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001054:	4b42      	ldr	r3, [pc, #264]	; (8001160 <SystemCoreClockUpdate+0x144>)
 8001056:	689b      	ldr	r3, [r3, #8]
 8001058:	f003 030c 	and.w	r3, r3, #12
 800105c:	2b0c      	cmp	r3, #12
 800105e:	d866      	bhi.n	800112e <SystemCoreClockUpdate+0x112>
 8001060:	a201      	add	r2, pc, #4	; (adr r2, 8001068 <SystemCoreClockUpdate+0x4c>)
 8001062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001066:	bf00      	nop
 8001068:	0800109d 	.word	0x0800109d
 800106c:	0800112f 	.word	0x0800112f
 8001070:	0800112f 	.word	0x0800112f
 8001074:	0800112f 	.word	0x0800112f
 8001078:	080010a5 	.word	0x080010a5
 800107c:	0800112f 	.word	0x0800112f
 8001080:	0800112f 	.word	0x0800112f
 8001084:	0800112f 	.word	0x0800112f
 8001088:	080010ad 	.word	0x080010ad
 800108c:	0800112f 	.word	0x0800112f
 8001090:	0800112f 	.word	0x0800112f
 8001094:	0800112f 	.word	0x0800112f
 8001098:	080010b5 	.word	0x080010b5
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 800109c:	4a32      	ldr	r2, [pc, #200]	; (8001168 <SystemCoreClockUpdate+0x14c>)
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	6013      	str	r3, [r2, #0]
      break;
 80010a2:	e048      	b.n	8001136 <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80010a4:	4b30      	ldr	r3, [pc, #192]	; (8001168 <SystemCoreClockUpdate+0x14c>)
 80010a6:	4a31      	ldr	r2, [pc, #196]	; (800116c <SystemCoreClockUpdate+0x150>)
 80010a8:	601a      	str	r2, [r3, #0]
      break;
 80010aa:	e044      	b.n	8001136 <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80010ac:	4b2e      	ldr	r3, [pc, #184]	; (8001168 <SystemCoreClockUpdate+0x14c>)
 80010ae:	4a30      	ldr	r2, [pc, #192]	; (8001170 <SystemCoreClockUpdate+0x154>)
 80010b0:	601a      	str	r2, [r3, #0]
      break;
 80010b2:	e040      	b.n	8001136 <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80010b4:	4b2a      	ldr	r3, [pc, #168]	; (8001160 <SystemCoreClockUpdate+0x144>)
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	f003 0303 	and.w	r3, r3, #3
 80010bc:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 80010be:	4b28      	ldr	r3, [pc, #160]	; (8001160 <SystemCoreClockUpdate+0x144>)
 80010c0:	68db      	ldr	r3, [r3, #12]
 80010c2:	091b      	lsrs	r3, r3, #4
 80010c4:	f003 030f 	and.w	r3, r3, #15
 80010c8:	3301      	adds	r3, #1
 80010ca:	60bb      	str	r3, [r7, #8]
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	2b02      	cmp	r3, #2
 80010d0:	d003      	beq.n	80010da <SystemCoreClockUpdate+0xbe>
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	2b03      	cmp	r3, #3
 80010d6:	d006      	beq.n	80010e6 <SystemCoreClockUpdate+0xca>
 80010d8:	e00b      	b.n	80010f2 <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 80010da:	4a24      	ldr	r2, [pc, #144]	; (800116c <SystemCoreClockUpdate+0x150>)
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	fbb2 f3f3 	udiv	r3, r2, r3
 80010e2:	613b      	str	r3, [r7, #16]
          break;
 80010e4:	e00b      	b.n	80010fe <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 80010e6:	4a22      	ldr	r2, [pc, #136]	; (8001170 <SystemCoreClockUpdate+0x154>)
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ee:	613b      	str	r3, [r7, #16]
          break;
 80010f0:	e005      	b.n	80010fe <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 80010f2:	697a      	ldr	r2, [r7, #20]
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010fa:	613b      	str	r3, [r7, #16]
          break;
 80010fc:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 80010fe:	4b18      	ldr	r3, [pc, #96]	; (8001160 <SystemCoreClockUpdate+0x144>)
 8001100:	68db      	ldr	r3, [r3, #12]
 8001102:	0a1b      	lsrs	r3, r3, #8
 8001104:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	fb02 f303 	mul.w	r3, r2, r3
 800110e:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8001110:	4b13      	ldr	r3, [pc, #76]	; (8001160 <SystemCoreClockUpdate+0x144>)
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	0e5b      	lsrs	r3, r3, #25
 8001116:	f003 0303 	and.w	r3, r3, #3
 800111a:	3301      	adds	r3, #1
 800111c:	005b      	lsls	r3, r3, #1
 800111e:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8001120:	693a      	ldr	r2, [r7, #16]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	fbb2 f3f3 	udiv	r3, r2, r3
 8001128:	4a0f      	ldr	r2, [pc, #60]	; (8001168 <SystemCoreClockUpdate+0x14c>)
 800112a:	6013      	str	r3, [r2, #0]
      break;
 800112c:	e003      	b.n	8001136 <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 800112e:	4a0e      	ldr	r2, [pc, #56]	; (8001168 <SystemCoreClockUpdate+0x14c>)
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	6013      	str	r3, [r2, #0]
      break;
 8001134:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8001136:	4b0a      	ldr	r3, [pc, #40]	; (8001160 <SystemCoreClockUpdate+0x144>)
 8001138:	689b      	ldr	r3, [r3, #8]
 800113a:	091b      	lsrs	r3, r3, #4
 800113c:	f003 030f 	and.w	r3, r3, #15
 8001140:	4a0c      	ldr	r2, [pc, #48]	; (8001174 <SystemCoreClockUpdate+0x158>)
 8001142:	5cd3      	ldrb	r3, [r2, r3]
 8001144:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8001146:	4b08      	ldr	r3, [pc, #32]	; (8001168 <SystemCoreClockUpdate+0x14c>)
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	fa22 f303 	lsr.w	r3, r2, r3
 8001150:	4a05      	ldr	r2, [pc, #20]	; (8001168 <SystemCoreClockUpdate+0x14c>)
 8001152:	6013      	str	r3, [r2, #0]
}
 8001154:	bf00      	nop
 8001156:	371c      	adds	r7, #28
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr
 8001160:	40021000 	.word	0x40021000
 8001164:	080058cc 	.word	0x080058cc
 8001168:	20000000 	.word	0x20000000
 800116c:	00f42400 	.word	0x00f42400
 8001170:	007a1200 	.word	0x007a1200
 8001174:	080058b4 	.word	0x080058b4

08001178 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001178:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011b0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800117c:	f7ff ff3c 	bl	8000ff8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001180:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001182:	e003      	b.n	800118c <LoopCopyDataInit>

08001184 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001184:	4b0b      	ldr	r3, [pc, #44]	; (80011b4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001186:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001188:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800118a:	3104      	adds	r1, #4

0800118c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800118c:	480a      	ldr	r0, [pc, #40]	; (80011b8 <LoopForever+0xa>)
	ldr	r3, =_edata
 800118e:	4b0b      	ldr	r3, [pc, #44]	; (80011bc <LoopForever+0xe>)
	adds	r2, r0, r1
 8001190:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001192:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001194:	d3f6      	bcc.n	8001184 <CopyDataInit>
	ldr	r2, =_sbss
 8001196:	4a0a      	ldr	r2, [pc, #40]	; (80011c0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001198:	e002      	b.n	80011a0 <LoopFillZerobss>

0800119a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800119a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800119c:	f842 3b04 	str.w	r3, [r2], #4

080011a0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80011a0:	4b08      	ldr	r3, [pc, #32]	; (80011c4 <LoopForever+0x16>)
	cmp	r2, r3
 80011a2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80011a4:	d3f9      	bcc.n	800119a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80011a6:	f004 fb55 	bl	8005854 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011aa:	f7ff fa03 	bl	80005b4 <main>

080011ae <LoopForever>:

LoopForever:
    b LoopForever
 80011ae:	e7fe      	b.n	80011ae <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80011b0:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 80011b4:	08005944 	.word	0x08005944
	ldr	r0, =_sdata
 80011b8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80011bc:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 80011c0:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 80011c4:	2000044c 	.word	0x2000044c

080011c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011c8:	e7fe      	b.n	80011c8 <ADC1_2_IRQHandler>

080011ca <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b082      	sub	sp, #8
 80011ce:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011d0:	2300      	movs	r3, #0
 80011d2:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80011d4:	2004      	movs	r0, #4
 80011d6:	f001 f8df 	bl	8002398 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 80011da:	f7ff ff1f 	bl	800101c <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011de:	2000      	movs	r0, #0
 80011e0:	f000 f80e 	bl	8001200 <HAL_InitTick>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d002      	beq.n	80011f0 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	71fb      	strb	r3, [r7, #7]
 80011ee:	e001      	b.n	80011f4 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011f0:	f7ff fd4c 	bl	8000c8c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011f4:	79fb      	ldrb	r3, [r7, #7]
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
	...

08001200 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001208:	2300      	movs	r3, #0
 800120a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800120c:	4b17      	ldr	r3, [pc, #92]	; (800126c <HAL_InitTick+0x6c>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d023      	beq.n	800125c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001214:	4b16      	ldr	r3, [pc, #88]	; (8001270 <HAL_InitTick+0x70>)
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	4b14      	ldr	r3, [pc, #80]	; (800126c <HAL_InitTick+0x6c>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	4619      	mov	r1, r3
 800121e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001222:	fbb3 f3f1 	udiv	r3, r3, r1
 8001226:	fbb2 f3f3 	udiv	r3, r2, r3
 800122a:	4618      	mov	r0, r3
 800122c:	f001 f8e7 	bl	80023fe <HAL_SYSTICK_Config>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d10f      	bne.n	8001256 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2b07      	cmp	r3, #7
 800123a:	d809      	bhi.n	8001250 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800123c:	2200      	movs	r2, #0
 800123e:	6879      	ldr	r1, [r7, #4]
 8001240:	f04f 30ff 	mov.w	r0, #4294967295
 8001244:	f001 f8b3 	bl	80023ae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001248:	4a0a      	ldr	r2, [pc, #40]	; (8001274 <HAL_InitTick+0x74>)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6013      	str	r3, [r2, #0]
 800124e:	e007      	b.n	8001260 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001250:	2301      	movs	r3, #1
 8001252:	73fb      	strb	r3, [r7, #15]
 8001254:	e004      	b.n	8001260 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	73fb      	strb	r3, [r7, #15]
 800125a:	e001      	b.n	8001260 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800125c:	2301      	movs	r3, #1
 800125e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001260:	7bfb      	ldrb	r3, [r7, #15]
}
 8001262:	4618      	mov	r0, r3
 8001264:	3710      	adds	r7, #16
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	20000008 	.word	0x20000008
 8001270:	20000000 	.word	0x20000000
 8001274:	20000004 	.word	0x20000004

08001278 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800127c:	4b06      	ldr	r3, [pc, #24]	; (8001298 <HAL_IncTick+0x20>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	461a      	mov	r2, r3
 8001282:	4b06      	ldr	r3, [pc, #24]	; (800129c <HAL_IncTick+0x24>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4413      	add	r3, r2
 8001288:	4a04      	ldr	r2, [pc, #16]	; (800129c <HAL_IncTick+0x24>)
 800128a:	6013      	str	r3, [r2, #0]
}
 800128c:	bf00      	nop
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	20000008 	.word	0x20000008
 800129c:	20000448 	.word	0x20000448

080012a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  return uwTick;
 80012a4:	4b03      	ldr	r3, [pc, #12]	; (80012b4 <HAL_GetTick+0x14>)
 80012a6:	681b      	ldr	r3, [r3, #0]
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	20000448 	.word	0x20000448

080012b8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	431a      	orrs	r2, r3
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	609a      	str	r2, [r3, #8]
}
 80012d2:	bf00      	nop
 80012d4:	370c      	adds	r7, #12
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr

080012de <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80012de:	b480      	push	{r7}
 80012e0:	b083      	sub	sp, #12
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
 80012e6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	431a      	orrs	r2, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	609a      	str	r2, [r3, #8]
}
 80012f8:	bf00      	nop
 80012fa:	370c      	adds	r7, #12
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr

08001304 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001314:	4618      	mov	r0, r3
 8001316:	370c      	adds	r7, #12
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr

08001320 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001320:	b480      	push	{r7}
 8001322:	b087      	sub	sp, #28
 8001324:	af00      	add	r7, sp, #0
 8001326:	60f8      	str	r0, [r7, #12]
 8001328:	60b9      	str	r1, [r7, #8]
 800132a:	607a      	str	r2, [r7, #4]
 800132c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	3360      	adds	r3, #96	; 0x60
 8001332:	461a      	mov	r2, r3
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	4413      	add	r3, r2
 800133a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	4b08      	ldr	r3, [pc, #32]	; (8001364 <LL_ADC_SetOffset+0x44>)
 8001342:	4013      	ands	r3, r2
 8001344:	687a      	ldr	r2, [r7, #4]
 8001346:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800134a:	683a      	ldr	r2, [r7, #0]
 800134c:	430a      	orrs	r2, r1
 800134e:	4313      	orrs	r3, r2
 8001350:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001358:	bf00      	nop
 800135a:	371c      	adds	r7, #28
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr
 8001364:	03fff000 	.word	0x03fff000

08001368 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001368:	b480      	push	{r7}
 800136a:	b085      	sub	sp, #20
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	3360      	adds	r3, #96	; 0x60
 8001376:	461a      	mov	r2, r3
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	4413      	add	r3, r2
 800137e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001388:	4618      	mov	r0, r3
 800138a:	3714      	adds	r7, #20
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr

08001394 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001394:	b480      	push	{r7}
 8001396:	b087      	sub	sp, #28
 8001398:	af00      	add	r7, sp, #0
 800139a:	60f8      	str	r0, [r7, #12]
 800139c:	60b9      	str	r1, [r7, #8]
 800139e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	3360      	adds	r3, #96	; 0x60
 80013a4:	461a      	mov	r2, r3
 80013a6:	68bb      	ldr	r3, [r7, #8]
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	4413      	add	r3, r2
 80013ac:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	431a      	orrs	r2, r3
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80013be:	bf00      	nop
 80013c0:	371c      	adds	r7, #28
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr

080013ca <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80013ca:	b480      	push	{r7}
 80013cc:	b083      	sub	sp, #12
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	6078      	str	r0, [r7, #4]
 80013d2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	695b      	ldr	r3, [r3, #20]
 80013d8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	431a      	orrs	r2, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	615a      	str	r2, [r3, #20]
}
 80013e4:	bf00      	nop
 80013e6:	370c      	adds	r7, #12
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr

080013f0 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L5, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b087      	sub	sp, #28
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	60f8      	str	r0, [r7, #12]
 80013f8:	60b9      	str	r1, [r7, #8]
 80013fa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	3330      	adds	r3, #48	; 0x30
 8001400:	461a      	mov	r2, r3
 8001402:	68bb      	ldr	r3, [r7, #8]
 8001404:	0a1b      	lsrs	r3, r3, #8
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	f003 030c 	and.w	r3, r3, #12
 800140c:	4413      	add	r3, r2
 800140e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	f003 031f 	and.w	r3, r3, #31
 800141a:	211f      	movs	r1, #31
 800141c:	fa01 f303 	lsl.w	r3, r1, r3
 8001420:	43db      	mvns	r3, r3
 8001422:	401a      	ands	r2, r3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	0e9b      	lsrs	r3, r3, #26
 8001428:	f003 011f 	and.w	r1, r3, #31
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	f003 031f 	and.w	r3, r3, #31
 8001432:	fa01 f303 	lsl.w	r3, r1, r3
 8001436:	431a      	orrs	r2, r3
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800143c:	bf00      	nop
 800143e:	371c      	adds	r7, #28
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001448:	b480      	push	{r7}
 800144a:	b087      	sub	sp, #28
 800144c:	af00      	add	r7, sp, #0
 800144e:	60f8      	str	r0, [r7, #12]
 8001450:	60b9      	str	r1, [r7, #8]
 8001452:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	3314      	adds	r3, #20
 8001458:	461a      	mov	r2, r3
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	0e5b      	lsrs	r3, r3, #25
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	f003 0304 	and.w	r3, r3, #4
 8001464:	4413      	add	r3, r2
 8001466:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	0d1b      	lsrs	r3, r3, #20
 8001470:	f003 031f 	and.w	r3, r3, #31
 8001474:	2107      	movs	r1, #7
 8001476:	fa01 f303 	lsl.w	r3, r1, r3
 800147a:	43db      	mvns	r3, r3
 800147c:	401a      	ands	r2, r3
 800147e:	68bb      	ldr	r3, [r7, #8]
 8001480:	0d1b      	lsrs	r3, r3, #20
 8001482:	f003 031f 	and.w	r3, r3, #31
 8001486:	6879      	ldr	r1, [r7, #4]
 8001488:	fa01 f303 	lsl.w	r3, r1, r3
 800148c:	431a      	orrs	r2, r3
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001492:	bf00      	nop
 8001494:	371c      	adds	r7, #28
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
	...

080014a0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b085      	sub	sp, #20
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	60f8      	str	r0, [r7, #12]
 80014a8:	60b9      	str	r1, [r7, #8]
 80014aa:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80014b2:	68bb      	ldr	r3, [r7, #8]
 80014b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014b8:	43db      	mvns	r3, r3
 80014ba:	401a      	ands	r2, r3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	f003 0318 	and.w	r3, r3, #24
 80014c2:	4908      	ldr	r1, [pc, #32]	; (80014e4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80014c4:	40d9      	lsrs	r1, r3
 80014c6:	68bb      	ldr	r3, [r7, #8]
 80014c8:	400b      	ands	r3, r1
 80014ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014ce:	431a      	orrs	r2, r3
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80014d6:	bf00      	nop
 80014d8:	3714      	adds	r7, #20
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	0007ffff 	.word	0x0007ffff

080014e8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80014f8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80014fc:	687a      	ldr	r2, [r7, #4]
 80014fe:	6093      	str	r3, [r2, #8]
}
 8001500:	bf00      	nop
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr

0800150c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800151c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001520:	d101      	bne.n	8001526 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001522:	2301      	movs	r3, #1
 8001524:	e000      	b.n	8001528 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001526:	2300      	movs	r3, #0
}
 8001528:	4618      	mov	r0, r3
 800152a:	370c      	adds	r7, #12
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr

08001534 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001544:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001548:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001550:	bf00      	nop
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr

0800155c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800156c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001570:	d101      	bne.n	8001576 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001572:	2301      	movs	r3, #1
 8001574:	e000      	b.n	8001578 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001576:	2300      	movs	r3, #0
}
 8001578:	4618      	mov	r0, r3
 800157a:	370c      	adds	r7, #12
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr

08001584 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	f003 0301 	and.w	r3, r3, #1
 8001594:	2b01      	cmp	r3, #1
 8001596:	d101      	bne.n	800159c <LL_ADC_IsEnabled+0x18>
 8001598:	2301      	movs	r3, #1
 800159a:	e000      	b.n	800159e <LL_ADC_IsEnabled+0x1a>
 800159c:	2300      	movs	r3, #0
}
 800159e:	4618      	mov	r0, r3
 80015a0:	370c      	adds	r7, #12
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr

080015aa <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80015aa:	b480      	push	{r7}
 80015ac:	b083      	sub	sp, #12
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	f003 0304 	and.w	r3, r3, #4
 80015ba:	2b04      	cmp	r3, #4
 80015bc:	d101      	bne.n	80015c2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80015be:	2301      	movs	r3, #1
 80015c0:	e000      	b.n	80015c4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80015c2:	2300      	movs	r3, #0
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	370c      	adds	r7, #12
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr

080015d0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	f003 0308 	and.w	r3, r3, #8
 80015e0:	2b08      	cmp	r3, #8
 80015e2:	d101      	bne.n	80015e8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80015e4:	2301      	movs	r3, #1
 80015e6:	e000      	b.n	80015ea <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80015e8:	2300      	movs	r3, #0
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
	...

080015f8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80015f8:	b590      	push	{r4, r7, lr}
 80015fa:	b089      	sub	sp, #36	; 0x24
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001600:	2300      	movs	r3, #0
 8001602:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001604:	2300      	movs	r3, #0
 8001606:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d101      	bne.n	8001612 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e12e      	b.n	8001870 <HAL_ADC_Init+0x278>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	691b      	ldr	r3, [r3, #16]
 8001616:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800161c:	2b00      	cmp	r3, #0
 800161e:	d109      	bne.n	8001634 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f7ff fb57 	bl	8000cd4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2200      	movs	r2, #0
 800162a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2200      	movs	r2, #0
 8001630:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4618      	mov	r0, r3
 800163a:	f7ff ff67 	bl	800150c <LL_ADC_IsDeepPowerDownEnabled>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d004      	beq.n	800164e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4618      	mov	r0, r3
 800164a:	f7ff ff4d 	bl	80014e8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4618      	mov	r0, r3
 8001654:	f7ff ff82 	bl	800155c <LL_ADC_IsInternalRegulatorEnabled>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d115      	bne.n	800168a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4618      	mov	r0, r3
 8001664:	f7ff ff66 	bl	8001534 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001668:	4b83      	ldr	r3, [pc, #524]	; (8001878 <HAL_ADC_Init+0x280>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	099b      	lsrs	r3, r3, #6
 800166e:	4a83      	ldr	r2, [pc, #524]	; (800187c <HAL_ADC_Init+0x284>)
 8001670:	fba2 2303 	umull	r2, r3, r2, r3
 8001674:	099b      	lsrs	r3, r3, #6
 8001676:	3301      	adds	r3, #1
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800167c:	e002      	b.n	8001684 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	3b01      	subs	r3, #1
 8001682:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d1f9      	bne.n	800167e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4618      	mov	r0, r3
 8001690:	f7ff ff64 	bl	800155c <LL_ADC_IsInternalRegulatorEnabled>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d10d      	bne.n	80016b6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800169e:	f043 0210 	orr.w	r2, r3, #16
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016aa:	f043 0201 	orr.w	r2, r3, #1
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7ff ff75 	bl	80015aa <LL_ADC_REG_IsConversionOngoing>
 80016c0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016c6:	f003 0310 	and.w	r3, r3, #16
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	f040 80c7 	bne.w	800185e <HAL_ADC_Init+0x266>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	f040 80c3 	bne.w	800185e <HAL_ADC_Init+0x266>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016dc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80016e0:	f043 0202 	orr.w	r2, r3, #2
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7ff ff49 	bl	8001584 <LL_ADC_IsEnabled>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d110      	bne.n	800171a <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80016f8:	4861      	ldr	r0, [pc, #388]	; (8001880 <HAL_ADC_Init+0x288>)
 80016fa:	f7ff ff43 	bl	8001584 <LL_ADC_IsEnabled>
 80016fe:	4604      	mov	r4, r0
 8001700:	4860      	ldr	r0, [pc, #384]	; (8001884 <HAL_ADC_Init+0x28c>)
 8001702:	f7ff ff3f 	bl	8001584 <LL_ADC_IsEnabled>
 8001706:	4603      	mov	r3, r0
 8001708:	4323      	orrs	r3, r4
 800170a:	2b00      	cmp	r3, #0
 800170c:	d105      	bne.n	800171a <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	4619      	mov	r1, r3
 8001714:	485c      	ldr	r0, [pc, #368]	; (8001888 <HAL_ADC_Init+0x290>)
 8001716:	f7ff fdcf 	bl	80012b8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	7e5b      	ldrb	r3, [r3, #25]
 800171e:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001724:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800172a:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001730:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001738:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800173a:	4313      	orrs	r3, r2
 800173c:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001744:	2b01      	cmp	r3, #1
 8001746:	d106      	bne.n	8001756 <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800174c:	3b01      	subs	r3, #1
 800174e:	045b      	lsls	r3, r3, #17
 8001750:	69ba      	ldr	r2, [r7, #24]
 8001752:	4313      	orrs	r3, r2
 8001754:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800175a:	2b00      	cmp	r3, #0
 800175c:	d009      	beq.n	8001772 <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001762:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800176a:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800176c:	69ba      	ldr	r2, [r7, #24]
 800176e:	4313      	orrs	r3, r2
 8001770:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	68da      	ldr	r2, [r3, #12]
 8001778:	4b44      	ldr	r3, [pc, #272]	; (800188c <HAL_ADC_Init+0x294>)
 800177a:	4013      	ands	r3, r2
 800177c:	687a      	ldr	r2, [r7, #4]
 800177e:	6812      	ldr	r2, [r2, #0]
 8001780:	69b9      	ldr	r1, [r7, #24]
 8001782:	430b      	orrs	r3, r1
 8001784:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4618      	mov	r0, r3
 800178c:	f7ff ff20 	bl	80015d0 <LL_ADC_INJ_IsConversionOngoing>
 8001790:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d140      	bne.n	800181a <HAL_ADC_Init+0x222>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d13d      	bne.n	800181a <HAL_ADC_Init+0x222>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	7e1b      	ldrb	r3, [r3, #24]
 80017a6:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80017a8:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80017b0:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80017b2:	4313      	orrs	r3, r2
 80017b4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80017c0:	f023 0306 	bic.w	r3, r3, #6
 80017c4:	687a      	ldr	r2, [r7, #4]
 80017c6:	6812      	ldr	r2, [r2, #0]
 80017c8:	69b9      	ldr	r1, [r7, #24]
 80017ca:	430b      	orrs	r3, r1
 80017cc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d118      	bne.n	800180a <HAL_ADC_Init+0x212>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	691b      	ldr	r3, [r3, #16]
 80017de:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80017e2:	f023 0304 	bic.w	r3, r3, #4
 80017e6:	687a      	ldr	r2, [r7, #4]
 80017e8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80017ee:	4311      	orrs	r1, r2
 80017f0:	687a      	ldr	r2, [r7, #4]
 80017f2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80017f4:	4311      	orrs	r1, r2
 80017f6:	687a      	ldr	r2, [r7, #4]
 80017f8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80017fa:	430a      	orrs	r2, r1
 80017fc:	431a      	orrs	r2, r3
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f042 0201 	orr.w	r2, r2, #1
 8001806:	611a      	str	r2, [r3, #16]
 8001808:	e007      	b.n	800181a <HAL_ADC_Init+0x222>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	691a      	ldr	r2, [r3, #16]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f022 0201 	bic.w	r2, r2, #1
 8001818:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	691b      	ldr	r3, [r3, #16]
 800181e:	2b01      	cmp	r3, #1
 8001820:	d10c      	bne.n	800183c <HAL_ADC_Init+0x244>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001828:	f023 010f 	bic.w	r1, r3, #15
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	69db      	ldr	r3, [r3, #28]
 8001830:	1e5a      	subs	r2, r3, #1
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	430a      	orrs	r2, r1
 8001838:	631a      	str	r2, [r3, #48]	; 0x30
 800183a:	e007      	b.n	800184c <HAL_ADC_Init+0x254>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f022 020f 	bic.w	r2, r2, #15
 800184a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001850:	f023 0303 	bic.w	r3, r3, #3
 8001854:	f043 0201 	orr.w	r2, r3, #1
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	659a      	str	r2, [r3, #88]	; 0x58
 800185c:	e007      	b.n	800186e <HAL_ADC_Init+0x276>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001862:	f043 0210 	orr.w	r2, r3, #16
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800186e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001870:	4618      	mov	r0, r3
 8001872:	3724      	adds	r7, #36	; 0x24
 8001874:	46bd      	mov	sp, r7
 8001876:	bd90      	pop	{r4, r7, pc}
 8001878:	20000000 	.word	0x20000000
 800187c:	053e2d63 	.word	0x053e2d63
 8001880:	42028000 	.word	0x42028000
 8001884:	42028100 	.word	0x42028100
 8001888:	42028300 	.word	0x42028300
 800188c:	fff0c007 	.word	0xfff0c007

08001890 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001890:	b590      	push	{r4, r7, lr}
 8001892:	b0b7      	sub	sp, #220	; 0xdc
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800189a:	2300      	movs	r3, #0
 800189c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80018a0:	2300      	movs	r3, #0
 80018a2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d101      	bne.n	80018b2 <HAL_ADC_ConfigChannel+0x22>
 80018ae:	2302      	movs	r3, #2
 80018b0:	e3c1      	b.n	8002036 <HAL_ADC_ConfigChannel+0x7a6>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2201      	movs	r2, #1
 80018b6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4618      	mov	r0, r3
 80018c0:	f7ff fe73 	bl	80015aa <LL_ADC_REG_IsConversionOngoing>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	f040 83a6 	bne.w	8002018 <HAL_ADC_ConfigChannel+0x788>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6818      	ldr	r0, [r3, #0]
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	6859      	ldr	r1, [r3, #4]
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	461a      	mov	r2, r3
 80018da:	f7ff fd89 	bl	80013f0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7ff fe61 	bl	80015aa <LL_ADC_REG_IsConversionOngoing>
 80018e8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7ff fe6d 	bl	80015d0 <LL_ADC_INJ_IsConversionOngoing>
 80018f6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80018fa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	f040 81c1 	bne.w	8001c86 <HAL_ADC_ConfigChannel+0x3f6>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001904:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001908:	2b00      	cmp	r3, #0
 800190a:	f040 81bc 	bne.w	8001c86 <HAL_ADC_ConfigChannel+0x3f6>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001916:	d10f      	bne.n	8001938 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6818      	ldr	r0, [r3, #0]
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2200      	movs	r2, #0
 8001922:	4619      	mov	r1, r3
 8001924:	f7ff fd90 	bl	8001448 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001930:	4618      	mov	r0, r3
 8001932:	f7ff fd4a 	bl	80013ca <LL_ADC_SetSamplingTimeCommonConfig>
 8001936:	e00e      	b.n	8001956 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6818      	ldr	r0, [r3, #0]
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	6819      	ldr	r1, [r3, #0]
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	461a      	mov	r2, r3
 8001946:	f7ff fd7f 	bl	8001448 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	2100      	movs	r1, #0
 8001950:	4618      	mov	r0, r3
 8001952:	f7ff fd3a 	bl	80013ca <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	695a      	ldr	r2, [r3, #20]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	08db      	lsrs	r3, r3, #3
 8001962:	f003 0303 	and.w	r3, r3, #3
 8001966:	005b      	lsls	r3, r3, #1
 8001968:	fa02 f303 	lsl.w	r3, r2, r3
 800196c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	691b      	ldr	r3, [r3, #16]
 8001974:	2b04      	cmp	r3, #4
 8001976:	d00a      	beq.n	800198e <HAL_ADC_ConfigChannel+0xfe>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6818      	ldr	r0, [r3, #0]
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	6919      	ldr	r1, [r3, #16]
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001988:	f7ff fcca 	bl	8001320 <LL_ADC_SetOffset>
 800198c:	e17b      	b.n	8001c86 <HAL_ADC_ConfigChannel+0x3f6>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	2100      	movs	r1, #0
 8001994:	4618      	mov	r0, r3
 8001996:	f7ff fce7 	bl	8001368 <LL_ADC_GetOffsetChannel>
 800199a:	4603      	mov	r3, r0
 800199c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d10a      	bne.n	80019ba <HAL_ADC_ConfigChannel+0x12a>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	2100      	movs	r1, #0
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7ff fcdc 	bl	8001368 <LL_ADC_GetOffsetChannel>
 80019b0:	4603      	mov	r3, r0
 80019b2:	0e9b      	lsrs	r3, r3, #26
 80019b4:	f003 021f 	and.w	r2, r3, #31
 80019b8:	e01e      	b.n	80019f8 <HAL_ADC_ConfigChannel+0x168>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	2100      	movs	r1, #0
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7ff fcd1 	bl	8001368 <LL_ADC_GetOffsetChannel>
 80019c6:	4603      	mov	r3, r0
 80019c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019cc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80019d0:	fa93 f3a3 	rbit	r3, r3
 80019d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80019d8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80019dc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80019e0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d101      	bne.n	80019ec <HAL_ADC_ConfigChannel+0x15c>
  {
    return 32U;
 80019e8:	2320      	movs	r3, #32
 80019ea:	e004      	b.n	80019f6 <HAL_ADC_ConfigChannel+0x166>
  }
  return __builtin_clz(value);
 80019ec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80019f0:	fab3 f383 	clz	r3, r3
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d105      	bne.n	8001a10 <HAL_ADC_ConfigChannel+0x180>
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	0e9b      	lsrs	r3, r3, #26
 8001a0a:	f003 031f 	and.w	r3, r3, #31
 8001a0e:	e018      	b.n	8001a42 <HAL_ADC_ConfigChannel+0x1b2>
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a18:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001a1c:	fa93 f3a3 	rbit	r3, r3
 8001a20:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001a24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001a28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001a2c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d101      	bne.n	8001a38 <HAL_ADC_ConfigChannel+0x1a8>
    return 32U;
 8001a34:	2320      	movs	r3, #32
 8001a36:	e004      	b.n	8001a42 <HAL_ADC_ConfigChannel+0x1b2>
  return __builtin_clz(value);
 8001a38:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001a3c:	fab3 f383 	clz	r3, r3
 8001a40:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d106      	bne.n	8001a54 <HAL_ADC_ConfigChannel+0x1c4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f7ff fca0 	bl	8001394 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	2101      	movs	r1, #1
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7ff fc84 	bl	8001368 <LL_ADC_GetOffsetChannel>
 8001a60:	4603      	mov	r3, r0
 8001a62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d10a      	bne.n	8001a80 <HAL_ADC_ConfigChannel+0x1f0>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	2101      	movs	r1, #1
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7ff fc79 	bl	8001368 <LL_ADC_GetOffsetChannel>
 8001a76:	4603      	mov	r3, r0
 8001a78:	0e9b      	lsrs	r3, r3, #26
 8001a7a:	f003 021f 	and.w	r2, r3, #31
 8001a7e:	e01e      	b.n	8001abe <HAL_ADC_ConfigChannel+0x22e>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	2101      	movs	r1, #1
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7ff fc6e 	bl	8001368 <LL_ADC_GetOffsetChannel>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a92:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001a96:	fa93 f3a3 	rbit	r3, r3
 8001a9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001a9e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001aa2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001aa6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d101      	bne.n	8001ab2 <HAL_ADC_ConfigChannel+0x222>
    return 32U;
 8001aae:	2320      	movs	r3, #32
 8001ab0:	e004      	b.n	8001abc <HAL_ADC_ConfigChannel+0x22c>
  return __builtin_clz(value);
 8001ab2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001ab6:	fab3 f383 	clz	r3, r3
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d105      	bne.n	8001ad6 <HAL_ADC_ConfigChannel+0x246>
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	0e9b      	lsrs	r3, r3, #26
 8001ad0:	f003 031f 	and.w	r3, r3, #31
 8001ad4:	e018      	b.n	8001b08 <HAL_ADC_ConfigChannel+0x278>
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ade:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001ae2:	fa93 f3a3 	rbit	r3, r3
 8001ae6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001aea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001aee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001af2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d101      	bne.n	8001afe <HAL_ADC_ConfigChannel+0x26e>
    return 32U;
 8001afa:	2320      	movs	r3, #32
 8001afc:	e004      	b.n	8001b08 <HAL_ADC_ConfigChannel+0x278>
  return __builtin_clz(value);
 8001afe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b02:	fab3 f383 	clz	r3, r3
 8001b06:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d106      	bne.n	8001b1a <HAL_ADC_ConfigChannel+0x28a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2200      	movs	r2, #0
 8001b12:	2101      	movs	r1, #1
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7ff fc3d 	bl	8001394 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	2102      	movs	r1, #2
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7ff fc21 	bl	8001368 <LL_ADC_GetOffsetChannel>
 8001b26:	4603      	mov	r3, r0
 8001b28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d10a      	bne.n	8001b46 <HAL_ADC_ConfigChannel+0x2b6>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2102      	movs	r1, #2
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7ff fc16 	bl	8001368 <LL_ADC_GetOffsetChannel>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	0e9b      	lsrs	r3, r3, #26
 8001b40:	f003 021f 	and.w	r2, r3, #31
 8001b44:	e01e      	b.n	8001b84 <HAL_ADC_ConfigChannel+0x2f4>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	2102      	movs	r1, #2
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7ff fc0b 	bl	8001368 <LL_ADC_GetOffsetChannel>
 8001b52:	4603      	mov	r3, r0
 8001b54:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b58:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001b5c:	fa93 f3a3 	rbit	r3, r3
 8001b60:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001b64:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001b68:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001b6c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d101      	bne.n	8001b78 <HAL_ADC_ConfigChannel+0x2e8>
    return 32U;
 8001b74:	2320      	movs	r3, #32
 8001b76:	e004      	b.n	8001b82 <HAL_ADC_ConfigChannel+0x2f2>
  return __builtin_clz(value);
 8001b78:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001b7c:	fab3 f383 	clz	r3, r3
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d105      	bne.n	8001b9c <HAL_ADC_ConfigChannel+0x30c>
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	0e9b      	lsrs	r3, r3, #26
 8001b96:	f003 031f 	and.w	r3, r3, #31
 8001b9a:	e016      	b.n	8001bca <HAL_ADC_ConfigChannel+0x33a>
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001ba8:	fa93 f3a3 	rbit	r3, r3
 8001bac:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001bae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001bb0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001bb4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d101      	bne.n	8001bc0 <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 8001bbc:	2320      	movs	r3, #32
 8001bbe:	e004      	b.n	8001bca <HAL_ADC_ConfigChannel+0x33a>
  return __builtin_clz(value);
 8001bc0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001bc4:	fab3 f383 	clz	r3, r3
 8001bc8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d106      	bne.n	8001bdc <HAL_ADC_ConfigChannel+0x34c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	2102      	movs	r1, #2
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7ff fbdc 	bl	8001394 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2103      	movs	r1, #3
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7ff fbc0 	bl	8001368 <LL_ADC_GetOffsetChannel>
 8001be8:	4603      	mov	r3, r0
 8001bea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d10a      	bne.n	8001c08 <HAL_ADC_ConfigChannel+0x378>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	2103      	movs	r1, #3
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7ff fbb5 	bl	8001368 <LL_ADC_GetOffsetChannel>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	0e9b      	lsrs	r3, r3, #26
 8001c02:	f003 021f 	and.w	r2, r3, #31
 8001c06:	e017      	b.n	8001c38 <HAL_ADC_ConfigChannel+0x3a8>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	2103      	movs	r1, #3
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7ff fbaa 	bl	8001368 <LL_ADC_GetOffsetChannel>
 8001c14:	4603      	mov	r3, r0
 8001c16:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c1a:	fa93 f3a3 	rbit	r3, r3
 8001c1e:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001c20:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c22:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001c24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d101      	bne.n	8001c2e <HAL_ADC_ConfigChannel+0x39e>
    return 32U;
 8001c2a:	2320      	movs	r3, #32
 8001c2c:	e003      	b.n	8001c36 <HAL_ADC_ConfigChannel+0x3a6>
  return __builtin_clz(value);
 8001c2e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001c30:	fab3 f383 	clz	r3, r3
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d105      	bne.n	8001c50 <HAL_ADC_ConfigChannel+0x3c0>
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	0e9b      	lsrs	r3, r3, #26
 8001c4a:	f003 031f 	and.w	r3, r3, #31
 8001c4e:	e011      	b.n	8001c74 <HAL_ADC_ConfigChannel+0x3e4>
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c56:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c58:	fa93 f3a3 	rbit	r3, r3
 8001c5c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001c5e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001c60:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001c62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d101      	bne.n	8001c6c <HAL_ADC_ConfigChannel+0x3dc>
    return 32U;
 8001c68:	2320      	movs	r3, #32
 8001c6a:	e003      	b.n	8001c74 <HAL_ADC_ConfigChannel+0x3e4>
  return __builtin_clz(value);
 8001c6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c6e:	fab3 f383 	clz	r3, r3
 8001c72:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d106      	bne.n	8001c86 <HAL_ADC_ConfigChannel+0x3f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	2103      	movs	r1, #3
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7ff fb87 	bl	8001394 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7ff fc7a 	bl	8001584 <LL_ADC_IsEnabled>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	f040 81c9 	bne.w	800202a <HAL_ADC_ConfigChannel+0x79a>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6818      	ldr	r0, [r3, #0]
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	6819      	ldr	r1, [r3, #0]
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	f7ff fbfb 	bl	80014a0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	68db      	ldr	r3, [r3, #12]
 8001cae:	4a8f      	ldr	r2, [pc, #572]	; (8001eec <HAL_ADC_ConfigChannel+0x65c>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	f040 8131 	bne.w	8001f18 <HAL_ADC_ConfigChannel+0x688>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d10b      	bne.n	8001cde <HAL_ADC_ConfigChannel+0x44e>
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	0e9b      	lsrs	r3, r3, #26
 8001ccc:	3301      	adds	r3, #1
 8001cce:	f003 031f 	and.w	r3, r3, #31
 8001cd2:	2b09      	cmp	r3, #9
 8001cd4:	bf94      	ite	ls
 8001cd6:	2301      	movls	r3, #1
 8001cd8:	2300      	movhi	r3, #0
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	e019      	b.n	8001d12 <HAL_ADC_ConfigChannel+0x482>
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ce6:	fa93 f3a3 	rbit	r3, r3
 8001cea:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001cec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001cee:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001cf0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d101      	bne.n	8001cfa <HAL_ADC_ConfigChannel+0x46a>
    return 32U;
 8001cf6:	2320      	movs	r3, #32
 8001cf8:	e003      	b.n	8001d02 <HAL_ADC_ConfigChannel+0x472>
  return __builtin_clz(value);
 8001cfa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001cfc:	fab3 f383 	clz	r3, r3
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	3301      	adds	r3, #1
 8001d04:	f003 031f 	and.w	r3, r3, #31
 8001d08:	2b09      	cmp	r3, #9
 8001d0a:	bf94      	ite	ls
 8001d0c:	2301      	movls	r3, #1
 8001d0e:	2300      	movhi	r3, #0
 8001d10:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d079      	beq.n	8001e0a <HAL_ADC_ConfigChannel+0x57a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d107      	bne.n	8001d32 <HAL_ADC_ConfigChannel+0x4a2>
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	0e9b      	lsrs	r3, r3, #26
 8001d28:	3301      	adds	r3, #1
 8001d2a:	069b      	lsls	r3, r3, #26
 8001d2c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d30:	e015      	b.n	8001d5e <HAL_ADC_ConfigChannel+0x4ce>
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d3a:	fa93 f3a3 	rbit	r3, r3
 8001d3e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001d40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d42:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001d44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d101      	bne.n	8001d4e <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8001d4a:	2320      	movs	r3, #32
 8001d4c:	e003      	b.n	8001d56 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8001d4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d50:	fab3 f383 	clz	r3, r3
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	3301      	adds	r3, #1
 8001d58:	069b      	lsls	r3, r3, #26
 8001d5a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d109      	bne.n	8001d7e <HAL_ADC_ConfigChannel+0x4ee>
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	0e9b      	lsrs	r3, r3, #26
 8001d70:	3301      	adds	r3, #1
 8001d72:	f003 031f 	and.w	r3, r3, #31
 8001d76:	2101      	movs	r1, #1
 8001d78:	fa01 f303 	lsl.w	r3, r1, r3
 8001d7c:	e017      	b.n	8001dae <HAL_ADC_ConfigChannel+0x51e>
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d86:	fa93 f3a3 	rbit	r3, r3
 8001d8a:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001d8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d8e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001d90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d101      	bne.n	8001d9a <HAL_ADC_ConfigChannel+0x50a>
    return 32U;
 8001d96:	2320      	movs	r3, #32
 8001d98:	e003      	b.n	8001da2 <HAL_ADC_ConfigChannel+0x512>
  return __builtin_clz(value);
 8001d9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d9c:	fab3 f383 	clz	r3, r3
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	3301      	adds	r3, #1
 8001da4:	f003 031f 	and.w	r3, r3, #31
 8001da8:	2101      	movs	r1, #1
 8001daa:	fa01 f303 	lsl.w	r3, r1, r3
 8001dae:	ea42 0103 	orr.w	r1, r2, r3
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d10a      	bne.n	8001dd4 <HAL_ADC_ConfigChannel+0x544>
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	0e9b      	lsrs	r3, r3, #26
 8001dc4:	3301      	adds	r3, #1
 8001dc6:	f003 021f 	and.w	r2, r3, #31
 8001dca:	4613      	mov	r3, r2
 8001dcc:	005b      	lsls	r3, r3, #1
 8001dce:	4413      	add	r3, r2
 8001dd0:	051b      	lsls	r3, r3, #20
 8001dd2:	e018      	b.n	8001e06 <HAL_ADC_ConfigChannel+0x576>
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ddc:	fa93 f3a3 	rbit	r3, r3
 8001de0:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001de2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001de4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001de6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d101      	bne.n	8001df0 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8001dec:	2320      	movs	r3, #32
 8001dee:	e003      	b.n	8001df8 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8001df0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001df2:	fab3 f383 	clz	r3, r3
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	3301      	adds	r3, #1
 8001dfa:	f003 021f 	and.w	r2, r3, #31
 8001dfe:	4613      	mov	r3, r2
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	4413      	add	r3, r2
 8001e04:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e06:	430b      	orrs	r3, r1
 8001e08:	e081      	b.n	8001f0e <HAL_ADC_ConfigChannel+0x67e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d107      	bne.n	8001e26 <HAL_ADC_ConfigChannel+0x596>
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	0e9b      	lsrs	r3, r3, #26
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	069b      	lsls	r3, r3, #26
 8001e20:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e24:	e015      	b.n	8001e52 <HAL_ADC_ConfigChannel+0x5c2>
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e2e:	fa93 f3a3 	rbit	r3, r3
 8001e32:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e36:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d101      	bne.n	8001e42 <HAL_ADC_ConfigChannel+0x5b2>
    return 32U;
 8001e3e:	2320      	movs	r3, #32
 8001e40:	e003      	b.n	8001e4a <HAL_ADC_ConfigChannel+0x5ba>
  return __builtin_clz(value);
 8001e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e44:	fab3 f383 	clz	r3, r3
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	069b      	lsls	r3, r3, #26
 8001e4e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d109      	bne.n	8001e72 <HAL_ADC_ConfigChannel+0x5e2>
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	0e9b      	lsrs	r3, r3, #26
 8001e64:	3301      	adds	r3, #1
 8001e66:	f003 031f 	and.w	r3, r3, #31
 8001e6a:	2101      	movs	r1, #1
 8001e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e70:	e017      	b.n	8001ea2 <HAL_ADC_ConfigChannel+0x612>
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e78:	6a3b      	ldr	r3, [r7, #32]
 8001e7a:	fa93 f3a3 	rbit	r3, r3
 8001e7e:	61fb      	str	r3, [r7, #28]
  return result;
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d101      	bne.n	8001e8e <HAL_ADC_ConfigChannel+0x5fe>
    return 32U;
 8001e8a:	2320      	movs	r3, #32
 8001e8c:	e003      	b.n	8001e96 <HAL_ADC_ConfigChannel+0x606>
  return __builtin_clz(value);
 8001e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e90:	fab3 f383 	clz	r3, r3
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	3301      	adds	r3, #1
 8001e98:	f003 031f 	and.w	r3, r3, #31
 8001e9c:	2101      	movs	r1, #1
 8001e9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea2:	ea42 0103 	orr.w	r1, r2, r3
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d10d      	bne.n	8001ece <HAL_ADC_ConfigChannel+0x63e>
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	0e9b      	lsrs	r3, r3, #26
 8001eb8:	3301      	adds	r3, #1
 8001eba:	f003 021f 	and.w	r2, r3, #31
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	4413      	add	r3, r2
 8001ec4:	3b1e      	subs	r3, #30
 8001ec6:	051b      	lsls	r3, r3, #20
 8001ec8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ecc:	e01e      	b.n	8001f0c <HAL_ADC_ConfigChannel+0x67c>
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	fa93 f3a3 	rbit	r3, r3
 8001eda:	613b      	str	r3, [r7, #16]
  return result;
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001ee0:	69bb      	ldr	r3, [r7, #24]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d104      	bne.n	8001ef0 <HAL_ADC_ConfigChannel+0x660>
    return 32U;
 8001ee6:	2320      	movs	r3, #32
 8001ee8:	e006      	b.n	8001ef8 <HAL_ADC_ConfigChannel+0x668>
 8001eea:	bf00      	nop
 8001eec:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001ef0:	69bb      	ldr	r3, [r7, #24]
 8001ef2:	fab3 f383 	clz	r3, r3
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	3301      	adds	r3, #1
 8001efa:	f003 021f 	and.w	r2, r3, #31
 8001efe:	4613      	mov	r3, r2
 8001f00:	005b      	lsls	r3, r3, #1
 8001f02:	4413      	add	r3, r2
 8001f04:	3b1e      	subs	r3, #30
 8001f06:	051b      	lsls	r3, r3, #20
 8001f08:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f0c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001f0e:	683a      	ldr	r2, [r7, #0]
 8001f10:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f12:	4619      	mov	r1, r3
 8001f14:	f7ff fa98 	bl	8001448 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	4b48      	ldr	r3, [pc, #288]	; (8002040 <HAL_ADC_ConfigChannel+0x7b0>)
 8001f1e:	4013      	ands	r3, r2
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	f000 8082 	beq.w	800202a <HAL_ADC_ConfigChannel+0x79a>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f26:	4847      	ldr	r0, [pc, #284]	; (8002044 <HAL_ADC_ConfigChannel+0x7b4>)
 8001f28:	f7ff f9ec 	bl	8001304 <LL_ADC_GetCommonPathInternalCh>
 8001f2c:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001f30:	4845      	ldr	r0, [pc, #276]	; (8002048 <HAL_ADC_ConfigChannel+0x7b8>)
 8001f32:	f7ff fb27 	bl	8001584 <LL_ADC_IsEnabled>
 8001f36:	4604      	mov	r4, r0
 8001f38:	4844      	ldr	r0, [pc, #272]	; (800204c <HAL_ADC_ConfigChannel+0x7bc>)
 8001f3a:	f7ff fb23 	bl	8001584 <LL_ADC_IsEnabled>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	4323      	orrs	r3, r4
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d15e      	bne.n	8002004 <HAL_ADC_ConfigChannel+0x774>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a41      	ldr	r2, [pc, #260]	; (8002050 <HAL_ADC_ConfigChannel+0x7c0>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d127      	bne.n	8001fa0 <HAL_ADC_ConfigChannel+0x710>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001f50:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f54:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d121      	bne.n	8001fa0 <HAL_ADC_ConfigChannel+0x710>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a39      	ldr	r2, [pc, #228]	; (8002048 <HAL_ADC_ConfigChannel+0x7b8>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d161      	bne.n	800202a <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f66:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f6a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001f6e:	4619      	mov	r1, r3
 8001f70:	4834      	ldr	r0, [pc, #208]	; (8002044 <HAL_ADC_ConfigChannel+0x7b4>)
 8001f72:	f7ff f9b4 	bl	80012de <LL_ADC_SetCommonPathInternalCh>
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                                 * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f76:	4b37      	ldr	r3, [pc, #220]	; (8002054 <HAL_ADC_ConfigChannel+0x7c4>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	099b      	lsrs	r3, r3, #6
 8001f7c:	4a36      	ldr	r2, [pc, #216]	; (8002058 <HAL_ADC_ConfigChannel+0x7c8>)
 8001f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f82:	099b      	lsrs	r3, r3, #6
 8001f84:	1c5a      	adds	r2, r3, #1
 8001f86:	4613      	mov	r3, r2
 8001f88:	005b      	lsls	r3, r3, #1
 8001f8a:	4413      	add	r3, r2
 8001f8c:	009b      	lsls	r3, r3, #2
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 8001f8e:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8001f90:	e002      	b.n	8001f98 <HAL_ADC_ConfigChannel+0x708>
              {
                wait_loop_index--;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	3b01      	subs	r3, #1
 8001f96:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d1f9      	bne.n	8001f92 <HAL_ADC_ConfigChannel+0x702>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f9e:	e044      	b.n	800202a <HAL_ADC_ConfigChannel+0x79a>
              }
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a2d      	ldr	r2, [pc, #180]	; (800205c <HAL_ADC_ConfigChannel+0x7cc>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d113      	bne.n	8001fd2 <HAL_ADC_ConfigChannel+0x742>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001faa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001fae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d10d      	bne.n	8001fd2 <HAL_ADC_ConfigChannel+0x742>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a23      	ldr	r2, [pc, #140]	; (8002048 <HAL_ADC_ConfigChannel+0x7b8>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d134      	bne.n	800202a <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001fc0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001fc4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fc8:	4619      	mov	r1, r3
 8001fca:	481e      	ldr	r0, [pc, #120]	; (8002044 <HAL_ADC_ConfigChannel+0x7b4>)
 8001fcc:	f7ff f987 	bl	80012de <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001fd0:	e02b      	b.n	800202a <HAL_ADC_ConfigChannel+0x79a>
                                             LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a22      	ldr	r2, [pc, #136]	; (8002060 <HAL_ADC_ConfigChannel+0x7d0>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d126      	bne.n	800202a <HAL_ADC_ConfigChannel+0x79a>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001fdc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001fe0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d120      	bne.n	800202a <HAL_ADC_ConfigChannel+0x79a>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a16      	ldr	r2, [pc, #88]	; (8002048 <HAL_ADC_ConfigChannel+0x7b8>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d11b      	bne.n	800202a <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ff2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001ff6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	4811      	ldr	r0, [pc, #68]	; (8002044 <HAL_ADC_ConfigChannel+0x7b4>)
 8001ffe:	f7ff f96e 	bl	80012de <LL_ADC_SetCommonPathInternalCh>
 8002002:	e012      	b.n	800202a <HAL_ADC_ConfigChannel+0x79a>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002008:	f043 0220 	orr.w	r2, r3, #32
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	659a      	str	r2, [r3, #88]	; 0x58

          tmp_hal_status = HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002016:	e008      	b.n	800202a <HAL_ADC_ConfigChannel+0x79a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800201c:	f043 0220 	orr.w	r2, r3, #32
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2200      	movs	r2, #0
 800202e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002032:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002036:	4618      	mov	r0, r3
 8002038:	37dc      	adds	r7, #220	; 0xdc
 800203a:	46bd      	mov	sp, r7
 800203c:	bd90      	pop	{r4, r7, pc}
 800203e:	bf00      	nop
 8002040:	80080000 	.word	0x80080000
 8002044:	42028300 	.word	0x42028300
 8002048:	42028000 	.word	0x42028000
 800204c:	42028100 	.word	0x42028100
 8002050:	c7520000 	.word	0xc7520000
 8002054:	20000000 	.word	0x20000000
 8002058:	053e2d63 	.word	0x053e2d63
 800205c:	cb840000 	.word	0xcb840000
 8002060:	80000001 	.word	0x80000001

08002064 <LL_ADC_IsEnabled>:
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	f003 0301 	and.w	r3, r3, #1
 8002074:	2b01      	cmp	r3, #1
 8002076:	d101      	bne.n	800207c <LL_ADC_IsEnabled+0x18>
 8002078:	2301      	movs	r3, #1
 800207a:	e000      	b.n	800207e <LL_ADC_IsEnabled+0x1a>
 800207c:	2300      	movs	r3, #0
}
 800207e:	4618      	mov	r0, r3
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr

0800208a <LL_ADC_REG_IsConversionOngoing>:
{
 800208a:	b480      	push	{r7}
 800208c:	b083      	sub	sp, #12
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	f003 0304 	and.w	r3, r3, #4
 800209a:	2b04      	cmp	r3, #4
 800209c:	d101      	bne.n	80020a2 <LL_ADC_REG_IsConversionOngoing+0x18>
 800209e:	2301      	movs	r3, #1
 80020a0:	e000      	b.n	80020a4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80020a2:	2300      	movs	r3, #0
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80020b0:	b590      	push	{r4, r7, lr}
 80020b2:	b0a1      	sub	sp, #132	; 0x84
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020ba:	2300      	movs	r3, #0
 80020bc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d101      	bne.n	80020ce <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80020ca:	2302      	movs	r3, #2
 80020cc:	e089      	b.n	80021e2 <HAL_ADCEx_MultiModeConfigChannel+0x132>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2201      	movs	r2, #1
 80020d2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80020d6:	2300      	movs	r3, #0
 80020d8:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80020da:	2300      	movs	r3, #0
 80020dc:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a42      	ldr	r2, [pc, #264]	; (80021ec <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d102      	bne.n	80020ee <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80020e8:	4b41      	ldr	r3, [pc, #260]	; (80021f0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80020ea:	60fb      	str	r3, [r7, #12]
 80020ec:	e001      	b.n	80020f2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80020ee:	2300      	movs	r3, #0
 80020f0:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d10b      	bne.n	8002110 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020fc:	f043 0220 	orr.w	r2, r3, #32
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2200      	movs	r2, #0
 8002108:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e068      	b.n	80021e2 <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	4618      	mov	r0, r3
 8002114:	f7ff ffb9 	bl	800208a <LL_ADC_REG_IsConversionOngoing>
 8002118:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4618      	mov	r0, r3
 8002120:	f7ff ffb3 	bl	800208a <LL_ADC_REG_IsConversionOngoing>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d14a      	bne.n	80021c0 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800212a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800212c:	2b00      	cmp	r3, #0
 800212e:	d147      	bne.n	80021c0 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002130:	4b30      	ldr	r3, [pc, #192]	; (80021f4 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8002132:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d027      	beq.n	800218c <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800213c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	6859      	ldr	r1, [r3, #4]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800214e:	035b      	lsls	r3, r3, #13
 8002150:	430b      	orrs	r3, r1
 8002152:	431a      	orrs	r2, r3
 8002154:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002156:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002158:	4824      	ldr	r0, [pc, #144]	; (80021ec <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800215a:	f7ff ff83 	bl	8002064 <LL_ADC_IsEnabled>
 800215e:	4604      	mov	r4, r0
 8002160:	4823      	ldr	r0, [pc, #140]	; (80021f0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002162:	f7ff ff7f 	bl	8002064 <LL_ADC_IsEnabled>
 8002166:	4603      	mov	r3, r0
 8002168:	4323      	orrs	r3, r4
 800216a:	2b00      	cmp	r3, #0
 800216c:	d132      	bne.n	80021d4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800216e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002176:	f023 030f 	bic.w	r3, r3, #15
 800217a:	683a      	ldr	r2, [r7, #0]
 800217c:	6811      	ldr	r1, [r2, #0]
 800217e:	683a      	ldr	r2, [r7, #0]
 8002180:	6892      	ldr	r2, [r2, #8]
 8002182:	430a      	orrs	r2, r1
 8002184:	431a      	orrs	r2, r3
 8002186:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002188:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800218a:	e023      	b.n	80021d4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800218c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002194:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002196:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002198:	4814      	ldr	r0, [pc, #80]	; (80021ec <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800219a:	f7ff ff63 	bl	8002064 <LL_ADC_IsEnabled>
 800219e:	4604      	mov	r4, r0
 80021a0:	4813      	ldr	r0, [pc, #76]	; (80021f0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80021a2:	f7ff ff5f 	bl	8002064 <LL_ADC_IsEnabled>
 80021a6:	4603      	mov	r3, r0
 80021a8:	4323      	orrs	r3, r4
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d112      	bne.n	80021d4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80021ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80021b6:	f023 030f 	bic.w	r3, r3, #15
 80021ba:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80021bc:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80021be:	e009      	b.n	80021d4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021c4:	f043 0220 	orr.w	r2, r3, #32
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80021d2:	e000      	b.n	80021d6 <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80021d4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80021de:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3784      	adds	r7, #132	; 0x84
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd90      	pop	{r4, r7, pc}
 80021ea:	bf00      	nop
 80021ec:	42028000 	.word	0x42028000
 80021f0:	42028100 	.word	0x42028100
 80021f4:	42028300 	.word	0x42028300

080021f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b085      	sub	sp, #20
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	f003 0307 	and.w	r3, r3, #7
 8002206:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002208:	4b0c      	ldr	r3, [pc, #48]	; (800223c <__NVIC_SetPriorityGrouping+0x44>)
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800220e:	68ba      	ldr	r2, [r7, #8]
 8002210:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002214:	4013      	ands	r3, r2
 8002216:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002220:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002224:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002228:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800222a:	4a04      	ldr	r2, [pc, #16]	; (800223c <__NVIC_SetPriorityGrouping+0x44>)
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	60d3      	str	r3, [r2, #12]
}
 8002230:	bf00      	nop
 8002232:	3714      	adds	r7, #20
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr
 800223c:	e000ed00 	.word	0xe000ed00

08002240 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002244:	4b04      	ldr	r3, [pc, #16]	; (8002258 <__NVIC_GetPriorityGrouping+0x18>)
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	0a1b      	lsrs	r3, r3, #8
 800224a:	f003 0307 	and.w	r3, r3, #7
}
 800224e:	4618      	mov	r0, r3
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr
 8002258:	e000ed00 	.word	0xe000ed00

0800225c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	4603      	mov	r3, r0
 8002264:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800226a:	2b00      	cmp	r3, #0
 800226c:	db0b      	blt.n	8002286 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800226e:	79fb      	ldrb	r3, [r7, #7]
 8002270:	f003 021f 	and.w	r2, r3, #31
 8002274:	4907      	ldr	r1, [pc, #28]	; (8002294 <__NVIC_EnableIRQ+0x38>)
 8002276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800227a:	095b      	lsrs	r3, r3, #5
 800227c:	2001      	movs	r0, #1
 800227e:	fa00 f202 	lsl.w	r2, r0, r2
 8002282:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002286:	bf00      	nop
 8002288:	370c      	adds	r7, #12
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
 8002294:	e000e100 	.word	0xe000e100

08002298 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	4603      	mov	r3, r0
 80022a0:	6039      	str	r1, [r7, #0]
 80022a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	db0a      	blt.n	80022c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	b2da      	uxtb	r2, r3
 80022b0:	490c      	ldr	r1, [pc, #48]	; (80022e4 <__NVIC_SetPriority+0x4c>)
 80022b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b6:	0152      	lsls	r2, r2, #5
 80022b8:	b2d2      	uxtb	r2, r2
 80022ba:	440b      	add	r3, r1
 80022bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022c0:	e00a      	b.n	80022d8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	b2da      	uxtb	r2, r3
 80022c6:	4908      	ldr	r1, [pc, #32]	; (80022e8 <__NVIC_SetPriority+0x50>)
 80022c8:	79fb      	ldrb	r3, [r7, #7]
 80022ca:	f003 030f 	and.w	r3, r3, #15
 80022ce:	3b04      	subs	r3, #4
 80022d0:	0152      	lsls	r2, r2, #5
 80022d2:	b2d2      	uxtb	r2, r2
 80022d4:	440b      	add	r3, r1
 80022d6:	761a      	strb	r2, [r3, #24]
}
 80022d8:	bf00      	nop
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr
 80022e4:	e000e100 	.word	0xe000e100
 80022e8:	e000ed00 	.word	0xe000ed00

080022ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b089      	sub	sp, #36	; 0x24
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	60b9      	str	r1, [r7, #8]
 80022f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f003 0307 	and.w	r3, r3, #7
 80022fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	f1c3 0307 	rsb	r3, r3, #7
 8002306:	2b03      	cmp	r3, #3
 8002308:	bf28      	it	cs
 800230a:	2303      	movcs	r3, #3
 800230c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	3303      	adds	r3, #3
 8002312:	2b06      	cmp	r3, #6
 8002314:	d902      	bls.n	800231c <NVIC_EncodePriority+0x30>
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	3b04      	subs	r3, #4
 800231a:	e000      	b.n	800231e <NVIC_EncodePriority+0x32>
 800231c:	2300      	movs	r3, #0
 800231e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002320:	f04f 32ff 	mov.w	r2, #4294967295
 8002324:	69bb      	ldr	r3, [r7, #24]
 8002326:	fa02 f303 	lsl.w	r3, r2, r3
 800232a:	43da      	mvns	r2, r3
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	401a      	ands	r2, r3
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002334:	f04f 31ff 	mov.w	r1, #4294967295
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	fa01 f303 	lsl.w	r3, r1, r3
 800233e:	43d9      	mvns	r1, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002344:	4313      	orrs	r3, r2
         );
}
 8002346:	4618      	mov	r0, r3
 8002348:	3724      	adds	r7, #36	; 0x24
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
	...

08002354 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	3b01      	subs	r3, #1
 8002360:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002364:	d301      	bcc.n	800236a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002366:	2301      	movs	r3, #1
 8002368:	e00f      	b.n	800238a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800236a:	4a0a      	ldr	r2, [pc, #40]	; (8002394 <SysTick_Config+0x40>)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	3b01      	subs	r3, #1
 8002370:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002372:	2107      	movs	r1, #7
 8002374:	f04f 30ff 	mov.w	r0, #4294967295
 8002378:	f7ff ff8e 	bl	8002298 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800237c:	4b05      	ldr	r3, [pc, #20]	; (8002394 <SysTick_Config+0x40>)
 800237e:	2200      	movs	r2, #0
 8002380:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002382:	4b04      	ldr	r3, [pc, #16]	; (8002394 <SysTick_Config+0x40>)
 8002384:	2207      	movs	r2, #7
 8002386:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002388:	2300      	movs	r3, #0
}
 800238a:	4618      	mov	r0, r3
 800238c:	3708      	adds	r7, #8
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	e000e010 	.word	0xe000e010

08002398 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f7ff ff29 	bl	80021f8 <__NVIC_SetPriorityGrouping>
}
 80023a6:	bf00      	nop
 80023a8:	3708      	adds	r7, #8
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}

080023ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023ae:	b580      	push	{r7, lr}
 80023b0:	b086      	sub	sp, #24
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	4603      	mov	r3, r0
 80023b6:	60b9      	str	r1, [r7, #8]
 80023b8:	607a      	str	r2, [r7, #4]
 80023ba:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80023bc:	f7ff ff40 	bl	8002240 <__NVIC_GetPriorityGrouping>
 80023c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	68b9      	ldr	r1, [r7, #8]
 80023c6:	6978      	ldr	r0, [r7, #20]
 80023c8:	f7ff ff90 	bl	80022ec <NVIC_EncodePriority>
 80023cc:	4602      	mov	r2, r0
 80023ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023d2:	4611      	mov	r1, r2
 80023d4:	4618      	mov	r0, r3
 80023d6:	f7ff ff5f 	bl	8002298 <__NVIC_SetPriority>
}
 80023da:	bf00      	nop
 80023dc:	3718      	adds	r7, #24
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}

080023e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023e2:	b580      	push	{r7, lr}
 80023e4:	b082      	sub	sp, #8
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	4603      	mov	r3, r0
 80023ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f0:	4618      	mov	r0, r3
 80023f2:	f7ff ff33 	bl	800225c <__NVIC_EnableIRQ>
}
 80023f6:	bf00      	nop
 80023f8:	3708      	adds	r7, #8
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}

080023fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023fe:	b580      	push	{r7, lr}
 8002400:	b082      	sub	sp, #8
 8002402:	af00      	add	r7, sp, #0
 8002404:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f7ff ffa4 	bl	8002354 <SysTick_Config>
 800240c:	4603      	mov	r3, r0
}
 800240e:	4618      	mov	r0, r3
 8002410:	3708      	adds	r7, #8
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
	...

08002418 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002418:	b480      	push	{r7}
 800241a:	b087      	sub	sp, #28
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 8002422:	2300      	movs	r3, #0
 8002424:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002426:	e158      	b.n	80026da <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	2101      	movs	r1, #1
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	fa01 f303 	lsl.w	r3, r1, r3
 8002434:	4013      	ands	r3, r2
 8002436:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2b00      	cmp	r3, #0
 800243c:	f000 814a 	beq.w	80026d4 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f003 0303 	and.w	r3, r3, #3
 8002448:	2b01      	cmp	r3, #1
 800244a:	d005      	beq.n	8002458 <HAL_GPIO_Init+0x40>
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f003 0303 	and.w	r3, r3, #3
 8002454:	2b02      	cmp	r3, #2
 8002456:	d130      	bne.n	80024ba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	005b      	lsls	r3, r3, #1
 8002462:	2203      	movs	r2, #3
 8002464:	fa02 f303 	lsl.w	r3, r2, r3
 8002468:	43db      	mvns	r3, r3
 800246a:	693a      	ldr	r2, [r7, #16]
 800246c:	4013      	ands	r3, r2
 800246e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	68da      	ldr	r2, [r3, #12]
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	005b      	lsls	r3, r3, #1
 8002478:	fa02 f303 	lsl.w	r3, r2, r3
 800247c:	693a      	ldr	r2, [r7, #16]
 800247e:	4313      	orrs	r3, r2
 8002480:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	693a      	ldr	r2, [r7, #16]
 8002486:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800248e:	2201      	movs	r2, #1
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	fa02 f303 	lsl.w	r3, r2, r3
 8002496:	43db      	mvns	r3, r3
 8002498:	693a      	ldr	r2, [r7, #16]
 800249a:	4013      	ands	r3, r2
 800249c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	091b      	lsrs	r3, r3, #4
 80024a4:	f003 0201 	and.w	r2, r3, #1
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	fa02 f303 	lsl.w	r3, r2, r3
 80024ae:	693a      	ldr	r2, [r7, #16]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	693a      	ldr	r2, [r7, #16]
 80024b8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f003 0303 	and.w	r3, r3, #3
 80024c2:	2b03      	cmp	r3, #3
 80024c4:	d017      	beq.n	80024f6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	68db      	ldr	r3, [r3, #12]
 80024ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	005b      	lsls	r3, r3, #1
 80024d0:	2203      	movs	r2, #3
 80024d2:	fa02 f303 	lsl.w	r3, r2, r3
 80024d6:	43db      	mvns	r3, r3
 80024d8:	693a      	ldr	r2, [r7, #16]
 80024da:	4013      	ands	r3, r2
 80024dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	689a      	ldr	r2, [r3, #8]
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	005b      	lsls	r3, r3, #1
 80024e6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ea:	693a      	ldr	r2, [r7, #16]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	693a      	ldr	r2, [r7, #16]
 80024f4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	f003 0303 	and.w	r3, r3, #3
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d123      	bne.n	800254a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	08da      	lsrs	r2, r3, #3
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	3208      	adds	r2, #8
 800250a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800250e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	f003 0307 	and.w	r3, r3, #7
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	220f      	movs	r2, #15
 800251a:	fa02 f303 	lsl.w	r3, r2, r3
 800251e:	43db      	mvns	r3, r3
 8002520:	693a      	ldr	r2, [r7, #16]
 8002522:	4013      	ands	r3, r2
 8002524:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	691a      	ldr	r2, [r3, #16]
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	f003 0307 	and.w	r3, r3, #7
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	fa02 f303 	lsl.w	r3, r2, r3
 8002536:	693a      	ldr	r2, [r7, #16]
 8002538:	4313      	orrs	r3, r2
 800253a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	08da      	lsrs	r2, r3, #3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	3208      	adds	r2, #8
 8002544:	6939      	ldr	r1, [r7, #16]
 8002546:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	005b      	lsls	r3, r3, #1
 8002554:	2203      	movs	r2, #3
 8002556:	fa02 f303 	lsl.w	r3, r2, r3
 800255a:	43db      	mvns	r3, r3
 800255c:	693a      	ldr	r2, [r7, #16]
 800255e:	4013      	ands	r3, r2
 8002560:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f003 0203 	and.w	r2, r3, #3
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	005b      	lsls	r3, r3, #1
 800256e:	fa02 f303 	lsl.w	r3, r2, r3
 8002572:	693a      	ldr	r2, [r7, #16]
 8002574:	4313      	orrs	r3, r2
 8002576:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	693a      	ldr	r2, [r7, #16]
 800257c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002586:	2b00      	cmp	r3, #0
 8002588:	f000 80a4 	beq.w	80026d4 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 800258c:	4a5a      	ldr	r2, [pc, #360]	; (80026f8 <HAL_GPIO_Init+0x2e0>)
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	089b      	lsrs	r3, r3, #2
 8002592:	3318      	adds	r3, #24
 8002594:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002598:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	f003 0303 	and.w	r3, r3, #3
 80025a0:	00db      	lsls	r3, r3, #3
 80025a2:	220f      	movs	r2, #15
 80025a4:	fa02 f303 	lsl.w	r3, r2, r3
 80025a8:	43db      	mvns	r3, r3
 80025aa:	693a      	ldr	r2, [r7, #16]
 80025ac:	4013      	ands	r3, r2
 80025ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	4a52      	ldr	r2, [pc, #328]	; (80026fc <HAL_GPIO_Init+0x2e4>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d025      	beq.n	8002604 <HAL_GPIO_Init+0x1ec>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	4a51      	ldr	r2, [pc, #324]	; (8002700 <HAL_GPIO_Init+0x2e8>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d01f      	beq.n	8002600 <HAL_GPIO_Init+0x1e8>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	4a50      	ldr	r2, [pc, #320]	; (8002704 <HAL_GPIO_Init+0x2ec>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d019      	beq.n	80025fc <HAL_GPIO_Init+0x1e4>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	4a4f      	ldr	r2, [pc, #316]	; (8002708 <HAL_GPIO_Init+0x2f0>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d013      	beq.n	80025f8 <HAL_GPIO_Init+0x1e0>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	4a4e      	ldr	r2, [pc, #312]	; (800270c <HAL_GPIO_Init+0x2f4>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d00d      	beq.n	80025f4 <HAL_GPIO_Init+0x1dc>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	4a4d      	ldr	r2, [pc, #308]	; (8002710 <HAL_GPIO_Init+0x2f8>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d007      	beq.n	80025f0 <HAL_GPIO_Init+0x1d8>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	4a4c      	ldr	r2, [pc, #304]	; (8002714 <HAL_GPIO_Init+0x2fc>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d101      	bne.n	80025ec <HAL_GPIO_Init+0x1d4>
 80025e8:	2306      	movs	r3, #6
 80025ea:	e00c      	b.n	8002606 <HAL_GPIO_Init+0x1ee>
 80025ec:	2307      	movs	r3, #7
 80025ee:	e00a      	b.n	8002606 <HAL_GPIO_Init+0x1ee>
 80025f0:	2305      	movs	r3, #5
 80025f2:	e008      	b.n	8002606 <HAL_GPIO_Init+0x1ee>
 80025f4:	2304      	movs	r3, #4
 80025f6:	e006      	b.n	8002606 <HAL_GPIO_Init+0x1ee>
 80025f8:	2303      	movs	r3, #3
 80025fa:	e004      	b.n	8002606 <HAL_GPIO_Init+0x1ee>
 80025fc:	2302      	movs	r3, #2
 80025fe:	e002      	b.n	8002606 <HAL_GPIO_Init+0x1ee>
 8002600:	2301      	movs	r3, #1
 8002602:	e000      	b.n	8002606 <HAL_GPIO_Init+0x1ee>
 8002604:	2300      	movs	r3, #0
 8002606:	697a      	ldr	r2, [r7, #20]
 8002608:	f002 0203 	and.w	r2, r2, #3
 800260c:	00d2      	lsls	r2, r2, #3
 800260e:	4093      	lsls	r3, r2
 8002610:	693a      	ldr	r2, [r7, #16]
 8002612:	4313      	orrs	r3, r2
 8002614:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8002616:	4938      	ldr	r1, [pc, #224]	; (80026f8 <HAL_GPIO_Init+0x2e0>)
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	089b      	lsrs	r3, r3, #2
 800261c:	3318      	adds	r3, #24
 800261e:	693a      	ldr	r2, [r7, #16]
 8002620:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002624:	4b34      	ldr	r3, [pc, #208]	; (80026f8 <HAL_GPIO_Init+0x2e0>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	43db      	mvns	r3, r3
 800262e:	693a      	ldr	r2, [r7, #16]
 8002630:	4013      	ands	r3, r2
 8002632:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d003      	beq.n	8002648 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002640:	693a      	ldr	r2, [r7, #16]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	4313      	orrs	r3, r2
 8002646:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002648:	4a2b      	ldr	r2, [pc, #172]	; (80026f8 <HAL_GPIO_Init+0x2e0>)
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800264e:	4b2a      	ldr	r3, [pc, #168]	; (80026f8 <HAL_GPIO_Init+0x2e0>)
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	43db      	mvns	r3, r3
 8002658:	693a      	ldr	r2, [r7, #16]
 800265a:	4013      	ands	r3, r2
 800265c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d003      	beq.n	8002672 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800266a:	693a      	ldr	r2, [r7, #16]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	4313      	orrs	r3, r2
 8002670:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002672:	4a21      	ldr	r2, [pc, #132]	; (80026f8 <HAL_GPIO_Init+0x2e0>)
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002678:	4b1f      	ldr	r3, [pc, #124]	; (80026f8 <HAL_GPIO_Init+0x2e0>)
 800267a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800267e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	43db      	mvns	r3, r3
 8002684:	693a      	ldr	r2, [r7, #16]
 8002686:	4013      	ands	r3, r2
 8002688:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d003      	beq.n	800269e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002696:	693a      	ldr	r2, [r7, #16]
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	4313      	orrs	r3, r2
 800269c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800269e:	4a16      	ldr	r2, [pc, #88]	; (80026f8 <HAL_GPIO_Init+0x2e0>)
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        temp = EXTI->IMR1;
 80026a6:	4b14      	ldr	r3, [pc, #80]	; (80026f8 <HAL_GPIO_Init+0x2e0>)
 80026a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	43db      	mvns	r3, r3
 80026b2:	693a      	ldr	r2, [r7, #16]
 80026b4:	4013      	ands	r3, r2
 80026b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d003      	beq.n	80026cc <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 80026c4:	693a      	ldr	r2, [r7, #16]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80026cc:	4a0a      	ldr	r2, [pc, #40]	; (80026f8 <HAL_GPIO_Init+0x2e0>)
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	3301      	adds	r3, #1
 80026d8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	fa22 f303 	lsr.w	r3, r2, r3
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	f47f ae9f 	bne.w	8002428 <HAL_GPIO_Init+0x10>
  }
}
 80026ea:	bf00      	nop
 80026ec:	bf00      	nop
 80026ee:	371c      	adds	r7, #28
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr
 80026f8:	4002f400 	.word	0x4002f400
 80026fc:	42020000 	.word	0x42020000
 8002700:	42020400 	.word	0x42020400
 8002704:	42020800 	.word	0x42020800
 8002708:	42020c00 	.word	0x42020c00
 800270c:	42021000 	.word	0x42021000
 8002710:	42021400 	.word	0x42021400
 8002714:	42021800 	.word	0x42021800

08002718 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	460b      	mov	r3, r1
 8002722:	807b      	strh	r3, [r7, #2]
 8002724:	4613      	mov	r3, r2
 8002726:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002728:	787b      	ldrb	r3, [r7, #1]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d003      	beq.n	8002736 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800272e:	887a      	ldrh	r2, [r7, #2]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002734:	e002      	b.n	800273c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002736:	887a      	ldrh	r2, [r7, #2]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800273c:	bf00      	nop
 800273e:	370c      	adds	r7, #12
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr

08002748 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
 800274e:	4603      	mov	r3, r0
 8002750:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8002752:	4b0f      	ldr	r3, [pc, #60]	; (8002790 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8002754:	68da      	ldr	r2, [r3, #12]
 8002756:	88fb      	ldrh	r3, [r7, #6]
 8002758:	4013      	ands	r3, r2
 800275a:	2b00      	cmp	r3, #0
 800275c:	d006      	beq.n	800276c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 800275e:	4a0c      	ldr	r2, [pc, #48]	; (8002790 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8002760:	88fb      	ldrh	r3, [r7, #6]
 8002762:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8002764:	88fb      	ldrh	r3, [r7, #6]
 8002766:	4618      	mov	r0, r3
 8002768:	f7fe fa70 	bl	8000c4c <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 800276c:	4b08      	ldr	r3, [pc, #32]	; (8002790 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800276e:	691a      	ldr	r2, [r3, #16]
 8002770:	88fb      	ldrh	r3, [r7, #6]
 8002772:	4013      	ands	r3, r2
 8002774:	2b00      	cmp	r3, #0
 8002776:	d006      	beq.n	8002786 <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8002778:	4a05      	ldr	r2, [pc, #20]	; (8002790 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800277a:	88fb      	ldrh	r3, [r7, #6]
 800277c:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800277e:	88fb      	ldrh	r3, [r7, #6]
 8002780:	4618      	mov	r0, r3
 8002782:	f000 f807 	bl	8002794 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8002786:	bf00      	nop
 8002788:	3708      	adds	r7, #8
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	4002f400 	.word	0x4002f400

08002794 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	4603      	mov	r3, r0
 800279c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 800279e:	bf00      	nop
 80027a0:	370c      	adds	r7, #12
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
	...

080027ac <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b085      	sub	sp, #20
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027b4:	2300      	movs	r3, #0
 80027b6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 80027b8:	4b0b      	ldr	r3, [pc, #44]	; (80027e8 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0301 	and.w	r3, r3, #1
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d002      	beq.n	80027ca <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	73fb      	strb	r3, [r7, #15]
 80027c8:	e007      	b.n	80027da <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 80027ca:	4b07      	ldr	r3, [pc, #28]	; (80027e8 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f023 0204 	bic.w	r2, r3, #4
 80027d2:	4905      	ldr	r1, [pc, #20]	; (80027e8 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	600b      	str	r3, [r1, #0]
  }

  return status;
 80027da:	7bfb      	ldrb	r3, [r7, #15]
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3714      	adds	r7, #20
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr
 80027e8:	40030400 	.word	0x40030400

080027ec <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80027f0:	4b05      	ldr	r3, [pc, #20]	; (8002808 <HAL_ICACHE_Enable+0x1c>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a04      	ldr	r2, [pc, #16]	; (8002808 <HAL_ICACHE_Enable+0x1c>)
 80027f6:	f043 0301 	orr.w	r3, r3, #1
 80027fa:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80027fc:	2300      	movs	r3, #0
}
 80027fe:	4618      	mov	r0, r3
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr
 8002808:	40030400 	.word	0x40030400

0800280c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800280c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800280e:	b08b      	sub	sp, #44	; 0x2c
 8002810:	af06      	add	r7, sp, #24
 8002812:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d101      	bne.n	800281e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e0cb      	b.n	80029b6 <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002824:	b2db      	uxtb	r3, r3
 8002826:	2b00      	cmp	r3, #0
 8002828:	d106      	bne.n	8002838 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f7fe fb46 	bl	8000ec4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2203      	movs	r2, #3
 800283c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4618      	mov	r0, r3
 8002846:	f002 ffc1 	bl	80057cc <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800284a:	2300      	movs	r3, #0
 800284c:	73fb      	strb	r3, [r7, #15]
 800284e:	e040      	b.n	80028d2 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002850:	7bfb      	ldrb	r3, [r7, #15]
 8002852:	6879      	ldr	r1, [r7, #4]
 8002854:	1c5a      	adds	r2, r3, #1
 8002856:	4613      	mov	r3, r2
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	4413      	add	r3, r2
 800285c:	00db      	lsls	r3, r3, #3
 800285e:	440b      	add	r3, r1
 8002860:	3301      	adds	r3, #1
 8002862:	2201      	movs	r2, #1
 8002864:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002866:	7bfb      	ldrb	r3, [r7, #15]
 8002868:	6879      	ldr	r1, [r7, #4]
 800286a:	1c5a      	adds	r2, r3, #1
 800286c:	4613      	mov	r3, r2
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	4413      	add	r3, r2
 8002872:	00db      	lsls	r3, r3, #3
 8002874:	440b      	add	r3, r1
 8002876:	7bfa      	ldrb	r2, [r7, #15]
 8002878:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800287a:	7bfb      	ldrb	r3, [r7, #15]
 800287c:	6879      	ldr	r1, [r7, #4]
 800287e:	1c5a      	adds	r2, r3, #1
 8002880:	4613      	mov	r3, r2
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	4413      	add	r3, r2
 8002886:	00db      	lsls	r3, r3, #3
 8002888:	440b      	add	r3, r1
 800288a:	3303      	adds	r3, #3
 800288c:	2200      	movs	r2, #0
 800288e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002890:	7bfa      	ldrb	r2, [r7, #15]
 8002892:	6879      	ldr	r1, [r7, #4]
 8002894:	4613      	mov	r3, r2
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	4413      	add	r3, r2
 800289a:	00db      	lsls	r3, r3, #3
 800289c:	440b      	add	r3, r1
 800289e:	3338      	adds	r3, #56	; 0x38
 80028a0:	2200      	movs	r2, #0
 80028a2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80028a4:	7bfa      	ldrb	r2, [r7, #15]
 80028a6:	6879      	ldr	r1, [r7, #4]
 80028a8:	4613      	mov	r3, r2
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	4413      	add	r3, r2
 80028ae:	00db      	lsls	r3, r3, #3
 80028b0:	440b      	add	r3, r1
 80028b2:	333c      	adds	r3, #60	; 0x3c
 80028b4:	2200      	movs	r2, #0
 80028b6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80028b8:	7bfa      	ldrb	r2, [r7, #15]
 80028ba:	6879      	ldr	r1, [r7, #4]
 80028bc:	4613      	mov	r3, r2
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	4413      	add	r3, r2
 80028c2:	00db      	lsls	r3, r3, #3
 80028c4:	440b      	add	r3, r1
 80028c6:	3340      	adds	r3, #64	; 0x40
 80028c8:	2200      	movs	r2, #0
 80028ca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028cc:	7bfb      	ldrb	r3, [r7, #15]
 80028ce:	3301      	adds	r3, #1
 80028d0:	73fb      	strb	r3, [r7, #15]
 80028d2:	7bfa      	ldrb	r2, [r7, #15]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	429a      	cmp	r2, r3
 80028da:	d3b9      	bcc.n	8002850 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028dc:	2300      	movs	r3, #0
 80028de:	73fb      	strb	r3, [r7, #15]
 80028e0:	e044      	b.n	800296c <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80028e2:	7bfa      	ldrb	r2, [r7, #15]
 80028e4:	6879      	ldr	r1, [r7, #4]
 80028e6:	4613      	mov	r3, r2
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	4413      	add	r3, r2
 80028ec:	00db      	lsls	r3, r3, #3
 80028ee:	440b      	add	r3, r1
 80028f0:	f203 1369 	addw	r3, r3, #361	; 0x169
 80028f4:	2200      	movs	r2, #0
 80028f6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80028f8:	7bfa      	ldrb	r2, [r7, #15]
 80028fa:	6879      	ldr	r1, [r7, #4]
 80028fc:	4613      	mov	r3, r2
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	4413      	add	r3, r2
 8002902:	00db      	lsls	r3, r3, #3
 8002904:	440b      	add	r3, r1
 8002906:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800290a:	7bfa      	ldrb	r2, [r7, #15]
 800290c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800290e:	7bfa      	ldrb	r2, [r7, #15]
 8002910:	6879      	ldr	r1, [r7, #4]
 8002912:	4613      	mov	r3, r2
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	4413      	add	r3, r2
 8002918:	00db      	lsls	r3, r3, #3
 800291a:	440b      	add	r3, r1
 800291c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002920:	2200      	movs	r2, #0
 8002922:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002924:	7bfa      	ldrb	r2, [r7, #15]
 8002926:	6879      	ldr	r1, [r7, #4]
 8002928:	4613      	mov	r3, r2
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	4413      	add	r3, r2
 800292e:	00db      	lsls	r3, r3, #3
 8002930:	440b      	add	r3, r1
 8002932:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002936:	2200      	movs	r2, #0
 8002938:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800293a:	7bfa      	ldrb	r2, [r7, #15]
 800293c:	6879      	ldr	r1, [r7, #4]
 800293e:	4613      	mov	r3, r2
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	4413      	add	r3, r2
 8002944:	00db      	lsls	r3, r3, #3
 8002946:	440b      	add	r3, r1
 8002948:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800294c:	2200      	movs	r2, #0
 800294e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002950:	7bfa      	ldrb	r2, [r7, #15]
 8002952:	6879      	ldr	r1, [r7, #4]
 8002954:	4613      	mov	r3, r2
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	4413      	add	r3, r2
 800295a:	00db      	lsls	r3, r3, #3
 800295c:	440b      	add	r3, r1
 800295e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002962:	2200      	movs	r2, #0
 8002964:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002966:	7bfb      	ldrb	r3, [r7, #15]
 8002968:	3301      	adds	r3, #1
 800296a:	73fb      	strb	r3, [r7, #15]
 800296c:	7bfa      	ldrb	r2, [r7, #15]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	429a      	cmp	r2, r3
 8002974:	d3b5      	bcc.n	80028e2 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	603b      	str	r3, [r7, #0]
 800297c:	687e      	ldr	r6, [r7, #4]
 800297e:	466d      	mov	r5, sp
 8002980:	f106 0410 	add.w	r4, r6, #16
 8002984:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002986:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002988:	6823      	ldr	r3, [r4, #0]
 800298a:	602b      	str	r3, [r5, #0]
 800298c:	1d33      	adds	r3, r6, #4
 800298e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002990:	6838      	ldr	r0, [r7, #0]
 8002992:	f002 ff36 	bl	8005802 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2201      	movs	r2, #1
 80029a2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	69db      	ldr	r3, [r3, #28]
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d102      	bne.n	80029b4 <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f000 f805 	bl	80029be <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3714      	adds	r7, #20
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080029be <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80029be:	b480      	push	{r7}
 80029c0:	b085      	sub	sp, #20
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2201      	movs	r2, #1
 80029d0:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	f043 0301 	orr.w	r3, r3, #1
 80029e8:	b29a      	uxth	r2, r3
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	f043 0302 	orr.w	r3, r3, #2
 80029fc:	b29a      	uxth	r2, r3
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8002a04:	2300      	movs	r3, #0
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3714      	adds	r7, #20
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
	...

08002a14 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002a14:	b480      	push	{r7}
 8002a16:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a18:	4b05      	ldr	r3, [pc, #20]	; (8002a30 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a04      	ldr	r2, [pc, #16]	; (8002a30 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002a1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a22:	6013      	str	r3, [r2, #0]
}
 8002a24:	bf00      	nop
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr
 8002a2e:	bf00      	nop
 8002a30:	40007000 	.word	0x40007000

08002a34 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002a34:	b480      	push	{r7}
 8002a36:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002a38:	4b04      	ldr	r3, [pc, #16]	; (8002a4c <HAL_PWREx_GetVoltageRange+0x18>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr
 8002a4a:	bf00      	nop
 8002a4c:	40007000 	.word	0x40007000

08002a50 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8002a58:	4b27      	ldr	r3, [pc, #156]	; (8002af8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002a60:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 8002a62:	f000 f861 	bl	8002b28 <HAL_PWREx_SMPS_GetEffectiveMode>
 8002a66:	4603      	mov	r3, r0
 8002a68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a6c:	d101      	bne.n	8002a72 <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e03e      	b.n	8002af0 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 8002a72:	4b21      	ldr	r3, [pc, #132]	; (8002af8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a7e:	d101      	bne.n	8002a84 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e035      	b.n	8002af0 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8002a84:	68ba      	ldr	r2, [r7, #8]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d101      	bne.n	8002a90 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	e02f      	b.n	8002af0 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002a90:	4b19      	ldr	r3, [pc, #100]	; (8002af8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8002a98:	4917      	ldr	r1, [pc, #92]	; (8002af8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8002aa0:	4b16      	ldr	r3, [pc, #88]	; (8002afc <HAL_PWREx_ControlVoltageScaling+0xac>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	095b      	lsrs	r3, r3, #5
 8002aa6:	4a16      	ldr	r2, [pc, #88]	; (8002b00 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8002aa8:	fba2 2303 	umull	r2, r3, r2, r3
 8002aac:	09db      	lsrs	r3, r3, #7
 8002aae:	2232      	movs	r2, #50	; 0x32
 8002ab0:	fb02 f303 	mul.w	r3, r2, r3
 8002ab4:	4a13      	ldr	r2, [pc, #76]	; (8002b04 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8002ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8002aba:	08db      	lsrs	r3, r3, #3
 8002abc:	3301      	adds	r3, #1
 8002abe:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ac0:	e002      	b.n	8002ac8 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	3b01      	subs	r3, #1
 8002ac6:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ac8:	4b0b      	ldr	r3, [pc, #44]	; (8002af8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002aca:	695b      	ldr	r3, [r3, #20]
 8002acc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ad0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ad4:	d102      	bne.n	8002adc <HAL_PWREx_ControlVoltageScaling+0x8c>
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d1f2      	bne.n	8002ac2 <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002adc:	4b06      	ldr	r3, [pc, #24]	; (8002af8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002ade:	695b      	ldr	r3, [r3, #20]
 8002ae0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ae4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ae8:	d101      	bne.n	8002aee <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e000      	b.n	8002af0 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 8002aee:	2300      	movs	r3, #0
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3710      	adds	r7, #16
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	40007000 	.word	0x40007000
 8002afc:	20000000 	.word	0x20000000
 8002b00:	0a7c5ac5 	.word	0x0a7c5ac5
 8002b04:	cccccccd 	.word	0xcccccccd

08002b08 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002b0c:	4b05      	ldr	r3, [pc, #20]	; (8002b24 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	4a04      	ldr	r2, [pc, #16]	; (8002b24 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002b12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b16:	6053      	str	r3, [r2, #4]
}
 8002b18:	bf00      	nop
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr
 8002b22:	bf00      	nop
 8002b24:	40007000 	.word	0x40007000

08002b28 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 8002b2e:	4b0f      	ldr	r3, [pc, #60]	; (8002b6c <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 8002b30:	691b      	ldr	r3, [r3, #16]
 8002b32:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d003      	beq.n	8002b46 <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 8002b3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b42:	607b      	str	r3, [r7, #4]
 8002b44:	e00a      	b.n	8002b5c <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d103      	bne.n	8002b58 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 8002b50:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b54:	607b      	str	r3, [r7, #4]
 8002b56:	e001      	b.n	8002b5c <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	607b      	str	r3, [r7, #4]
  }

  return mode;
 8002b5c:	687b      	ldr	r3, [r7, #4]
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	370c      	adds	r7, #12
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr
 8002b6a:	bf00      	nop
 8002b6c:	40007000 	.word	0x40007000

08002b70 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b088      	sub	sp, #32
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d102      	bne.n	8002b84 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	f000 bcc2 	b.w	8003508 <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b84:	4b99      	ldr	r3, [pc, #612]	; (8002dec <HAL_RCC_OscConfig+0x27c>)
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	f003 030c 	and.w	r3, r3, #12
 8002b8c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b8e:	4b97      	ldr	r3, [pc, #604]	; (8002dec <HAL_RCC_OscConfig+0x27c>)
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	f003 0303 	and.w	r3, r3, #3
 8002b96:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0310 	and.w	r3, r3, #16
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	f000 80e9 	beq.w	8002d78 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002ba6:	69bb      	ldr	r3, [r7, #24]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d006      	beq.n	8002bba <HAL_RCC_OscConfig+0x4a>
 8002bac:	69bb      	ldr	r3, [r7, #24]
 8002bae:	2b0c      	cmp	r3, #12
 8002bb0:	f040 8083 	bne.w	8002cba <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d17f      	bne.n	8002cba <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002bba:	4b8c      	ldr	r3, [pc, #560]	; (8002dec <HAL_RCC_OscConfig+0x27c>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0302 	and.w	r3, r3, #2
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d006      	beq.n	8002bd4 <HAL_RCC_OscConfig+0x64>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	69db      	ldr	r3, [r3, #28]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d102      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	f000 bc9a 	b.w	8003508 <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bd8:	4b84      	ldr	r3, [pc, #528]	; (8002dec <HAL_RCC_OscConfig+0x27c>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0308 	and.w	r3, r3, #8
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d004      	beq.n	8002bee <HAL_RCC_OscConfig+0x7e>
 8002be4:	4b81      	ldr	r3, [pc, #516]	; (8002dec <HAL_RCC_OscConfig+0x27c>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bec:	e005      	b.n	8002bfa <HAL_RCC_OscConfig+0x8a>
 8002bee:	4b7f      	ldr	r3, [pc, #508]	; (8002dec <HAL_RCC_OscConfig+0x27c>)
 8002bf0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bf4:	091b      	lsrs	r3, r3, #4
 8002bf6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d224      	bcs.n	8002c48 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c02:	4618      	mov	r0, r3
 8002c04:	f000 fe9c 	bl	8003940 <RCC_SetFlashLatencyFromMSIRange>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d002      	beq.n	8002c14 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	f000 bc7a 	b.w	8003508 <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c14:	4b75      	ldr	r3, [pc, #468]	; (8002dec <HAL_RCC_OscConfig+0x27c>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a74      	ldr	r2, [pc, #464]	; (8002dec <HAL_RCC_OscConfig+0x27c>)
 8002c1a:	f043 0308 	orr.w	r3, r3, #8
 8002c1e:	6013      	str	r3, [r2, #0]
 8002c20:	4b72      	ldr	r3, [pc, #456]	; (8002dec <HAL_RCC_OscConfig+0x27c>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2c:	496f      	ldr	r1, [pc, #444]	; (8002dec <HAL_RCC_OscConfig+0x27c>)
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c32:	4b6e      	ldr	r3, [pc, #440]	; (8002dec <HAL_RCC_OscConfig+0x27c>)
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6a1b      	ldr	r3, [r3, #32]
 8002c3e:	021b      	lsls	r3, r3, #8
 8002c40:	496a      	ldr	r1, [pc, #424]	; (8002dec <HAL_RCC_OscConfig+0x27c>)
 8002c42:	4313      	orrs	r3, r2
 8002c44:	604b      	str	r3, [r1, #4]
 8002c46:	e026      	b.n	8002c96 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c48:	4b68      	ldr	r3, [pc, #416]	; (8002dec <HAL_RCC_OscConfig+0x27c>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a67      	ldr	r2, [pc, #412]	; (8002dec <HAL_RCC_OscConfig+0x27c>)
 8002c4e:	f043 0308 	orr.w	r3, r3, #8
 8002c52:	6013      	str	r3, [r2, #0]
 8002c54:	4b65      	ldr	r3, [pc, #404]	; (8002dec <HAL_RCC_OscConfig+0x27c>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c60:	4962      	ldr	r1, [pc, #392]	; (8002dec <HAL_RCC_OscConfig+0x27c>)
 8002c62:	4313      	orrs	r3, r2
 8002c64:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c66:	4b61      	ldr	r3, [pc, #388]	; (8002dec <HAL_RCC_OscConfig+0x27c>)
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6a1b      	ldr	r3, [r3, #32]
 8002c72:	021b      	lsls	r3, r3, #8
 8002c74:	495d      	ldr	r1, [pc, #372]	; (8002dec <HAL_RCC_OscConfig+0x27c>)
 8002c76:	4313      	orrs	r3, r2
 8002c78:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002c7a:	69bb      	ldr	r3, [r7, #24]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d10a      	bne.n	8002c96 <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c84:	4618      	mov	r0, r3
 8002c86:	f000 fe5b 	bl	8003940 <RCC_SetFlashLatencyFromMSIRange>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d002      	beq.n	8002c96 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	f000 bc39 	b.w	8003508 <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002c96:	f000 fe17 	bl	80038c8 <HAL_RCC_GetHCLKFreq>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	4a54      	ldr	r2, [pc, #336]	; (8002df0 <HAL_RCC_OscConfig+0x280>)
 8002c9e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002ca0:	4b54      	ldr	r3, [pc, #336]	; (8002df4 <HAL_RCC_OscConfig+0x284>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f7fe faab 	bl	8001200 <HAL_InitTick>
 8002caa:	4603      	mov	r3, r0
 8002cac:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 8002cae:	7bfb      	ldrb	r3, [r7, #15]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d060      	beq.n	8002d76 <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8002cb4:	7bfb      	ldrb	r3, [r7, #15]
 8002cb6:	f000 bc27 	b.w	8003508 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	69db      	ldr	r3, [r3, #28]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d039      	beq.n	8002d36 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002cc2:	4b4a      	ldr	r3, [pc, #296]	; (8002dec <HAL_RCC_OscConfig+0x27c>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a49      	ldr	r2, [pc, #292]	; (8002dec <HAL_RCC_OscConfig+0x27c>)
 8002cc8:	f043 0301 	orr.w	r3, r3, #1
 8002ccc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002cce:	f7fe fae7 	bl	80012a0 <HAL_GetTick>
 8002cd2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002cd4:	e00f      	b.n	8002cf6 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002cd6:	f7fe fae3 	bl	80012a0 <HAL_GetTick>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	1ad3      	subs	r3, r2, r3
 8002ce0:	2b02      	cmp	r3, #2
 8002ce2:	d908      	bls.n	8002cf6 <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ce4:	4b41      	ldr	r3, [pc, #260]	; (8002dec <HAL_RCC_OscConfig+0x27c>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0302 	and.w	r3, r3, #2
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d102      	bne.n	8002cf6 <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	f000 bc09 	b.w	8003508 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002cf6:	4b3d      	ldr	r3, [pc, #244]	; (8002dec <HAL_RCC_OscConfig+0x27c>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0302 	and.w	r3, r3, #2
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d0e9      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d02:	4b3a      	ldr	r3, [pc, #232]	; (8002dec <HAL_RCC_OscConfig+0x27c>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a39      	ldr	r2, [pc, #228]	; (8002dec <HAL_RCC_OscConfig+0x27c>)
 8002d08:	f043 0308 	orr.w	r3, r3, #8
 8002d0c:	6013      	str	r3, [r2, #0]
 8002d0e:	4b37      	ldr	r3, [pc, #220]	; (8002dec <HAL_RCC_OscConfig+0x27c>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1a:	4934      	ldr	r1, [pc, #208]	; (8002dec <HAL_RCC_OscConfig+0x27c>)
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d20:	4b32      	ldr	r3, [pc, #200]	; (8002dec <HAL_RCC_OscConfig+0x27c>)
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6a1b      	ldr	r3, [r3, #32]
 8002d2c:	021b      	lsls	r3, r3, #8
 8002d2e:	492f      	ldr	r1, [pc, #188]	; (8002dec <HAL_RCC_OscConfig+0x27c>)
 8002d30:	4313      	orrs	r3, r2
 8002d32:	604b      	str	r3, [r1, #4]
 8002d34:	e020      	b.n	8002d78 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002d36:	4b2d      	ldr	r3, [pc, #180]	; (8002dec <HAL_RCC_OscConfig+0x27c>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a2c      	ldr	r2, [pc, #176]	; (8002dec <HAL_RCC_OscConfig+0x27c>)
 8002d3c:	f023 0301 	bic.w	r3, r3, #1
 8002d40:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002d42:	f7fe faad 	bl	80012a0 <HAL_GetTick>
 8002d46:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002d48:	e00e      	b.n	8002d68 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d4a:	f7fe faa9 	bl	80012a0 <HAL_GetTick>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d907      	bls.n	8002d68 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002d58:	4b24      	ldr	r3, [pc, #144]	; (8002dec <HAL_RCC_OscConfig+0x27c>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0302 	and.w	r3, r3, #2
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d001      	beq.n	8002d68 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 8002d64:	2303      	movs	r3, #3
 8002d66:	e3cf      	b.n	8003508 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002d68:	4b20      	ldr	r3, [pc, #128]	; (8002dec <HAL_RCC_OscConfig+0x27c>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0302 	and.w	r3, r3, #2
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d1ea      	bne.n	8002d4a <HAL_RCC_OscConfig+0x1da>
 8002d74:	e000      	b.n	8002d78 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d76:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0301 	and.w	r3, r3, #1
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d07e      	beq.n	8002e82 <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002d84:	69bb      	ldr	r3, [r7, #24]
 8002d86:	2b08      	cmp	r3, #8
 8002d88:	d005      	beq.n	8002d96 <HAL_RCC_OscConfig+0x226>
 8002d8a:	69bb      	ldr	r3, [r7, #24]
 8002d8c:	2b0c      	cmp	r3, #12
 8002d8e:	d10e      	bne.n	8002dae <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	2b03      	cmp	r3, #3
 8002d94:	d10b      	bne.n	8002dae <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d96:	4b15      	ldr	r3, [pc, #84]	; (8002dec <HAL_RCC_OscConfig+0x27c>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d06e      	beq.n	8002e80 <HAL_RCC_OscConfig+0x310>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d16a      	bne.n	8002e80 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e3ac      	b.n	8003508 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002db6:	d106      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x256>
 8002db8:	4b0c      	ldr	r3, [pc, #48]	; (8002dec <HAL_RCC_OscConfig+0x27c>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a0b      	ldr	r2, [pc, #44]	; (8002dec <HAL_RCC_OscConfig+0x27c>)
 8002dbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dc2:	6013      	str	r3, [r2, #0]
 8002dc4:	e024      	b.n	8002e10 <HAL_RCC_OscConfig+0x2a0>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002dce:	d113      	bne.n	8002df8 <HAL_RCC_OscConfig+0x288>
 8002dd0:	4b06      	ldr	r3, [pc, #24]	; (8002dec <HAL_RCC_OscConfig+0x27c>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a05      	ldr	r2, [pc, #20]	; (8002dec <HAL_RCC_OscConfig+0x27c>)
 8002dd6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dda:	6013      	str	r3, [r2, #0]
 8002ddc:	4b03      	ldr	r3, [pc, #12]	; (8002dec <HAL_RCC_OscConfig+0x27c>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a02      	ldr	r2, [pc, #8]	; (8002dec <HAL_RCC_OscConfig+0x27c>)
 8002de2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002de6:	6013      	str	r3, [r2, #0]
 8002de8:	e012      	b.n	8002e10 <HAL_RCC_OscConfig+0x2a0>
 8002dea:	bf00      	nop
 8002dec:	40021000 	.word	0x40021000
 8002df0:	20000000 	.word	0x20000000
 8002df4:	20000004 	.word	0x20000004
 8002df8:	4b8b      	ldr	r3, [pc, #556]	; (8003028 <HAL_RCC_OscConfig+0x4b8>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a8a      	ldr	r2, [pc, #552]	; (8003028 <HAL_RCC_OscConfig+0x4b8>)
 8002dfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e02:	6013      	str	r3, [r2, #0]
 8002e04:	4b88      	ldr	r3, [pc, #544]	; (8003028 <HAL_RCC_OscConfig+0x4b8>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a87      	ldr	r2, [pc, #540]	; (8003028 <HAL_RCC_OscConfig+0x4b8>)
 8002e0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d019      	beq.n	8002e4c <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e18:	f7fe fa42 	bl	80012a0 <HAL_GetTick>
 8002e1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e1e:	e00e      	b.n	8002e3e <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e20:	f7fe fa3e 	bl	80012a0 <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	2b64      	cmp	r3, #100	; 0x64
 8002e2c:	d907      	bls.n	8002e3e <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e2e:	4b7e      	ldr	r3, [pc, #504]	; (8003028 <HAL_RCC_OscConfig+0x4b8>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d101      	bne.n	8002e3e <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e364      	b.n	8003508 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e3e:	4b7a      	ldr	r3, [pc, #488]	; (8003028 <HAL_RCC_OscConfig+0x4b8>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d0ea      	beq.n	8002e20 <HAL_RCC_OscConfig+0x2b0>
 8002e4a:	e01a      	b.n	8002e82 <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e4c:	f7fe fa28 	bl	80012a0 <HAL_GetTick>
 8002e50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e52:	e00e      	b.n	8002e72 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e54:	f7fe fa24 	bl	80012a0 <HAL_GetTick>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	2b64      	cmp	r3, #100	; 0x64
 8002e60:	d907      	bls.n	8002e72 <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e62:	4b71      	ldr	r3, [pc, #452]	; (8003028 <HAL_RCC_OscConfig+0x4b8>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d001      	beq.n	8002e72 <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e34a      	b.n	8003508 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e72:	4b6d      	ldr	r3, [pc, #436]	; (8003028 <HAL_RCC_OscConfig+0x4b8>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d1ea      	bne.n	8002e54 <HAL_RCC_OscConfig+0x2e4>
 8002e7e:	e000      	b.n	8002e82 <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0302 	and.w	r3, r3, #2
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d06c      	beq.n	8002f68 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002e8e:	69bb      	ldr	r3, [r7, #24]
 8002e90:	2b04      	cmp	r3, #4
 8002e92:	d005      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x330>
 8002e94:	69bb      	ldr	r3, [r7, #24]
 8002e96:	2b0c      	cmp	r3, #12
 8002e98:	d119      	bne.n	8002ece <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d116      	bne.n	8002ece <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ea0:	4b61      	ldr	r3, [pc, #388]	; (8003028 <HAL_RCC_OscConfig+0x4b8>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d005      	beq.n	8002eb8 <HAL_RCC_OscConfig+0x348>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d101      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e327      	b.n	8003508 <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eb8:	4b5b      	ldr	r3, [pc, #364]	; (8003028 <HAL_RCC_OscConfig+0x4b8>)
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	691b      	ldr	r3, [r3, #16]
 8002ec4:	061b      	lsls	r3, r3, #24
 8002ec6:	4958      	ldr	r1, [pc, #352]	; (8003028 <HAL_RCC_OscConfig+0x4b8>)
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ecc:	e04c      	b.n	8002f68 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	68db      	ldr	r3, [r3, #12]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d029      	beq.n	8002f2a <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ed6:	4b54      	ldr	r3, [pc, #336]	; (8003028 <HAL_RCC_OscConfig+0x4b8>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a53      	ldr	r2, [pc, #332]	; (8003028 <HAL_RCC_OscConfig+0x4b8>)
 8002edc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ee0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee2:	f7fe f9dd 	bl	80012a0 <HAL_GetTick>
 8002ee6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ee8:	e00e      	b.n	8002f08 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002eea:	f7fe f9d9 	bl	80012a0 <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	d907      	bls.n	8002f08 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ef8:	4b4b      	ldr	r3, [pc, #300]	; (8003028 <HAL_RCC_OscConfig+0x4b8>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d101      	bne.n	8002f08 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 8002f04:	2303      	movs	r3, #3
 8002f06:	e2ff      	b.n	8003508 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f08:	4b47      	ldr	r3, [pc, #284]	; (8003028 <HAL_RCC_OscConfig+0x4b8>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d0ea      	beq.n	8002eea <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f14:	4b44      	ldr	r3, [pc, #272]	; (8003028 <HAL_RCC_OscConfig+0x4b8>)
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	691b      	ldr	r3, [r3, #16]
 8002f20:	061b      	lsls	r3, r3, #24
 8002f22:	4941      	ldr	r1, [pc, #260]	; (8003028 <HAL_RCC_OscConfig+0x4b8>)
 8002f24:	4313      	orrs	r3, r2
 8002f26:	604b      	str	r3, [r1, #4]
 8002f28:	e01e      	b.n	8002f68 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f2a:	4b3f      	ldr	r3, [pc, #252]	; (8003028 <HAL_RCC_OscConfig+0x4b8>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a3e      	ldr	r2, [pc, #248]	; (8003028 <HAL_RCC_OscConfig+0x4b8>)
 8002f30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f36:	f7fe f9b3 	bl	80012a0 <HAL_GetTick>
 8002f3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f3c:	e00e      	b.n	8002f5c <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f3e:	f7fe f9af 	bl	80012a0 <HAL_GetTick>
 8002f42:	4602      	mov	r2, r0
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	2b02      	cmp	r3, #2
 8002f4a:	d907      	bls.n	8002f5c <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f4c:	4b36      	ldr	r3, [pc, #216]	; (8003028 <HAL_RCC_OscConfig+0x4b8>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d001      	beq.n	8002f5c <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 8002f58:	2303      	movs	r3, #3
 8002f5a:	e2d5      	b.n	8003508 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f5c:	4b32      	ldr	r3, [pc, #200]	; (8003028 <HAL_RCC_OscConfig+0x4b8>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d1ea      	bne.n	8002f3e <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0308 	and.w	r3, r3, #8
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d062      	beq.n	800303a <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	695b      	ldr	r3, [r3, #20]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d038      	beq.n	8002fee <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	699b      	ldr	r3, [r3, #24]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d108      	bne.n	8002f96 <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8002f84:	4b28      	ldr	r3, [pc, #160]	; (8003028 <HAL_RCC_OscConfig+0x4b8>)
 8002f86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f8a:	4a27      	ldr	r2, [pc, #156]	; (8003028 <HAL_RCC_OscConfig+0x4b8>)
 8002f8c:	f023 0310 	bic.w	r3, r3, #16
 8002f90:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002f94:	e007      	b.n	8002fa6 <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8002f96:	4b24      	ldr	r3, [pc, #144]	; (8003028 <HAL_RCC_OscConfig+0x4b8>)
 8002f98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f9c:	4a22      	ldr	r2, [pc, #136]	; (8003028 <HAL_RCC_OscConfig+0x4b8>)
 8002f9e:	f043 0310 	orr.w	r3, r3, #16
 8002fa2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fa6:	4b20      	ldr	r3, [pc, #128]	; (8003028 <HAL_RCC_OscConfig+0x4b8>)
 8002fa8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fac:	4a1e      	ldr	r2, [pc, #120]	; (8003028 <HAL_RCC_OscConfig+0x4b8>)
 8002fae:	f043 0301 	orr.w	r3, r3, #1
 8002fb2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fb6:	f7fe f973 	bl	80012a0 <HAL_GetTick>
 8002fba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002fbc:	e00f      	b.n	8002fde <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fbe:	f7fe f96f 	bl	80012a0 <HAL_GetTick>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	2b07      	cmp	r3, #7
 8002fca:	d908      	bls.n	8002fde <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002fcc:	4b16      	ldr	r3, [pc, #88]	; (8003028 <HAL_RCC_OscConfig+0x4b8>)
 8002fce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fd2:	f003 0302 	and.w	r3, r3, #2
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d101      	bne.n	8002fde <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e294      	b.n	8003508 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002fde:	4b12      	ldr	r3, [pc, #72]	; (8003028 <HAL_RCC_OscConfig+0x4b8>)
 8002fe0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fe4:	f003 0302 	and.w	r3, r3, #2
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d0e8      	beq.n	8002fbe <HAL_RCC_OscConfig+0x44e>
 8002fec:	e025      	b.n	800303a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fee:	4b0e      	ldr	r3, [pc, #56]	; (8003028 <HAL_RCC_OscConfig+0x4b8>)
 8002ff0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ff4:	4a0c      	ldr	r2, [pc, #48]	; (8003028 <HAL_RCC_OscConfig+0x4b8>)
 8002ff6:	f023 0301 	bic.w	r3, r3, #1
 8002ffa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ffe:	f7fe f94f 	bl	80012a0 <HAL_GetTick>
 8003002:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003004:	e012      	b.n	800302c <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003006:	f7fe f94b 	bl	80012a0 <HAL_GetTick>
 800300a:	4602      	mov	r2, r0
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	2b07      	cmp	r3, #7
 8003012:	d90b      	bls.n	800302c <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003014:	4b04      	ldr	r3, [pc, #16]	; (8003028 <HAL_RCC_OscConfig+0x4b8>)
 8003016:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800301a:	f003 0302 	and.w	r3, r3, #2
 800301e:	2b00      	cmp	r3, #0
 8003020:	d004      	beq.n	800302c <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8003022:	2303      	movs	r3, #3
 8003024:	e270      	b.n	8003508 <HAL_RCC_OscConfig+0x998>
 8003026:	bf00      	nop
 8003028:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800302c:	4ba8      	ldr	r3, [pc, #672]	; (80032d0 <HAL_RCC_OscConfig+0x760>)
 800302e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003032:	f003 0302 	and.w	r3, r3, #2
 8003036:	2b00      	cmp	r3, #0
 8003038:	d1e5      	bne.n	8003006 <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0304 	and.w	r3, r3, #4
 8003042:	2b00      	cmp	r3, #0
 8003044:	f000 812d 	beq.w	80032a2 <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003048:	2300      	movs	r3, #0
 800304a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800304c:	4ba0      	ldr	r3, [pc, #640]	; (80032d0 <HAL_RCC_OscConfig+0x760>)
 800304e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003050:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003054:	2b00      	cmp	r3, #0
 8003056:	d10d      	bne.n	8003074 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003058:	4b9d      	ldr	r3, [pc, #628]	; (80032d0 <HAL_RCC_OscConfig+0x760>)
 800305a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800305c:	4a9c      	ldr	r2, [pc, #624]	; (80032d0 <HAL_RCC_OscConfig+0x760>)
 800305e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003062:	6593      	str	r3, [r2, #88]	; 0x58
 8003064:	4b9a      	ldr	r3, [pc, #616]	; (80032d0 <HAL_RCC_OscConfig+0x760>)
 8003066:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003068:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800306c:	60bb      	str	r3, [r7, #8]
 800306e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003070:	2301      	movs	r3, #1
 8003072:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003074:	4b97      	ldr	r3, [pc, #604]	; (80032d4 <HAL_RCC_OscConfig+0x764>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800307c:	2b00      	cmp	r3, #0
 800307e:	d11e      	bne.n	80030be <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003080:	4b94      	ldr	r3, [pc, #592]	; (80032d4 <HAL_RCC_OscConfig+0x764>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a93      	ldr	r2, [pc, #588]	; (80032d4 <HAL_RCC_OscConfig+0x764>)
 8003086:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800308a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800308c:	f7fe f908 	bl	80012a0 <HAL_GetTick>
 8003090:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003092:	e00e      	b.n	80030b2 <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003094:	f7fe f904 	bl	80012a0 <HAL_GetTick>
 8003098:	4602      	mov	r2, r0
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	2b02      	cmp	r3, #2
 80030a0:	d907      	bls.n	80030b2 <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030a2:	4b8c      	ldr	r3, [pc, #560]	; (80032d4 <HAL_RCC_OscConfig+0x764>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d101      	bne.n	80030b2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e22a      	b.n	8003508 <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030b2:	4b88      	ldr	r3, [pc, #544]	; (80032d4 <HAL_RCC_OscConfig+0x764>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d0ea      	beq.n	8003094 <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	f003 0301 	and.w	r3, r3, #1
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d01f      	beq.n	800310a <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	f003 0304 	and.w	r3, r3, #4
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d010      	beq.n	80030f8 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80030d6:	4b7e      	ldr	r3, [pc, #504]	; (80032d0 <HAL_RCC_OscConfig+0x760>)
 80030d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030dc:	4a7c      	ldr	r2, [pc, #496]	; (80032d0 <HAL_RCC_OscConfig+0x760>)
 80030de:	f043 0304 	orr.w	r3, r3, #4
 80030e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80030e6:	4b7a      	ldr	r3, [pc, #488]	; (80032d0 <HAL_RCC_OscConfig+0x760>)
 80030e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ec:	4a78      	ldr	r2, [pc, #480]	; (80032d0 <HAL_RCC_OscConfig+0x760>)
 80030ee:	f043 0301 	orr.w	r3, r3, #1
 80030f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030f6:	e018      	b.n	800312a <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80030f8:	4b75      	ldr	r3, [pc, #468]	; (80032d0 <HAL_RCC_OscConfig+0x760>)
 80030fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030fe:	4a74      	ldr	r2, [pc, #464]	; (80032d0 <HAL_RCC_OscConfig+0x760>)
 8003100:	f043 0301 	orr.w	r3, r3, #1
 8003104:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003108:	e00f      	b.n	800312a <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800310a:	4b71      	ldr	r3, [pc, #452]	; (80032d0 <HAL_RCC_OscConfig+0x760>)
 800310c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003110:	4a6f      	ldr	r2, [pc, #444]	; (80032d0 <HAL_RCC_OscConfig+0x760>)
 8003112:	f023 0301 	bic.w	r3, r3, #1
 8003116:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800311a:	4b6d      	ldr	r3, [pc, #436]	; (80032d0 <HAL_RCC_OscConfig+0x760>)
 800311c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003120:	4a6b      	ldr	r2, [pc, #428]	; (80032d0 <HAL_RCC_OscConfig+0x760>)
 8003122:	f023 0304 	bic.w	r3, r3, #4
 8003126:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d068      	beq.n	8003204 <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003132:	f7fe f8b5 	bl	80012a0 <HAL_GetTick>
 8003136:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003138:	e011      	b.n	800315e <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800313a:	f7fe f8b1 	bl	80012a0 <HAL_GetTick>
 800313e:	4602      	mov	r2, r0
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	1ad3      	subs	r3, r2, r3
 8003144:	f241 3288 	movw	r2, #5000	; 0x1388
 8003148:	4293      	cmp	r3, r2
 800314a:	d908      	bls.n	800315e <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800314c:	4b60      	ldr	r3, [pc, #384]	; (80032d0 <HAL_RCC_OscConfig+0x760>)
 800314e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003152:	f003 0302 	and.w	r3, r3, #2
 8003156:	2b00      	cmp	r3, #0
 8003158:	d101      	bne.n	800315e <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	e1d4      	b.n	8003508 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800315e:	4b5c      	ldr	r3, [pc, #368]	; (80032d0 <HAL_RCC_OscConfig+0x760>)
 8003160:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003164:	f003 0302 	and.w	r3, r3, #2
 8003168:	2b00      	cmp	r3, #0
 800316a:	d0e6      	beq.n	800313a <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003174:	2b00      	cmp	r3, #0
 8003176:	d022      	beq.n	80031be <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003178:	4b55      	ldr	r3, [pc, #340]	; (80032d0 <HAL_RCC_OscConfig+0x760>)
 800317a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800317e:	4a54      	ldr	r2, [pc, #336]	; (80032d0 <HAL_RCC_OscConfig+0x760>)
 8003180:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003184:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003188:	e011      	b.n	80031ae <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800318a:	f7fe f889 	bl	80012a0 <HAL_GetTick>
 800318e:	4602      	mov	r2, r0
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	f241 3288 	movw	r2, #5000	; 0x1388
 8003198:	4293      	cmp	r3, r2
 800319a:	d908      	bls.n	80031ae <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800319c:	4b4c      	ldr	r3, [pc, #304]	; (80032d0 <HAL_RCC_OscConfig+0x760>)
 800319e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d101      	bne.n	80031ae <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e1ac      	b.n	8003508 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80031ae:	4b48      	ldr	r3, [pc, #288]	; (80032d0 <HAL_RCC_OscConfig+0x760>)
 80031b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d0e6      	beq.n	800318a <HAL_RCC_OscConfig+0x61a>
 80031bc:	e068      	b.n	8003290 <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80031be:	4b44      	ldr	r3, [pc, #272]	; (80032d0 <HAL_RCC_OscConfig+0x760>)
 80031c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031c4:	4a42      	ldr	r2, [pc, #264]	; (80032d0 <HAL_RCC_OscConfig+0x760>)
 80031c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80031ce:	e011      	b.n	80031f4 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031d0:	f7fe f866 	bl	80012a0 <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	f241 3288 	movw	r2, #5000	; 0x1388
 80031de:	4293      	cmp	r3, r2
 80031e0:	d908      	bls.n	80031f4 <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80031e2:	4b3b      	ldr	r3, [pc, #236]	; (80032d0 <HAL_RCC_OscConfig+0x760>)
 80031e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d001      	beq.n	80031f4 <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 80031f0:	2303      	movs	r3, #3
 80031f2:	e189      	b.n	8003508 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80031f4:	4b36      	ldr	r3, [pc, #216]	; (80032d0 <HAL_RCC_OscConfig+0x760>)
 80031f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d1e6      	bne.n	80031d0 <HAL_RCC_OscConfig+0x660>
 8003202:	e045      	b.n	8003290 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003204:	f7fe f84c 	bl	80012a0 <HAL_GetTick>
 8003208:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800320a:	e011      	b.n	8003230 <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800320c:	f7fe f848 	bl	80012a0 <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	f241 3288 	movw	r2, #5000	; 0x1388
 800321a:	4293      	cmp	r3, r2
 800321c:	d908      	bls.n	8003230 <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800321e:	4b2c      	ldr	r3, [pc, #176]	; (80032d0 <HAL_RCC_OscConfig+0x760>)
 8003220:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003224:	f003 0302 	and.w	r3, r3, #2
 8003228:	2b00      	cmp	r3, #0
 800322a:	d001      	beq.n	8003230 <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 800322c:	2303      	movs	r3, #3
 800322e:	e16b      	b.n	8003508 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003230:	4b27      	ldr	r3, [pc, #156]	; (80032d0 <HAL_RCC_OscConfig+0x760>)
 8003232:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003236:	f003 0302 	and.w	r3, r3, #2
 800323a:	2b00      	cmp	r3, #0
 800323c:	d1e6      	bne.n	800320c <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800323e:	4b24      	ldr	r3, [pc, #144]	; (80032d0 <HAL_RCC_OscConfig+0x760>)
 8003240:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003244:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003248:	2b00      	cmp	r3, #0
 800324a:	d021      	beq.n	8003290 <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800324c:	4b20      	ldr	r3, [pc, #128]	; (80032d0 <HAL_RCC_OscConfig+0x760>)
 800324e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003252:	4a1f      	ldr	r2, [pc, #124]	; (80032d0 <HAL_RCC_OscConfig+0x760>)
 8003254:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003258:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800325c:	e011      	b.n	8003282 <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800325e:	f7fe f81f 	bl	80012a0 <HAL_GetTick>
 8003262:	4602      	mov	r2, r0
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	1ad3      	subs	r3, r2, r3
 8003268:	f241 3288 	movw	r2, #5000	; 0x1388
 800326c:	4293      	cmp	r3, r2
 800326e:	d908      	bls.n	8003282 <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003270:	4b17      	ldr	r3, [pc, #92]	; (80032d0 <HAL_RCC_OscConfig+0x760>)
 8003272:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003276:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800327a:	2b00      	cmp	r3, #0
 800327c:	d001      	beq.n	8003282 <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 800327e:	2303      	movs	r3, #3
 8003280:	e142      	b.n	8003508 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003282:	4b13      	ldr	r3, [pc, #76]	; (80032d0 <HAL_RCC_OscConfig+0x760>)
 8003284:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003288:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800328c:	2b00      	cmp	r3, #0
 800328e:	d1e6      	bne.n	800325e <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003290:	7ffb      	ldrb	r3, [r7, #31]
 8003292:	2b01      	cmp	r3, #1
 8003294:	d105      	bne.n	80032a2 <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003296:	4b0e      	ldr	r3, [pc, #56]	; (80032d0 <HAL_RCC_OscConfig+0x760>)
 8003298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800329a:	4a0d      	ldr	r2, [pc, #52]	; (80032d0 <HAL_RCC_OscConfig+0x760>)
 800329c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032a0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0320 	and.w	r3, r3, #32
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d04f      	beq.n	800334e <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d028      	beq.n	8003308 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80032b6:	4b06      	ldr	r3, [pc, #24]	; (80032d0 <HAL_RCC_OscConfig+0x760>)
 80032b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80032bc:	4a04      	ldr	r2, [pc, #16]	; (80032d0 <HAL_RCC_OscConfig+0x760>)
 80032be:	f043 0301 	orr.w	r3, r3, #1
 80032c2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032c6:	f7fd ffeb 	bl	80012a0 <HAL_GetTick>
 80032ca:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80032cc:	e014      	b.n	80032f8 <HAL_RCC_OscConfig+0x788>
 80032ce:	bf00      	nop
 80032d0:	40021000 	.word	0x40021000
 80032d4:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80032d8:	f7fd ffe2 	bl	80012a0 <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	2b02      	cmp	r3, #2
 80032e4:	d908      	bls.n	80032f8 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80032e6:	4b8a      	ldr	r3, [pc, #552]	; (8003510 <HAL_RCC_OscConfig+0x9a0>)
 80032e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80032ec:	f003 0302 	and.w	r3, r3, #2
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d101      	bne.n	80032f8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80032f4:	2303      	movs	r3, #3
 80032f6:	e107      	b.n	8003508 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80032f8:	4b85      	ldr	r3, [pc, #532]	; (8003510 <HAL_RCC_OscConfig+0x9a0>)
 80032fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80032fe:	f003 0302 	and.w	r3, r3, #2
 8003302:	2b00      	cmp	r3, #0
 8003304:	d0e8      	beq.n	80032d8 <HAL_RCC_OscConfig+0x768>
 8003306:	e022      	b.n	800334e <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003308:	4b81      	ldr	r3, [pc, #516]	; (8003510 <HAL_RCC_OscConfig+0x9a0>)
 800330a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800330e:	4a80      	ldr	r2, [pc, #512]	; (8003510 <HAL_RCC_OscConfig+0x9a0>)
 8003310:	f023 0301 	bic.w	r3, r3, #1
 8003314:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003318:	f7fd ffc2 	bl	80012a0 <HAL_GetTick>
 800331c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800331e:	e00f      	b.n	8003340 <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003320:	f7fd ffbe 	bl	80012a0 <HAL_GetTick>
 8003324:	4602      	mov	r2, r0
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	2b02      	cmp	r3, #2
 800332c:	d908      	bls.n	8003340 <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800332e:	4b78      	ldr	r3, [pc, #480]	; (8003510 <HAL_RCC_OscConfig+0x9a0>)
 8003330:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003334:	f003 0302 	and.w	r3, r3, #2
 8003338:	2b00      	cmp	r3, #0
 800333a:	d001      	beq.n	8003340 <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 800333c:	2303      	movs	r3, #3
 800333e:	e0e3      	b.n	8003508 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003340:	4b73      	ldr	r3, [pc, #460]	; (8003510 <HAL_RCC_OscConfig+0x9a0>)
 8003342:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003346:	f003 0302 	and.w	r3, r3, #2
 800334a:	2b00      	cmp	r3, #0
 800334c:	d1e8      	bne.n	8003320 <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003352:	2b00      	cmp	r3, #0
 8003354:	f000 80d7 	beq.w	8003506 <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003358:	4b6d      	ldr	r3, [pc, #436]	; (8003510 <HAL_RCC_OscConfig+0x9a0>)
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	f003 030c 	and.w	r3, r3, #12
 8003360:	2b0c      	cmp	r3, #12
 8003362:	f000 8091 	beq.w	8003488 <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800336a:	2b02      	cmp	r3, #2
 800336c:	d166      	bne.n	800343c <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800336e:	4b68      	ldr	r3, [pc, #416]	; (8003510 <HAL_RCC_OscConfig+0x9a0>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a67      	ldr	r2, [pc, #412]	; (8003510 <HAL_RCC_OscConfig+0x9a0>)
 8003374:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003378:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800337a:	f7fd ff91 	bl	80012a0 <HAL_GetTick>
 800337e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003380:	e00e      	b.n	80033a0 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003382:	f7fd ff8d 	bl	80012a0 <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	2b02      	cmp	r3, #2
 800338e:	d907      	bls.n	80033a0 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003390:	4b5f      	ldr	r3, [pc, #380]	; (8003510 <HAL_RCC_OscConfig+0x9a0>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003398:	2b00      	cmp	r3, #0
 800339a:	d001      	beq.n	80033a0 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 800339c:	2303      	movs	r3, #3
 800339e:	e0b3      	b.n	8003508 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033a0:	4b5b      	ldr	r3, [pc, #364]	; (8003510 <HAL_RCC_OscConfig+0x9a0>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d1ea      	bne.n	8003382 <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033ac:	4b58      	ldr	r3, [pc, #352]	; (8003510 <HAL_RCC_OscConfig+0x9a0>)
 80033ae:	68da      	ldr	r2, [r3, #12]
 80033b0:	4b58      	ldr	r3, [pc, #352]	; (8003514 <HAL_RCC_OscConfig+0x9a4>)
 80033b2:	4013      	ands	r3, r2
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80033bc:	3a01      	subs	r2, #1
 80033be:	0112      	lsls	r2, r2, #4
 80033c0:	4311      	orrs	r1, r2
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80033c6:	0212      	lsls	r2, r2, #8
 80033c8:	4311      	orrs	r1, r2
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80033ce:	0852      	lsrs	r2, r2, #1
 80033d0:	3a01      	subs	r2, #1
 80033d2:	0552      	lsls	r2, r2, #21
 80033d4:	4311      	orrs	r1, r2
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80033da:	0852      	lsrs	r2, r2, #1
 80033dc:	3a01      	subs	r2, #1
 80033de:	0652      	lsls	r2, r2, #25
 80033e0:	4311      	orrs	r1, r2
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80033e6:	06d2      	lsls	r2, r2, #27
 80033e8:	430a      	orrs	r2, r1
 80033ea:	4949      	ldr	r1, [pc, #292]	; (8003510 <HAL_RCC_OscConfig+0x9a0>)
 80033ec:	4313      	orrs	r3, r2
 80033ee:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033f0:	4b47      	ldr	r3, [pc, #284]	; (8003510 <HAL_RCC_OscConfig+0x9a0>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a46      	ldr	r2, [pc, #280]	; (8003510 <HAL_RCC_OscConfig+0x9a0>)
 80033f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033fa:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80033fc:	4b44      	ldr	r3, [pc, #272]	; (8003510 <HAL_RCC_OscConfig+0x9a0>)
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	4a43      	ldr	r2, [pc, #268]	; (8003510 <HAL_RCC_OscConfig+0x9a0>)
 8003402:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003406:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003408:	f7fd ff4a 	bl	80012a0 <HAL_GetTick>
 800340c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800340e:	e00e      	b.n	800342e <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003410:	f7fd ff46 	bl	80012a0 <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	2b02      	cmp	r3, #2
 800341c:	d907      	bls.n	800342e <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800341e:	4b3c      	ldr	r3, [pc, #240]	; (8003510 <HAL_RCC_OscConfig+0x9a0>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d101      	bne.n	800342e <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e06c      	b.n	8003508 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800342e:	4b38      	ldr	r3, [pc, #224]	; (8003510 <HAL_RCC_OscConfig+0x9a0>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d0ea      	beq.n	8003410 <HAL_RCC_OscConfig+0x8a0>
 800343a:	e064      	b.n	8003506 <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800343c:	4b34      	ldr	r3, [pc, #208]	; (8003510 <HAL_RCC_OscConfig+0x9a0>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a33      	ldr	r2, [pc, #204]	; (8003510 <HAL_RCC_OscConfig+0x9a0>)
 8003442:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003446:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003448:	f7fd ff2a 	bl	80012a0 <HAL_GetTick>
 800344c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800344e:	e00e      	b.n	800346e <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003450:	f7fd ff26 	bl	80012a0 <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	2b02      	cmp	r3, #2
 800345c:	d907      	bls.n	800346e <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800345e:	4b2c      	ldr	r3, [pc, #176]	; (8003510 <HAL_RCC_OscConfig+0x9a0>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d001      	beq.n	800346e <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e04c      	b.n	8003508 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800346e:	4b28      	ldr	r3, [pc, #160]	; (8003510 <HAL_RCC_OscConfig+0x9a0>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d1ea      	bne.n	8003450 <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800347a:	4b25      	ldr	r3, [pc, #148]	; (8003510 <HAL_RCC_OscConfig+0x9a0>)
 800347c:	68da      	ldr	r2, [r3, #12]
 800347e:	4924      	ldr	r1, [pc, #144]	; (8003510 <HAL_RCC_OscConfig+0x9a0>)
 8003480:	4b25      	ldr	r3, [pc, #148]	; (8003518 <HAL_RCC_OscConfig+0x9a8>)
 8003482:	4013      	ands	r3, r2
 8003484:	60cb      	str	r3, [r1, #12]
 8003486:	e03e      	b.n	8003506 <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800348c:	2b01      	cmp	r3, #1
 800348e:	d101      	bne.n	8003494 <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e039      	b.n	8003508 <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8003494:	4b1e      	ldr	r3, [pc, #120]	; (8003510 <HAL_RCC_OscConfig+0x9a0>)
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	f003 0203 	and.w	r2, r3, #3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d12c      	bne.n	8003502 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034b2:	3b01      	subs	r3, #1
 80034b4:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d123      	bne.n	8003502 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034c4:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d11b      	bne.n	8003502 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034d4:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d113      	bne.n	8003502 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e4:	085b      	lsrs	r3, r3, #1
 80034e6:	3b01      	subs	r3, #1
 80034e8:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d109      	bne.n	8003502 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034f8:	085b      	lsrs	r3, r3, #1
 80034fa:	3b01      	subs	r3, #1
 80034fc:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034fe:	429a      	cmp	r2, r3
 8003500:	d001      	beq.n	8003506 <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e000      	b.n	8003508 <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 8003506:	2300      	movs	r3, #0
}
 8003508:	4618      	mov	r0, r3
 800350a:	3720      	adds	r7, #32
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}
 8003510:	40021000 	.word	0x40021000
 8003514:	019f800c 	.word	0x019f800c
 8003518:	feeefffc 	.word	0xfeeefffc

0800351c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b086      	sub	sp, #24
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003526:	2300      	movs	r3, #0
 8003528:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d101      	bne.n	8003534 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e11c      	b.n	800376e <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003534:	4b90      	ldr	r3, [pc, #576]	; (8003778 <HAL_RCC_ClockConfig+0x25c>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 030f 	and.w	r3, r3, #15
 800353c:	683a      	ldr	r2, [r7, #0]
 800353e:	429a      	cmp	r2, r3
 8003540:	d910      	bls.n	8003564 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003542:	4b8d      	ldr	r3, [pc, #564]	; (8003778 <HAL_RCC_ClockConfig+0x25c>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f023 020f 	bic.w	r2, r3, #15
 800354a:	498b      	ldr	r1, [pc, #556]	; (8003778 <HAL_RCC_ClockConfig+0x25c>)
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	4313      	orrs	r3, r2
 8003550:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003552:	4b89      	ldr	r3, [pc, #548]	; (8003778 <HAL_RCC_ClockConfig+0x25c>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 030f 	and.w	r3, r3, #15
 800355a:	683a      	ldr	r2, [r7, #0]
 800355c:	429a      	cmp	r2, r3
 800355e:	d001      	beq.n	8003564 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e104      	b.n	800376e <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0302 	and.w	r3, r3, #2
 800356c:	2b00      	cmp	r3, #0
 800356e:	d010      	beq.n	8003592 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	689a      	ldr	r2, [r3, #8]
 8003574:	4b81      	ldr	r3, [pc, #516]	; (800377c <HAL_RCC_ClockConfig+0x260>)
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800357c:	429a      	cmp	r2, r3
 800357e:	d908      	bls.n	8003592 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003580:	4b7e      	ldr	r3, [pc, #504]	; (800377c <HAL_RCC_ClockConfig+0x260>)
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	497b      	ldr	r1, [pc, #492]	; (800377c <HAL_RCC_ClockConfig+0x260>)
 800358e:	4313      	orrs	r3, r2
 8003590:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0301 	and.w	r3, r3, #1
 800359a:	2b00      	cmp	r3, #0
 800359c:	f000 8085 	beq.w	80036aa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	2b03      	cmp	r3, #3
 80035a6:	d11f      	bne.n	80035e8 <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035a8:	4b74      	ldr	r3, [pc, #464]	; (800377c <HAL_RCC_ClockConfig+0x260>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d101      	bne.n	80035b8 <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e0da      	b.n	800376e <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80035b8:	f000 fa26 	bl	8003a08 <RCC_GetSysClockFreqFromPLLSource>
 80035bc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	4a6f      	ldr	r2, [pc, #444]	; (8003780 <HAL_RCC_ClockConfig+0x264>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d947      	bls.n	8003656 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80035c6:	4b6d      	ldr	r3, [pc, #436]	; (800377c <HAL_RCC_ClockConfig+0x260>)
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d141      	bne.n	8003656 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80035d2:	4b6a      	ldr	r3, [pc, #424]	; (800377c <HAL_RCC_ClockConfig+0x260>)
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035da:	4a68      	ldr	r2, [pc, #416]	; (800377c <HAL_RCC_ClockConfig+0x260>)
 80035dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035e0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80035e2:	2380      	movs	r3, #128	; 0x80
 80035e4:	617b      	str	r3, [r7, #20]
 80035e6:	e036      	b.n	8003656 <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	2b02      	cmp	r3, #2
 80035ee:	d107      	bne.n	8003600 <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035f0:	4b62      	ldr	r3, [pc, #392]	; (800377c <HAL_RCC_ClockConfig+0x260>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d115      	bne.n	8003628 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e0b6      	b.n	800376e <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d107      	bne.n	8003618 <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003608:	4b5c      	ldr	r3, [pc, #368]	; (800377c <HAL_RCC_ClockConfig+0x260>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0302 	and.w	r3, r3, #2
 8003610:	2b00      	cmp	r3, #0
 8003612:	d109      	bne.n	8003628 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e0aa      	b.n	800376e <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003618:	4b58      	ldr	r3, [pc, #352]	; (800377c <HAL_RCC_ClockConfig+0x260>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003620:	2b00      	cmp	r3, #0
 8003622:	d101      	bne.n	8003628 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e0a2      	b.n	800376e <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003628:	f000 f8b0 	bl	800378c <HAL_RCC_GetSysClockFreq>
 800362c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	4a53      	ldr	r2, [pc, #332]	; (8003780 <HAL_RCC_ClockConfig+0x264>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d90f      	bls.n	8003656 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003636:	4b51      	ldr	r3, [pc, #324]	; (800377c <HAL_RCC_ClockConfig+0x260>)
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d109      	bne.n	8003656 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003642:	4b4e      	ldr	r3, [pc, #312]	; (800377c <HAL_RCC_ClockConfig+0x260>)
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800364a:	4a4c      	ldr	r2, [pc, #304]	; (800377c <HAL_RCC_ClockConfig+0x260>)
 800364c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003650:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003652:	2380      	movs	r3, #128	; 0x80
 8003654:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003656:	4b49      	ldr	r3, [pc, #292]	; (800377c <HAL_RCC_ClockConfig+0x260>)
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	f023 0203 	bic.w	r2, r3, #3
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	4946      	ldr	r1, [pc, #280]	; (800377c <HAL_RCC_ClockConfig+0x260>)
 8003664:	4313      	orrs	r3, r2
 8003666:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003668:	f7fd fe1a 	bl	80012a0 <HAL_GetTick>
 800366c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800366e:	e013      	b.n	8003698 <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003670:	f7fd fe16 	bl	80012a0 <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	f241 3288 	movw	r2, #5000	; 0x1388
 800367e:	4293      	cmp	r3, r2
 8003680:	d90a      	bls.n	8003698 <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003682:	4b3e      	ldr	r3, [pc, #248]	; (800377c <HAL_RCC_ClockConfig+0x260>)
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	f003 020c 	and.w	r2, r3, #12
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	429a      	cmp	r2, r3
 8003692:	d001      	beq.n	8003698 <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 8003694:	2303      	movs	r3, #3
 8003696:	e06a      	b.n	800376e <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003698:	4b38      	ldr	r3, [pc, #224]	; (800377c <HAL_RCC_ClockConfig+0x260>)
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	f003 020c 	and.w	r2, r3, #12
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d1e2      	bne.n	8003670 <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	2b80      	cmp	r3, #128	; 0x80
 80036ae:	d105      	bne.n	80036bc <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80036b0:	4b32      	ldr	r3, [pc, #200]	; (800377c <HAL_RCC_ClockConfig+0x260>)
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	4a31      	ldr	r2, [pc, #196]	; (800377c <HAL_RCC_ClockConfig+0x260>)
 80036b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80036ba:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 0302 	and.w	r3, r3, #2
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d010      	beq.n	80036ea <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	689a      	ldr	r2, [r3, #8]
 80036cc:	4b2b      	ldr	r3, [pc, #172]	; (800377c <HAL_RCC_ClockConfig+0x260>)
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d208      	bcs.n	80036ea <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036d8:	4b28      	ldr	r3, [pc, #160]	; (800377c <HAL_RCC_ClockConfig+0x260>)
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	4925      	ldr	r1, [pc, #148]	; (800377c <HAL_RCC_ClockConfig+0x260>)
 80036e6:	4313      	orrs	r3, r2
 80036e8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036ea:	4b23      	ldr	r3, [pc, #140]	; (8003778 <HAL_RCC_ClockConfig+0x25c>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 030f 	and.w	r3, r3, #15
 80036f2:	683a      	ldr	r2, [r7, #0]
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d210      	bcs.n	800371a <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036f8:	4b1f      	ldr	r3, [pc, #124]	; (8003778 <HAL_RCC_ClockConfig+0x25c>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f023 020f 	bic.w	r2, r3, #15
 8003700:	491d      	ldr	r1, [pc, #116]	; (8003778 <HAL_RCC_ClockConfig+0x25c>)
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	4313      	orrs	r3, r2
 8003706:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003708:	4b1b      	ldr	r3, [pc, #108]	; (8003778 <HAL_RCC_ClockConfig+0x25c>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 030f 	and.w	r3, r3, #15
 8003710:	683a      	ldr	r2, [r7, #0]
 8003712:	429a      	cmp	r2, r3
 8003714:	d001      	beq.n	800371a <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e029      	b.n	800376e <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0304 	and.w	r3, r3, #4
 8003722:	2b00      	cmp	r3, #0
 8003724:	d008      	beq.n	8003738 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003726:	4b15      	ldr	r3, [pc, #84]	; (800377c <HAL_RCC_ClockConfig+0x260>)
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	4912      	ldr	r1, [pc, #72]	; (800377c <HAL_RCC_ClockConfig+0x260>)
 8003734:	4313      	orrs	r3, r2
 8003736:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0308 	and.w	r3, r3, #8
 8003740:	2b00      	cmp	r3, #0
 8003742:	d009      	beq.n	8003758 <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003744:	4b0d      	ldr	r3, [pc, #52]	; (800377c <HAL_RCC_ClockConfig+0x260>)
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	691b      	ldr	r3, [r3, #16]
 8003750:	00db      	lsls	r3, r3, #3
 8003752:	490a      	ldr	r1, [pc, #40]	; (800377c <HAL_RCC_ClockConfig+0x260>)
 8003754:	4313      	orrs	r3, r2
 8003756:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003758:	f000 f8b6 	bl	80038c8 <HAL_RCC_GetHCLKFreq>
 800375c:	4603      	mov	r3, r0
 800375e:	4a09      	ldr	r2, [pc, #36]	; (8003784 <HAL_RCC_ClockConfig+0x268>)
 8003760:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003762:	4b09      	ldr	r3, [pc, #36]	; (8003788 <HAL_RCC_ClockConfig+0x26c>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4618      	mov	r0, r3
 8003768:	f7fd fd4a 	bl	8001200 <HAL_InitTick>
 800376c:	4603      	mov	r3, r0
}
 800376e:	4618      	mov	r0, r3
 8003770:	3718      	adds	r7, #24
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	40022000 	.word	0x40022000
 800377c:	40021000 	.word	0x40021000
 8003780:	04c4b400 	.word	0x04c4b400
 8003784:	20000000 	.word	0x20000000
 8003788:	20000004 	.word	0x20000004

0800378c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800378c:	b480      	push	{r7}
 800378e:	b089      	sub	sp, #36	; 0x24
 8003790:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003792:	2300      	movs	r3, #0
 8003794:	61fb      	str	r3, [r7, #28]
 8003796:	2300      	movs	r3, #0
 8003798:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800379a:	4b47      	ldr	r3, [pc, #284]	; (80038b8 <HAL_RCC_GetSysClockFreq+0x12c>)
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	f003 030c 	and.w	r3, r3, #12
 80037a2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037a4:	4b44      	ldr	r3, [pc, #272]	; (80038b8 <HAL_RCC_GetSysClockFreq+0x12c>)
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	f003 0303 	and.w	r3, r3, #3
 80037ac:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d005      	beq.n	80037c0 <HAL_RCC_GetSysClockFreq+0x34>
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	2b0c      	cmp	r3, #12
 80037b8:	d121      	bne.n	80037fe <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d11e      	bne.n	80037fe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80037c0:	4b3d      	ldr	r3, [pc, #244]	; (80038b8 <HAL_RCC_GetSysClockFreq+0x12c>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 0308 	and.w	r3, r3, #8
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d107      	bne.n	80037dc <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80037cc:	4b3a      	ldr	r3, [pc, #232]	; (80038b8 <HAL_RCC_GetSysClockFreq+0x12c>)
 80037ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037d2:	0a1b      	lsrs	r3, r3, #8
 80037d4:	f003 030f 	and.w	r3, r3, #15
 80037d8:	61fb      	str	r3, [r7, #28]
 80037da:	e005      	b.n	80037e8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80037dc:	4b36      	ldr	r3, [pc, #216]	; (80038b8 <HAL_RCC_GetSysClockFreq+0x12c>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	091b      	lsrs	r3, r3, #4
 80037e2:	f003 030f 	and.w	r3, r3, #15
 80037e6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 80037e8:	4a34      	ldr	r2, [pc, #208]	; (80038bc <HAL_RCC_GetSysClockFreq+0x130>)
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037f0:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d10d      	bne.n	8003814 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80037fc:	e00a      	b.n	8003814 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	2b04      	cmp	r3, #4
 8003802:	d102      	bne.n	800380a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003804:	4b2e      	ldr	r3, [pc, #184]	; (80038c0 <HAL_RCC_GetSysClockFreq+0x134>)
 8003806:	61bb      	str	r3, [r7, #24]
 8003808:	e004      	b.n	8003814 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	2b08      	cmp	r3, #8
 800380e:	d101      	bne.n	8003814 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003810:	4b2c      	ldr	r3, [pc, #176]	; (80038c4 <HAL_RCC_GetSysClockFreq+0x138>)
 8003812:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	2b0c      	cmp	r3, #12
 8003818:	d146      	bne.n	80038a8 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800381a:	4b27      	ldr	r3, [pc, #156]	; (80038b8 <HAL_RCC_GetSysClockFreq+0x12c>)
 800381c:	68db      	ldr	r3, [r3, #12]
 800381e:	f003 0303 	and.w	r3, r3, #3
 8003822:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003824:	4b24      	ldr	r3, [pc, #144]	; (80038b8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	091b      	lsrs	r3, r3, #4
 800382a:	f003 030f 	and.w	r3, r3, #15
 800382e:	3301      	adds	r3, #1
 8003830:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	2b02      	cmp	r3, #2
 8003836:	d003      	beq.n	8003840 <HAL_RCC_GetSysClockFreq+0xb4>
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	2b03      	cmp	r3, #3
 800383c:	d00d      	beq.n	800385a <HAL_RCC_GetSysClockFreq+0xce>
 800383e:	e019      	b.n	8003874 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003840:	4a1f      	ldr	r2, [pc, #124]	; (80038c0 <HAL_RCC_GetSysClockFreq+0x134>)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	fbb2 f3f3 	udiv	r3, r2, r3
 8003848:	4a1b      	ldr	r2, [pc, #108]	; (80038b8 <HAL_RCC_GetSysClockFreq+0x12c>)
 800384a:	68d2      	ldr	r2, [r2, #12]
 800384c:	0a12      	lsrs	r2, r2, #8
 800384e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003852:	fb02 f303 	mul.w	r3, r2, r3
 8003856:	617b      	str	r3, [r7, #20]
        break;
 8003858:	e019      	b.n	800388e <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800385a:	4a1a      	ldr	r2, [pc, #104]	; (80038c4 <HAL_RCC_GetSysClockFreq+0x138>)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003862:	4a15      	ldr	r2, [pc, #84]	; (80038b8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003864:	68d2      	ldr	r2, [r2, #12]
 8003866:	0a12      	lsrs	r2, r2, #8
 8003868:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800386c:	fb02 f303 	mul.w	r3, r2, r3
 8003870:	617b      	str	r3, [r7, #20]
        break;
 8003872:	e00c      	b.n	800388e <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003874:	69fa      	ldr	r2, [r7, #28]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	fbb2 f3f3 	udiv	r3, r2, r3
 800387c:	4a0e      	ldr	r2, [pc, #56]	; (80038b8 <HAL_RCC_GetSysClockFreq+0x12c>)
 800387e:	68d2      	ldr	r2, [r2, #12]
 8003880:	0a12      	lsrs	r2, r2, #8
 8003882:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003886:	fb02 f303 	mul.w	r3, r2, r3
 800388a:	617b      	str	r3, [r7, #20]
        break;
 800388c:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 800388e:	4b0a      	ldr	r3, [pc, #40]	; (80038b8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	0e5b      	lsrs	r3, r3, #25
 8003894:	f003 0303 	and.w	r3, r3, #3
 8003898:	3301      	adds	r3, #1
 800389a:	005b      	lsls	r3, r3, #1
 800389c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800389e:	697a      	ldr	r2, [r7, #20]
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80038a6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80038a8:	69bb      	ldr	r3, [r7, #24]
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3724      	adds	r7, #36	; 0x24
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr
 80038b6:	bf00      	nop
 80038b8:	40021000 	.word	0x40021000
 80038bc:	080058cc 	.word	0x080058cc
 80038c0:	00f42400 	.word	0x00f42400
 80038c4:	007a1200 	.word	0x007a1200

080038c8 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 80038cc:	f7ff ff5e 	bl	800378c <HAL_RCC_GetSysClockFreq>
 80038d0:	4602      	mov	r2, r0
 80038d2:	4b05      	ldr	r3, [pc, #20]	; (80038e8 <HAL_RCC_GetHCLKFreq+0x20>)
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	091b      	lsrs	r3, r3, #4
 80038d8:	f003 030f 	and.w	r3, r3, #15
 80038dc:	4903      	ldr	r1, [pc, #12]	; (80038ec <HAL_RCC_GetHCLKFreq+0x24>)
 80038de:	5ccb      	ldrb	r3, [r1, r3]
 80038e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	40021000 	.word	0x40021000
 80038ec:	080058b4 	.word	0x080058b4

080038f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80038f4:	f7ff ffe8 	bl	80038c8 <HAL_RCC_GetHCLKFreq>
 80038f8:	4602      	mov	r2, r0
 80038fa:	4b05      	ldr	r3, [pc, #20]	; (8003910 <HAL_RCC_GetPCLK1Freq+0x20>)
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	0a1b      	lsrs	r3, r3, #8
 8003900:	f003 0307 	and.w	r3, r3, #7
 8003904:	4903      	ldr	r1, [pc, #12]	; (8003914 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003906:	5ccb      	ldrb	r3, [r1, r3]
 8003908:	fa22 f303 	lsr.w	r3, r2, r3
}
 800390c:	4618      	mov	r0, r3
 800390e:	bd80      	pop	{r7, pc}
 8003910:	40021000 	.word	0x40021000
 8003914:	080058c4 	.word	0x080058c4

08003918 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800391c:	f7ff ffd4 	bl	80038c8 <HAL_RCC_GetHCLKFreq>
 8003920:	4602      	mov	r2, r0
 8003922:	4b05      	ldr	r3, [pc, #20]	; (8003938 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	0adb      	lsrs	r3, r3, #11
 8003928:	f003 0307 	and.w	r3, r3, #7
 800392c:	4903      	ldr	r1, [pc, #12]	; (800393c <HAL_RCC_GetPCLK2Freq+0x24>)
 800392e:	5ccb      	ldrb	r3, [r1, r3]
 8003930:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003934:	4618      	mov	r0, r3
 8003936:	bd80      	pop	{r7, pc}
 8003938:	40021000 	.word	0x40021000
 800393c:	080058c4 	.word	0x080058c4

08003940 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b086      	sub	sp, #24
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003948:	2300      	movs	r3, #0
 800394a:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 800394c:	4b2c      	ldr	r3, [pc, #176]	; (8003a00 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800394e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003950:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d003      	beq.n	8003960 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003958:	f7ff f86c 	bl	8002a34 <HAL_PWREx_GetVoltageRange>
 800395c:	6138      	str	r0, [r7, #16]
 800395e:	e014      	b.n	800398a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003960:	4b27      	ldr	r3, [pc, #156]	; (8003a00 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003964:	4a26      	ldr	r2, [pc, #152]	; (8003a00 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003966:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800396a:	6593      	str	r3, [r2, #88]	; 0x58
 800396c:	4b24      	ldr	r3, [pc, #144]	; (8003a00 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800396e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003970:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003974:	60fb      	str	r3, [r7, #12]
 8003976:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003978:	f7ff f85c 	bl	8002a34 <HAL_PWREx_GetVoltageRange>
 800397c:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 800397e:	4b20      	ldr	r3, [pc, #128]	; (8003a00 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003982:	4a1f      	ldr	r2, [pc, #124]	; (8003a00 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003984:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003988:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d003      	beq.n	8003998 <RCC_SetFlashLatencyFromMSIRange+0x58>
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003996:	d10b      	bne.n	80039b0 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2b80      	cmp	r3, #128	; 0x80
 800399c:	d919      	bls.n	80039d2 <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2ba0      	cmp	r3, #160	; 0xa0
 80039a2:	d902      	bls.n	80039aa <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80039a4:	2302      	movs	r3, #2
 80039a6:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 80039a8:	e013      	b.n	80039d2 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80039aa:	2301      	movs	r3, #1
 80039ac:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 80039ae:	e010      	b.n	80039d2 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2b80      	cmp	r3, #128	; 0x80
 80039b4:	d902      	bls.n	80039bc <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80039b6:	2303      	movs	r3, #3
 80039b8:	617b      	str	r3, [r7, #20]
 80039ba:	e00a      	b.n	80039d2 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2b80      	cmp	r3, #128	; 0x80
 80039c0:	d102      	bne.n	80039c8 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80039c2:	2302      	movs	r3, #2
 80039c4:	617b      	str	r3, [r7, #20]
 80039c6:	e004      	b.n	80039d2 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2b70      	cmp	r3, #112	; 0x70
 80039cc:	d101      	bne.n	80039d2 <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80039ce:	2301      	movs	r3, #1
 80039d0:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80039d2:	4b0c      	ldr	r3, [pc, #48]	; (8003a04 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f023 020f 	bic.w	r2, r3, #15
 80039da:	490a      	ldr	r1, [pc, #40]	; (8003a04 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	4313      	orrs	r3, r2
 80039e0:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80039e2:	4b08      	ldr	r3, [pc, #32]	; (8003a04 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 030f 	and.w	r3, r3, #15
 80039ea:	697a      	ldr	r2, [r7, #20]
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d001      	beq.n	80039f4 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e000      	b.n	80039f6 <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 80039f4:	2300      	movs	r3, #0
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3718      	adds	r7, #24
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	40021000 	.word	0x40021000
 8003a04:	40022000 	.word	0x40022000

08003a08 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b087      	sub	sp, #28
 8003a0c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a0e:	4b31      	ldr	r3, [pc, #196]	; (8003ad4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	f003 0303 	and.w	r3, r3, #3
 8003a16:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a18:	4b2e      	ldr	r3, [pc, #184]	; (8003ad4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	091b      	lsrs	r3, r3, #4
 8003a1e:	f003 030f 	and.w	r3, r3, #15
 8003a22:	3301      	adds	r3, #1
 8003a24:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2b03      	cmp	r3, #3
 8003a2a:	d015      	beq.n	8003a58 <RCC_GetSysClockFreqFromPLLSource+0x50>
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2b03      	cmp	r3, #3
 8003a30:	d839      	bhi.n	8003aa6 <RCC_GetSysClockFreqFromPLLSource+0x9e>
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d01c      	beq.n	8003a72 <RCC_GetSysClockFreqFromPLLSource+0x6a>
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2b02      	cmp	r3, #2
 8003a3c:	d133      	bne.n	8003aa6 <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003a3e:	4a26      	ldr	r2, [pc, #152]	; (8003ad8 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a46:	4a23      	ldr	r2, [pc, #140]	; (8003ad4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003a48:	68d2      	ldr	r2, [r2, #12]
 8003a4a:	0a12      	lsrs	r2, r2, #8
 8003a4c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003a50:	fb02 f303 	mul.w	r3, r2, r3
 8003a54:	613b      	str	r3, [r7, #16]
      break;
 8003a56:	e029      	b.n	8003aac <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003a58:	4a20      	ldr	r2, [pc, #128]	; (8003adc <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a60:	4a1c      	ldr	r2, [pc, #112]	; (8003ad4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003a62:	68d2      	ldr	r2, [r2, #12]
 8003a64:	0a12      	lsrs	r2, r2, #8
 8003a66:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003a6a:	fb02 f303 	mul.w	r3, r2, r3
 8003a6e:	613b      	str	r3, [r7, #16]
      break;
 8003a70:	e01c      	b.n	8003aac <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003a72:	4b18      	ldr	r3, [pc, #96]	; (8003ad4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0308 	and.w	r3, r3, #8
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d107      	bne.n	8003a8e <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003a7e:	4b15      	ldr	r3, [pc, #84]	; (8003ad4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003a80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a84:	0a1b      	lsrs	r3, r3, #8
 8003a86:	f003 030f 	and.w	r3, r3, #15
 8003a8a:	617b      	str	r3, [r7, #20]
 8003a8c:	e005      	b.n	8003a9a <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003a8e:	4b11      	ldr	r3, [pc, #68]	; (8003ad4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	091b      	lsrs	r3, r3, #4
 8003a94:	f003 030f 	and.w	r3, r3, #15
 8003a98:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 8003a9a:	4a11      	ldr	r2, [pc, #68]	; (8003ae0 <RCC_GetSysClockFreqFromPLLSource+0xd8>)
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003aa2:	613b      	str	r3, [r7, #16]
        break;
 8003aa4:	e002      	b.n	8003aac <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	613b      	str	r3, [r7, #16]
      break;
 8003aaa:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8003aac:	4b09      	ldr	r3, [pc, #36]	; (8003ad4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	0e5b      	lsrs	r3, r3, #25
 8003ab2:	f003 0303 	and.w	r3, r3, #3
 8003ab6:	3301      	adds	r3, #1
 8003ab8:	005b      	lsls	r3, r3, #1
 8003aba:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003abc:	693a      	ldr	r2, [r7, #16]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ac4:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003ac6:	683b      	ldr	r3, [r7, #0]
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	371c      	adds	r7, #28
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr
 8003ad4:	40021000 	.word	0x40021000
 8003ad8:	00f42400 	.word	0x00f42400
 8003adc:	007a1200 	.word	0x007a1200
 8003ae0:	080058cc 	.word	0x080058cc

08003ae4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b088      	sub	sp, #32
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003aec:	2300      	movs	r3, #0
 8003aee:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003af0:	2300      	movs	r3, #0
 8003af2:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d040      	beq.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b04:	2b80      	cmp	r3, #128	; 0x80
 8003b06:	d02a      	beq.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003b08:	2b80      	cmp	r3, #128	; 0x80
 8003b0a:	d825      	bhi.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003b0c:	2b60      	cmp	r3, #96	; 0x60
 8003b0e:	d026      	beq.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003b10:	2b60      	cmp	r3, #96	; 0x60
 8003b12:	d821      	bhi.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003b14:	2b40      	cmp	r3, #64	; 0x40
 8003b16:	d006      	beq.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003b18:	2b40      	cmp	r3, #64	; 0x40
 8003b1a:	d81d      	bhi.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d009      	beq.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003b20:	2b20      	cmp	r3, #32
 8003b22:	d010      	beq.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003b24:	e018      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003b26:	4b8f      	ldr	r3, [pc, #572]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	4a8e      	ldr	r2, [pc, #568]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b30:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003b32:	e015      	b.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	3304      	adds	r3, #4
 8003b38:	2100      	movs	r1, #0
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f000 fb56 	bl	80041ec <RCCEx_PLLSAI1_Config>
 8003b40:	4603      	mov	r3, r0
 8003b42:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003b44:	e00c      	b.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	3320      	adds	r3, #32
 8003b4a:	2100      	movs	r1, #0
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f000 fc33 	bl	80043b8 <RCCEx_PLLSAI2_Config>
 8003b52:	4603      	mov	r3, r0
 8003b54:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003b56:	e003      	b.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	77fb      	strb	r3, [r7, #31]
        break;
 8003b5c:	e000      	b.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 8003b5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b60:	7ffb      	ldrb	r3, [r7, #31]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d10b      	bne.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b66:	4b7f      	ldr	r3, [pc, #508]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b68:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003b6c:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b74:	497b      	ldr	r1, [pc, #492]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b76:	4313      	orrs	r3, r2
 8003b78:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003b7c:	e001      	b.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b7e:	7ffb      	ldrb	r3, [r7, #31]
 8003b80:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d047      	beq.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b96:	d030      	beq.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003b98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b9c:	d82a      	bhi.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003b9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ba2:	d02a      	beq.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003ba4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ba8:	d824      	bhi.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003baa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bae:	d008      	beq.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003bb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bb4:	d81e      	bhi.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d00a      	beq.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003bba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bbe:	d010      	beq.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003bc0:	e018      	b.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003bc2:	4b68      	ldr	r3, [pc, #416]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003bc4:	68db      	ldr	r3, [r3, #12]
 8003bc6:	4a67      	ldr	r2, [pc, #412]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003bc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bcc:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003bce:	e015      	b.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	3304      	adds	r3, #4
 8003bd4:	2100      	movs	r1, #0
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f000 fb08 	bl	80041ec <RCCEx_PLLSAI1_Config>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003be0:	e00c      	b.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	3320      	adds	r3, #32
 8003be6:	2100      	movs	r1, #0
 8003be8:	4618      	mov	r0, r3
 8003bea:	f000 fbe5 	bl	80043b8 <RCCEx_PLLSAI2_Config>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003bf2:	e003      	b.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	77fb      	strb	r3, [r7, #31]
        break;
 8003bf8:	e000      	b.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 8003bfa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bfc:	7ffb      	ldrb	r3, [r7, #31]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d10b      	bne.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003c02:	4b58      	ldr	r3, [pc, #352]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c04:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003c08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c10:	4954      	ldr	r1, [pc, #336]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c12:	4313      	orrs	r3, r2
 8003c14:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003c18:	e001      	b.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c1a:	7ffb      	ldrb	r3, [r7, #31]
 8003c1c:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	f000 80ab 	beq.w	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c30:	4b4c      	ldr	r3, [pc, #304]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d10d      	bne.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c3c:	4b49      	ldr	r3, [pc, #292]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c40:	4a48      	ldr	r2, [pc, #288]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c46:	6593      	str	r3, [r2, #88]	; 0x58
 8003c48:	4b46      	ldr	r3, [pc, #280]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c50:	60fb      	str	r3, [r7, #12]
 8003c52:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003c54:	2301      	movs	r3, #1
 8003c56:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c58:	4b43      	ldr	r3, [pc, #268]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a42      	ldr	r2, [pc, #264]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003c5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c62:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c64:	f7fd fb1c 	bl	80012a0 <HAL_GetTick>
 8003c68:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c6a:	e00f      	b.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c6c:	f7fd fb18 	bl	80012a0 <HAL_GetTick>
 8003c70:	4602      	mov	r2, r0
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	2b02      	cmp	r3, #2
 8003c78:	d908      	bls.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c7a:	4b3b      	ldr	r3, [pc, #236]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d109      	bne.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 8003c86:	2303      	movs	r3, #3
 8003c88:	77fb      	strb	r3, [r7, #31]
        }
        break;
 8003c8a:	e006      	b.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c8c:	4b36      	ldr	r3, [pc, #216]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d0e9      	beq.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x188>
 8003c98:	e000      	b.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 8003c9a:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 8003c9c:	7ffb      	ldrb	r3, [r7, #31]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d164      	bne.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003ca2:	4b30      	ldr	r3, [pc, #192]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ca8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cac:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003cae:	69bb      	ldr	r3, [r7, #24]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d01f      	beq.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cba:	69ba      	ldr	r2, [r7, #24]
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d019      	beq.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003cc0:	4b28      	ldr	r3, [pc, #160]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cca:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003ccc:	4b25      	ldr	r3, [pc, #148]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cd2:	4a24      	ldr	r2, [pc, #144]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003cd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003cdc:	4b21      	ldr	r3, [pc, #132]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ce2:	4a20      	ldr	r2, [pc, #128]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ce4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ce8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003cec:	4a1d      	ldr	r2, [pc, #116]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003cee:	69bb      	ldr	r3, [r7, #24]
 8003cf0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003cf4:	69bb      	ldr	r3, [r7, #24]
 8003cf6:	f003 0301 	and.w	r3, r3, #1
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d01f      	beq.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cfe:	f7fd facf 	bl	80012a0 <HAL_GetTick>
 8003d02:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d04:	e012      	b.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d06:	f7fd facb 	bl	80012a0 <HAL_GetTick>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	1ad3      	subs	r3, r2, r3
 8003d10:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d909      	bls.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d18:	4b12      	ldr	r3, [pc, #72]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d1e:	f003 0302 	and.w	r3, r3, #2
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d10a      	bne.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	77fb      	strb	r3, [r7, #31]
            }
            break;
 8003d2a:	e007      	b.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d2c:	4b0d      	ldr	r3, [pc, #52]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d32:	f003 0302 	and.w	r3, r3, #2
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d0e5      	beq.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x222>
 8003d3a:	e000      	b.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 8003d3c:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 8003d3e:	7ffb      	ldrb	r3, [r7, #31]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d10c      	bne.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d44:	4b07      	ldr	r3, [pc, #28]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d4a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d54:	4903      	ldr	r1, [pc, #12]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d56:	4313      	orrs	r3, r2
 8003d58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003d5c:	e008      	b.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003d5e:	7ffb      	ldrb	r3, [r7, #31]
 8003d60:	77bb      	strb	r3, [r7, #30]
 8003d62:	e005      	b.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8003d64:	40021000 	.word	0x40021000
 8003d68:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d6c:	7ffb      	ldrb	r3, [r7, #31]
 8003d6e:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003d70:	7dfb      	ldrb	r3, [r7, #23]
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d105      	bne.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d76:	4b9c      	ldr	r3, [pc, #624]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003d78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d7a:	4a9b      	ldr	r2, [pc, #620]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003d7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d80:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0301 	and.w	r3, r3, #1
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d00a      	beq.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d8e:	4b96      	ldr	r3, [pc, #600]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d94:	f023 0203 	bic.w	r2, r3, #3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d9c:	4992      	ldr	r1, [pc, #584]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 0302 	and.w	r3, r3, #2
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d00a      	beq.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003db0:	4b8d      	ldr	r3, [pc, #564]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003db6:	f023 020c 	bic.w	r2, r3, #12
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dbe:	498a      	ldr	r1, [pc, #552]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 0304 	and.w	r3, r3, #4
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d00a      	beq.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003dd2:	4b85      	ldr	r3, [pc, #532]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dd8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003de0:	4981      	ldr	r1, [pc, #516]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003de2:	4313      	orrs	r3, r2
 8003de4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0308 	and.w	r3, r3, #8
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d00a      	beq.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003df4:	4b7c      	ldr	r3, [pc, #496]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dfa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e02:	4979      	ldr	r1, [pc, #484]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003e04:	4313      	orrs	r3, r2
 8003e06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 0310 	and.w	r3, r3, #16
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d00a      	beq.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003e16:	4b74      	ldr	r3, [pc, #464]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003e18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e1c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e24:	4970      	ldr	r1, [pc, #448]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003e26:	4313      	orrs	r3, r2
 8003e28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 0320 	and.w	r3, r3, #32
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d00a      	beq.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e38:	4b6b      	ldr	r3, [pc, #428]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e3e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e46:	4968      	ldr	r1, [pc, #416]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d00a      	beq.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e5a:	4b63      	ldr	r3, [pc, #396]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e60:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e68:	495f      	ldr	r1, [pc, #380]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d00a      	beq.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003e7c:	4b5a      	ldr	r3, [pc, #360]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e82:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e8a:	4957      	ldr	r1, [pc, #348]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d00a      	beq.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8003e9e:	4b52      	ldr	r3, [pc, #328]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003ea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ea4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003eac:	494e      	ldr	r1, [pc, #312]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d031      	beq.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ec4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003ec8:	d00e      	beq.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8003eca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003ece:	d814      	bhi.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d015      	beq.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003ed4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ed8:	d10f      	bne.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003eda:	4b43      	ldr	r3, [pc, #268]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003edc:	68db      	ldr	r3, [r3, #12]
 8003ede:	4a42      	ldr	r2, [pc, #264]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003ee0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ee4:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8003ee6:	e00c      	b.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	3304      	adds	r3, #4
 8003eec:	2100      	movs	r1, #0
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f000 f97c 	bl	80041ec <RCCEx_PLLSAI1_Config>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8003ef8:	e003      	b.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	77fb      	strb	r3, [r7, #31]
        break;
 8003efe:	e000      	b.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 8003f00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f02:	7ffb      	ldrb	r3, [r7, #31]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d10b      	bne.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003f08:	4b37      	ldr	r3, [pc, #220]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f0e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f16:	4934      	ldr	r1, [pc, #208]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003f1e:	e001      	b.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f20:	7ffb      	ldrb	r3, [r7, #31]
 8003f22:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d00a      	beq.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f30:	4b2d      	ldr	r3, [pc, #180]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f36:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f3e:	492a      	ldr	r1, [pc, #168]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003f40:	4313      	orrs	r3, r2
 8003f42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d00a      	beq.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f52:	4b25      	ldr	r3, [pc, #148]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f58:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f60:	4921      	ldr	r1, [pc, #132]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003f62:	4313      	orrs	r3, r2
 8003f64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d00a      	beq.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f74:	4b1c      	ldr	r3, [pc, #112]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f7a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f82:	4919      	ldr	r1, [pc, #100]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003f84:	4313      	orrs	r3, r2
 8003f86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d00a      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003f96:	4b14      	ldr	r3, [pc, #80]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003f98:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f9c:	f023 0203 	bic.w	r2, r3, #3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fa4:	4910      	ldr	r1, [pc, #64]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d02b      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003fb8:	4b0b      	ldr	r3, [pc, #44]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fbe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fc6:	4908      	ldr	r1, [pc, #32]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fd2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fd6:	d109      	bne.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fd8:	4b03      	ldr	r3, [pc, #12]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	4a02      	ldr	r2, [pc, #8]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003fde:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003fe2:	60d3      	str	r3, [r2, #12]
 8003fe4:	e014      	b.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8003fe6:	bf00      	nop
 8003fe8:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ff0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ff4:	d10c      	bne.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	3304      	adds	r3, #4
 8003ffa:	2101      	movs	r1, #1
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f000 f8f5 	bl	80041ec <RCCEx_PLLSAI1_Config>
 8004002:	4603      	mov	r3, r0
 8004004:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 8004006:	7ffb      	ldrb	r3, [r7, #31]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d001      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 800400c:	7ffb      	ldrb	r3, [r7, #31]
 800400e:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004018:	2b00      	cmp	r3, #0
 800401a:	d04a      	beq.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004020:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004024:	d108      	bne.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x554>
 8004026:	4b70      	ldr	r3, [pc, #448]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004028:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800402c:	4a6e      	ldr	r2, [pc, #440]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800402e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004032:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004036:	e012      	b.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8004038:	4b6b      	ldr	r3, [pc, #428]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800403a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800403e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004046:	4968      	ldr	r1, [pc, #416]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004048:	4313      	orrs	r3, r2
 800404a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800404e:	4b66      	ldr	r3, [pc, #408]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004050:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004054:	4a64      	ldr	r2, [pc, #400]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004056:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800405a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004062:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004066:	d10d      	bne.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	3304      	adds	r3, #4
 800406c:	2101      	movs	r1, #1
 800406e:	4618      	mov	r0, r3
 8004070:	f000 f8bc 	bl	80041ec <RCCEx_PLLSAI1_Config>
 8004074:	4603      	mov	r3, r0
 8004076:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8004078:	7ffb      	ldrb	r3, [r7, #31]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d019      	beq.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 800407e:	7ffb      	ldrb	r3, [r7, #31]
 8004080:	77bb      	strb	r3, [r7, #30]
 8004082:	e016      	b.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004088:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800408c:	d106      	bne.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800408e:	4b56      	ldr	r3, [pc, #344]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004090:	68db      	ldr	r3, [r3, #12]
 8004092:	4a55      	ldr	r2, [pc, #340]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004094:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004098:	60d3      	str	r3, [r2, #12]
 800409a:	e00a      	b.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040a4:	d105      	bne.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80040a6:	4b50      	ldr	r3, [pc, #320]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80040a8:	68db      	ldr	r3, [r3, #12]
 80040aa:	4a4f      	ldr	r2, [pc, #316]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80040ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040b0:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d028      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80040be:	4b4a      	ldr	r3, [pc, #296]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80040c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040c4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040cc:	4946      	ldr	r1, [pc, #280]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80040ce:	4313      	orrs	r3, r2
 80040d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040dc:	d106      	bne.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040de:	4b42      	ldr	r3, [pc, #264]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80040e0:	68db      	ldr	r3, [r3, #12]
 80040e2:	4a41      	ldr	r2, [pc, #260]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80040e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040e8:	60d3      	str	r3, [r2, #12]
 80040ea:	e011      	b.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80040f4:	d10c      	bne.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	3304      	adds	r3, #4
 80040fa:	2101      	movs	r1, #1
 80040fc:	4618      	mov	r0, r3
 80040fe:	f000 f875 	bl	80041ec <RCCEx_PLLSAI1_Config>
 8004102:	4603      	mov	r3, r0
 8004104:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8004106:	7ffb      	ldrb	r3, [r7, #31]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d001      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 800410c:	7ffb      	ldrb	r3, [r7, #31]
 800410e:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004118:	2b00      	cmp	r3, #0
 800411a:	d01e      	beq.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800411c:	4b32      	ldr	r3, [pc, #200]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800411e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004122:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800412c:	492e      	ldr	r1, [pc, #184]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800412e:	4313      	orrs	r3, r2
 8004130:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800413a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800413e:	d10c      	bne.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	3304      	adds	r3, #4
 8004144:	2102      	movs	r1, #2
 8004146:	4618      	mov	r0, r3
 8004148:	f000 f850 	bl	80041ec <RCCEx_PLLSAI1_Config>
 800414c:	4603      	mov	r3, r0
 800414e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8004150:	7ffb      	ldrb	r3, [r7, #31]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d001      	beq.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 8004156:	7ffb      	ldrb	r3, [r7, #31]
 8004158:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004162:	2b00      	cmp	r3, #0
 8004164:	d00b      	beq.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004166:	4b20      	ldr	r3, [pc, #128]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004168:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800416c:	f023 0204 	bic.w	r2, r3, #4
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004176:	491c      	ldr	r1, [pc, #112]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004178:	4313      	orrs	r3, r2
 800417a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004186:	2b00      	cmp	r3, #0
 8004188:	d00b      	beq.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800418a:	4b17      	ldr	r3, [pc, #92]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800418c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004190:	f023 0218 	bic.w	r2, r3, #24
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800419a:	4913      	ldr	r1, [pc, #76]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800419c:	4313      	orrs	r3, r2
 800419e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d017      	beq.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80041ae:	4b0e      	ldr	r3, [pc, #56]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80041b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80041b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041be:	490a      	ldr	r1, [pc, #40]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80041c0:	4313      	orrs	r3, r2
 80041c2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80041d0:	d105      	bne.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041d2:	4b05      	ldr	r3, [pc, #20]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80041d4:	68db      	ldr	r3, [r3, #12]
 80041d6:	4a04      	ldr	r2, [pc, #16]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80041d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80041dc:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 80041de:	7fbb      	ldrb	r3, [r7, #30]
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3720      	adds	r7, #32
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}
 80041e8:	40021000 	.word	0x40021000

080041ec <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b084      	sub	sp, #16
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041f6:	2300      	movs	r3, #0
 80041f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	2b03      	cmp	r3, #3
 8004200:	d018      	beq.n	8004234 <RCCEx_PLLSAI1_Config+0x48>
 8004202:	2b03      	cmp	r3, #3
 8004204:	d81f      	bhi.n	8004246 <RCCEx_PLLSAI1_Config+0x5a>
 8004206:	2b01      	cmp	r3, #1
 8004208:	d002      	beq.n	8004210 <RCCEx_PLLSAI1_Config+0x24>
 800420a:	2b02      	cmp	r3, #2
 800420c:	d009      	beq.n	8004222 <RCCEx_PLLSAI1_Config+0x36>
 800420e:	e01a      	b.n	8004246 <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004210:	4b65      	ldr	r3, [pc, #404]	; (80043a8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 0302 	and.w	r3, r3, #2
 8004218:	2b00      	cmp	r3, #0
 800421a:	d117      	bne.n	800424c <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004220:	e014      	b.n	800424c <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004222:	4b61      	ldr	r3, [pc, #388]	; (80043a8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800422a:	2b00      	cmp	r3, #0
 800422c:	d110      	bne.n	8004250 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004232:	e00d      	b.n	8004250 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8004234:	4b5c      	ldr	r3, [pc, #368]	; (80043a8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800423c:	2b00      	cmp	r3, #0
 800423e:	d109      	bne.n	8004254 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004244:	e006      	b.n	8004254 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	73fb      	strb	r3, [r7, #15]
      break;
 800424a:	e004      	b.n	8004256 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 800424c:	bf00      	nop
 800424e:	e002      	b.n	8004256 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8004250:	bf00      	nop
 8004252:	e000      	b.n	8004256 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8004254:	bf00      	nop
  }

  if (status == HAL_OK)
 8004256:	7bfb      	ldrb	r3, [r7, #15]
 8004258:	2b00      	cmp	r3, #0
 800425a:	f040 809f 	bne.w	800439c <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800425e:	4b52      	ldr	r3, [pc, #328]	; (80043a8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a51      	ldr	r2, [pc, #324]	; (80043a8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004264:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004268:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800426a:	f7fd f819 	bl	80012a0 <HAL_GetTick>
 800426e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004270:	e00f      	b.n	8004292 <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004272:	f7fd f815 	bl	80012a0 <HAL_GetTick>
 8004276:	4602      	mov	r2, r0
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	1ad3      	subs	r3, r2, r3
 800427c:	2b02      	cmp	r3, #2
 800427e:	d908      	bls.n	8004292 <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004280:	4b49      	ldr	r3, [pc, #292]	; (80043a8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004288:	2b00      	cmp	r3, #0
 800428a:	d009      	beq.n	80042a0 <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 800428c:	2303      	movs	r3, #3
 800428e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004290:	e006      	b.n	80042a0 <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004292:	4b45      	ldr	r3, [pc, #276]	; (80043a8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800429a:	2b00      	cmp	r3, #0
 800429c:	d1e9      	bne.n	8004272 <RCCEx_PLLSAI1_Config+0x86>
 800429e:	e000      	b.n	80042a2 <RCCEx_PLLSAI1_Config+0xb6>
        break;
 80042a0:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 80042a2:	7bfb      	ldrb	r3, [r7, #15]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d179      	bne.n	800439c <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d116      	bne.n	80042dc <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80042ae:	4b3e      	ldr	r3, [pc, #248]	; (80043a8 <RCCEx_PLLSAI1_Config+0x1bc>)
 80042b0:	691a      	ldr	r2, [r3, #16]
 80042b2:	4b3e      	ldr	r3, [pc, #248]	; (80043ac <RCCEx_PLLSAI1_Config+0x1c0>)
 80042b4:	4013      	ands	r3, r2
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	6892      	ldr	r2, [r2, #8]
 80042ba:	0211      	lsls	r1, r2, #8
 80042bc:	687a      	ldr	r2, [r7, #4]
 80042be:	68d2      	ldr	r2, [r2, #12]
 80042c0:	06d2      	lsls	r2, r2, #27
 80042c2:	4311      	orrs	r1, r2
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	6852      	ldr	r2, [r2, #4]
 80042c8:	3a01      	subs	r2, #1
 80042ca:	0112      	lsls	r2, r2, #4
 80042cc:	4311      	orrs	r1, r2
 80042ce:	687a      	ldr	r2, [r7, #4]
 80042d0:	6812      	ldr	r2, [r2, #0]
 80042d2:	430a      	orrs	r2, r1
 80042d4:	4934      	ldr	r1, [pc, #208]	; (80043a8 <RCCEx_PLLSAI1_Config+0x1bc>)
 80042d6:	4313      	orrs	r3, r2
 80042d8:	610b      	str	r3, [r1, #16]
 80042da:	e033      	b.n	8004344 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d118      	bne.n	8004314 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80042e2:	4b31      	ldr	r3, [pc, #196]	; (80043a8 <RCCEx_PLLSAI1_Config+0x1bc>)
 80042e4:	691a      	ldr	r2, [r3, #16]
 80042e6:	4b32      	ldr	r3, [pc, #200]	; (80043b0 <RCCEx_PLLSAI1_Config+0x1c4>)
 80042e8:	4013      	ands	r3, r2
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	6892      	ldr	r2, [r2, #8]
 80042ee:	0211      	lsls	r1, r2, #8
 80042f0:	687a      	ldr	r2, [r7, #4]
 80042f2:	6912      	ldr	r2, [r2, #16]
 80042f4:	0852      	lsrs	r2, r2, #1
 80042f6:	3a01      	subs	r2, #1
 80042f8:	0552      	lsls	r2, r2, #21
 80042fa:	4311      	orrs	r1, r2
 80042fc:	687a      	ldr	r2, [r7, #4]
 80042fe:	6852      	ldr	r2, [r2, #4]
 8004300:	3a01      	subs	r2, #1
 8004302:	0112      	lsls	r2, r2, #4
 8004304:	4311      	orrs	r1, r2
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	6812      	ldr	r2, [r2, #0]
 800430a:	430a      	orrs	r2, r1
 800430c:	4926      	ldr	r1, [pc, #152]	; (80043a8 <RCCEx_PLLSAI1_Config+0x1bc>)
 800430e:	4313      	orrs	r3, r2
 8004310:	610b      	str	r3, [r1, #16]
 8004312:	e017      	b.n	8004344 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004314:	4b24      	ldr	r3, [pc, #144]	; (80043a8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004316:	691a      	ldr	r2, [r3, #16]
 8004318:	4b26      	ldr	r3, [pc, #152]	; (80043b4 <RCCEx_PLLSAI1_Config+0x1c8>)
 800431a:	4013      	ands	r3, r2
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	6892      	ldr	r2, [r2, #8]
 8004320:	0211      	lsls	r1, r2, #8
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	6952      	ldr	r2, [r2, #20]
 8004326:	0852      	lsrs	r2, r2, #1
 8004328:	3a01      	subs	r2, #1
 800432a:	0652      	lsls	r2, r2, #25
 800432c:	4311      	orrs	r1, r2
 800432e:	687a      	ldr	r2, [r7, #4]
 8004330:	6852      	ldr	r2, [r2, #4]
 8004332:	3a01      	subs	r2, #1
 8004334:	0112      	lsls	r2, r2, #4
 8004336:	4311      	orrs	r1, r2
 8004338:	687a      	ldr	r2, [r7, #4]
 800433a:	6812      	ldr	r2, [r2, #0]
 800433c:	430a      	orrs	r2, r1
 800433e:	491a      	ldr	r1, [pc, #104]	; (80043a8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004340:	4313      	orrs	r3, r2
 8004342:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004344:	4b18      	ldr	r3, [pc, #96]	; (80043a8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a17      	ldr	r2, [pc, #92]	; (80043a8 <RCCEx_PLLSAI1_Config+0x1bc>)
 800434a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800434e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004350:	f7fc ffa6 	bl	80012a0 <HAL_GetTick>
 8004354:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004356:	e00f      	b.n	8004378 <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004358:	f7fc ffa2 	bl	80012a0 <HAL_GetTick>
 800435c:	4602      	mov	r2, r0
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	2b02      	cmp	r3, #2
 8004364:	d908      	bls.n	8004378 <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004366:	4b10      	ldr	r3, [pc, #64]	; (80043a8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800436e:	2b00      	cmp	r3, #0
 8004370:	d109      	bne.n	8004386 <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 8004372:	2303      	movs	r3, #3
 8004374:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8004376:	e006      	b.n	8004386 <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004378:	4b0b      	ldr	r3, [pc, #44]	; (80043a8 <RCCEx_PLLSAI1_Config+0x1bc>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004380:	2b00      	cmp	r3, #0
 8004382:	d0e9      	beq.n	8004358 <RCCEx_PLLSAI1_Config+0x16c>
 8004384:	e000      	b.n	8004388 <RCCEx_PLLSAI1_Config+0x19c>
          break;
 8004386:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8004388:	7bfb      	ldrb	r3, [r7, #15]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d106      	bne.n	800439c <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 800438e:	4b06      	ldr	r3, [pc, #24]	; (80043a8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004390:	691a      	ldr	r2, [r3, #16]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	699b      	ldr	r3, [r3, #24]
 8004396:	4904      	ldr	r1, [pc, #16]	; (80043a8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004398:	4313      	orrs	r3, r2
 800439a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800439c:	7bfb      	ldrb	r3, [r7, #15]
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3710      	adds	r7, #16
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}
 80043a6:	bf00      	nop
 80043a8:	40021000 	.word	0x40021000
 80043ac:	07ff800c 	.word	0x07ff800c
 80043b0:	ff9f800c 	.word	0xff9f800c
 80043b4:	f9ff800c 	.word	0xf9ff800c

080043b8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b084      	sub	sp, #16
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
 80043c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80043c2:	2300      	movs	r3, #0
 80043c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	2b03      	cmp	r3, #3
 80043cc:	d018      	beq.n	8004400 <RCCEx_PLLSAI2_Config+0x48>
 80043ce:	2b03      	cmp	r3, #3
 80043d0:	d81f      	bhi.n	8004412 <RCCEx_PLLSAI2_Config+0x5a>
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d002      	beq.n	80043dc <RCCEx_PLLSAI2_Config+0x24>
 80043d6:	2b02      	cmp	r3, #2
 80043d8:	d009      	beq.n	80043ee <RCCEx_PLLSAI2_Config+0x36>
 80043da:	e01a      	b.n	8004412 <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80043dc:	4b4a      	ldr	r3, [pc, #296]	; (8004508 <RCCEx_PLLSAI2_Config+0x150>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 0302 	and.w	r3, r3, #2
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d117      	bne.n	8004418 <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043ec:	e014      	b.n	8004418 <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80043ee:	4b46      	ldr	r3, [pc, #280]	; (8004508 <RCCEx_PLLSAI2_Config+0x150>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d110      	bne.n	800441c <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043fe:	e00d      	b.n	800441c <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8004400:	4b41      	ldr	r3, [pc, #260]	; (8004508 <RCCEx_PLLSAI2_Config+0x150>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004408:	2b00      	cmp	r3, #0
 800440a:	d109      	bne.n	8004420 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004410:	e006      	b.n	8004420 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	73fb      	strb	r3, [r7, #15]
      break;
 8004416:	e004      	b.n	8004422 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8004418:	bf00      	nop
 800441a:	e002      	b.n	8004422 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 800441c:	bf00      	nop
 800441e:	e000      	b.n	8004422 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8004420:	bf00      	nop
  }

  if (status == HAL_OK)
 8004422:	7bfb      	ldrb	r3, [r7, #15]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d169      	bne.n	80044fc <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004428:	4b37      	ldr	r3, [pc, #220]	; (8004508 <RCCEx_PLLSAI2_Config+0x150>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a36      	ldr	r2, [pc, #216]	; (8004508 <RCCEx_PLLSAI2_Config+0x150>)
 800442e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004432:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004434:	f7fc ff34 	bl	80012a0 <HAL_GetTick>
 8004438:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800443a:	e00f      	b.n	800445c <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800443c:	f7fc ff30 	bl	80012a0 <HAL_GetTick>
 8004440:	4602      	mov	r2, r0
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	2b02      	cmp	r3, #2
 8004448:	d908      	bls.n	800445c <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800444a:	4b2f      	ldr	r3, [pc, #188]	; (8004508 <RCCEx_PLLSAI2_Config+0x150>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d009      	beq.n	800446a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 8004456:	2303      	movs	r3, #3
 8004458:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800445a:	e006      	b.n	800446a <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800445c:	4b2a      	ldr	r3, [pc, #168]	; (8004508 <RCCEx_PLLSAI2_Config+0x150>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004464:	2b00      	cmp	r3, #0
 8004466:	d1e9      	bne.n	800443c <RCCEx_PLLSAI2_Config+0x84>
 8004468:	e000      	b.n	800446c <RCCEx_PLLSAI2_Config+0xb4>
        break;
 800446a:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 800446c:	7bfb      	ldrb	r3, [r7, #15]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d144      	bne.n	80044fc <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d115      	bne.n	80044a4 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004478:	4b23      	ldr	r3, [pc, #140]	; (8004508 <RCCEx_PLLSAI2_Config+0x150>)
 800447a:	695a      	ldr	r2, [r3, #20]
 800447c:	4b23      	ldr	r3, [pc, #140]	; (800450c <RCCEx_PLLSAI2_Config+0x154>)
 800447e:	4013      	ands	r3, r2
 8004480:	687a      	ldr	r2, [r7, #4]
 8004482:	6892      	ldr	r2, [r2, #8]
 8004484:	0211      	lsls	r1, r2, #8
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	68d2      	ldr	r2, [r2, #12]
 800448a:	06d2      	lsls	r2, r2, #27
 800448c:	4311      	orrs	r1, r2
 800448e:	687a      	ldr	r2, [r7, #4]
 8004490:	6852      	ldr	r2, [r2, #4]
 8004492:	3a01      	subs	r2, #1
 8004494:	0112      	lsls	r2, r2, #4
 8004496:	4311      	orrs	r1, r2
 8004498:	687a      	ldr	r2, [r7, #4]
 800449a:	6812      	ldr	r2, [r2, #0]
 800449c:	430a      	orrs	r2, r1
 800449e:	491a      	ldr	r1, [pc, #104]	; (8004508 <RCCEx_PLLSAI2_Config+0x150>)
 80044a0:	4313      	orrs	r3, r2
 80044a2:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80044a4:	4b18      	ldr	r3, [pc, #96]	; (8004508 <RCCEx_PLLSAI2_Config+0x150>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a17      	ldr	r2, [pc, #92]	; (8004508 <RCCEx_PLLSAI2_Config+0x150>)
 80044aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044ae:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044b0:	f7fc fef6 	bl	80012a0 <HAL_GetTick>
 80044b4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80044b6:	e00f      	b.n	80044d8 <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80044b8:	f7fc fef2 	bl	80012a0 <HAL_GetTick>
 80044bc:	4602      	mov	r2, r0
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	1ad3      	subs	r3, r2, r3
 80044c2:	2b02      	cmp	r3, #2
 80044c4:	d908      	bls.n	80044d8 <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80044c6:	4b10      	ldr	r3, [pc, #64]	; (8004508 <RCCEx_PLLSAI2_Config+0x150>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d109      	bne.n	80044e6 <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 80044d2:	2303      	movs	r3, #3
 80044d4:	73fb      	strb	r3, [r7, #15]
          }
          break;
 80044d6:	e006      	b.n	80044e6 <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80044d8:	4b0b      	ldr	r3, [pc, #44]	; (8004508 <RCCEx_PLLSAI2_Config+0x150>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d0e9      	beq.n	80044b8 <RCCEx_PLLSAI2_Config+0x100>
 80044e4:	e000      	b.n	80044e8 <RCCEx_PLLSAI2_Config+0x130>
          break;
 80044e6:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 80044e8:	7bfb      	ldrb	r3, [r7, #15]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d106      	bne.n	80044fc <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 80044ee:	4b06      	ldr	r3, [pc, #24]	; (8004508 <RCCEx_PLLSAI2_Config+0x150>)
 80044f0:	695a      	ldr	r2, [r3, #20]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	691b      	ldr	r3, [r3, #16]
 80044f6:	4904      	ldr	r1, [pc, #16]	; (8004508 <RCCEx_PLLSAI2_Config+0x150>)
 80044f8:	4313      	orrs	r3, r2
 80044fa:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80044fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3710      	adds	r7, #16
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}
 8004506:	bf00      	nop
 8004508:	40021000 	.word	0x40021000
 800450c:	07ff800c 	.word	0x07ff800c

08004510 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b084      	sub	sp, #16
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d066      	beq.n	80045f0 <HAL_RTC_Init+0xe0>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004528:	b2db      	uxtb	r3, r3
 800452a:	2b00      	cmp	r3, #0
 800452c:	d106      	bne.n	800453c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2200      	movs	r2, #0
 8004532:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f7fc fc86 	bl	8000e48 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2202      	movs	r2, #2
 8004540:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	f003 0310 	and.w	r3, r3, #16
 800454e:	2b10      	cmp	r3, #16
 8004550:	d045      	beq.n	80045de <HAL_RTC_Init+0xce>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004552:	4b2a      	ldr	r3, [pc, #168]	; (80045fc <HAL_RTC_Init+0xec>)
 8004554:	22ca      	movs	r2, #202	; 0xca
 8004556:	625a      	str	r2, [r3, #36]	; 0x24
 8004558:	4b28      	ldr	r3, [pc, #160]	; (80045fc <HAL_RTC_Init+0xec>)
 800455a:	2253      	movs	r2, #83	; 0x53
 800455c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f000 f872 	bl	8004648 <RTC_EnterInitMode>
 8004564:	4603      	mov	r3, r0
 8004566:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004568:	7bfb      	ldrb	r3, [r7, #15]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d121      	bne.n	80045b2 <HAL_RTC_Init+0xa2>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800456e:	4b23      	ldr	r3, [pc, #140]	; (80045fc <HAL_RTC_Init+0xec>)
 8004570:	699b      	ldr	r3, [r3, #24]
 8004572:	4a22      	ldr	r2, [pc, #136]	; (80045fc <HAL_RTC_Init+0xec>)
 8004574:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8004578:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800457c:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800457e:	4b1f      	ldr	r3, [pc, #124]	; (80045fc <HAL_RTC_Init+0xec>)
 8004580:	699a      	ldr	r2, [r3, #24]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6859      	ldr	r1, [r3, #4]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	691b      	ldr	r3, [r3, #16]
 800458a:	4319      	orrs	r1, r3
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	699b      	ldr	r3, [r3, #24]
 8004590:	430b      	orrs	r3, r1
 8004592:	491a      	ldr	r1, [pc, #104]	; (80045fc <HAL_RTC_Init+0xec>)
 8004594:	4313      	orrs	r3, r2
 8004596:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	68da      	ldr	r2, [r3, #12]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	041b      	lsls	r3, r3, #16
 80045a2:	4916      	ldr	r1, [pc, #88]	; (80045fc <HAL_RTC_Init+0xec>)
 80045a4:	4313      	orrs	r3, r2
 80045a6:	610b      	str	r3, [r1, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	f000 f881 	bl	80046b0 <RTC_ExitInitMode>
 80045ae:	4603      	mov	r3, r0
 80045b0:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 80045b2:	7bfb      	ldrb	r3, [r7, #15]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d10e      	bne.n	80045d6 <HAL_RTC_Init+0xc6>
      {
        MODIFY_REG(RTC->CR, \
 80045b8:	4b10      	ldr	r3, [pc, #64]	; (80045fc <HAL_RTC_Init+0xec>)
 80045ba:	699b      	ldr	r3, [r3, #24]
 80045bc:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6a19      	ldr	r1, [r3, #32]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	69db      	ldr	r3, [r3, #28]
 80045c8:	4319      	orrs	r1, r3
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	695b      	ldr	r3, [r3, #20]
 80045ce:	430b      	orrs	r3, r1
 80045d0:	490a      	ldr	r1, [pc, #40]	; (80045fc <HAL_RTC_Init+0xec>)
 80045d2:	4313      	orrs	r3, r2
 80045d4:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }


    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80045d6:	4b09      	ldr	r3, [pc, #36]	; (80045fc <HAL_RTC_Init+0xec>)
 80045d8:	22ff      	movs	r2, #255	; 0xff
 80045da:	625a      	str	r2, [r3, #36]	; 0x24
 80045dc:	e001      	b.n	80045e2 <HAL_RTC_Init+0xd2>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80045de:	2300      	movs	r3, #0
 80045e0:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80045e2:	7bfb      	ldrb	r3, [r7, #15]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d103      	bne.n	80045f0 <HAL_RTC_Init+0xe0>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 80045f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3710      	adds	r7, #16
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
 80045fa:	bf00      	nop
 80045fc:	40002800 	.word	0x40002800

08004600 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b084      	sub	sp, #16
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  WRITE_REG(RTC->ICSR, ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK)));
 8004608:	4b0d      	ldr	r3, [pc, #52]	; (8004640 <HAL_RTC_WaitForSynchro+0x40>)
 800460a:	4a0e      	ldr	r2, [pc, #56]	; (8004644 <HAL_RTC_WaitForSynchro+0x44>)
 800460c:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800460e:	f7fc fe47 	bl	80012a0 <HAL_GetTick>
 8004612:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8004614:	e009      	b.n	800462a <HAL_RTC_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004616:	f7fc fe43 	bl	80012a0 <HAL_GetTick>
 800461a:	4602      	mov	r2, r0
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	1ad3      	subs	r3, r2, r3
 8004620:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004624:	d901      	bls.n	800462a <HAL_RTC_WaitForSynchro+0x2a>
    {
      return HAL_TIMEOUT;
 8004626:	2303      	movs	r3, #3
 8004628:	e006      	b.n	8004638 <HAL_RTC_WaitForSynchro+0x38>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800462a:	4b05      	ldr	r3, [pc, #20]	; (8004640 <HAL_RTC_WaitForSynchro+0x40>)
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	f003 0320 	and.w	r3, r3, #32
 8004632:	2b00      	cmp	r3, #0
 8004634:	d0ef      	beq.n	8004616 <HAL_RTC_WaitForSynchro+0x16>
    }
  }

  return HAL_OK;
 8004636:	2300      	movs	r3, #0
}
 8004638:	4618      	mov	r0, r3
 800463a:	3710      	adds	r7, #16
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}
 8004640:	40002800 	.word	0x40002800
 8004644:	0001005c 	.word	0x0001005c

08004648 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b084      	sub	sp, #16
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004650:	2300      	movs	r3, #0
 8004652:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8004654:	4b15      	ldr	r3, [pc, #84]	; (80046ac <RTC_EnterInitMode+0x64>)
 8004656:	68db      	ldr	r3, [r3, #12]
 8004658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800465c:	2b00      	cmp	r3, #0
 800465e:	d120      	bne.n	80046a2 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004660:	4b12      	ldr	r3, [pc, #72]	; (80046ac <RTC_EnterInitMode+0x64>)
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	4a11      	ldr	r2, [pc, #68]	; (80046ac <RTC_EnterInitMode+0x64>)
 8004666:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800466a:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800466c:	f7fc fe18 	bl	80012a0 <HAL_GetTick>
 8004670:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004672:	e00d      	b.n	8004690 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004674:	f7fc fe14 	bl	80012a0 <HAL_GetTick>
 8004678:	4602      	mov	r2, r0
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	1ad3      	subs	r3, r2, r3
 800467e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004682:	d905      	bls.n	8004690 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8004684:	2303      	movs	r3, #3
 8004686:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2203      	movs	r2, #3
 800468c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004690:	4b06      	ldr	r3, [pc, #24]	; (80046ac <RTC_EnterInitMode+0x64>)
 8004692:	68db      	ldr	r3, [r3, #12]
 8004694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004698:	2b00      	cmp	r3, #0
 800469a:	d102      	bne.n	80046a2 <RTC_EnterInitMode+0x5a>
 800469c:	7bfb      	ldrb	r3, [r7, #15]
 800469e:	2b03      	cmp	r3, #3
 80046a0:	d1e8      	bne.n	8004674 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 80046a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3710      	adds	r7, #16
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}
 80046ac:	40002800 	.word	0x40002800

080046b0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b084      	sub	sp, #16
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046b8:	2300      	movs	r3, #0
 80046ba:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80046bc:	4b1a      	ldr	r3, [pc, #104]	; (8004728 <RTC_ExitInitMode+0x78>)
 80046be:	68db      	ldr	r3, [r3, #12]
 80046c0:	4a19      	ldr	r2, [pc, #100]	; (8004728 <RTC_ExitInitMode+0x78>)
 80046c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046c6:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80046c8:	4b17      	ldr	r3, [pc, #92]	; (8004728 <RTC_ExitInitMode+0x78>)
 80046ca:	699b      	ldr	r3, [r3, #24]
 80046cc:	f003 0320 	and.w	r3, r3, #32
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d10c      	bne.n	80046ee <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f7ff ff93 	bl	8004600 <HAL_RTC_WaitForSynchro>
 80046da:	4603      	mov	r3, r0
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d01e      	beq.n	800471e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2203      	movs	r2, #3
 80046e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 80046e8:	2303      	movs	r3, #3
 80046ea:	73fb      	strb	r3, [r7, #15]
 80046ec:	e017      	b.n	800471e <RTC_ExitInitMode+0x6e>
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32L552xx STM32L562xx Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80046ee:	4b0e      	ldr	r3, [pc, #56]	; (8004728 <RTC_ExitInitMode+0x78>)
 80046f0:	699b      	ldr	r3, [r3, #24]
 80046f2:	4a0d      	ldr	r2, [pc, #52]	; (8004728 <RTC_ExitInitMode+0x78>)
 80046f4:	f023 0320 	bic.w	r3, r3, #32
 80046f8:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f7ff ff80 	bl	8004600 <HAL_RTC_WaitForSynchro>
 8004700:	4603      	mov	r3, r0
 8004702:	2b00      	cmp	r3, #0
 8004704:	d005      	beq.n	8004712 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2203      	movs	r2, #3
 800470a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 800470e:	2303      	movs	r3, #3
 8004710:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004712:	4b05      	ldr	r3, [pc, #20]	; (8004728 <RTC_ExitInitMode+0x78>)
 8004714:	699b      	ldr	r3, [r3, #24]
 8004716:	4a04      	ldr	r2, [pc, #16]	; (8004728 <RTC_ExitInitMode+0x78>)
 8004718:	f043 0320 	orr.w	r3, r3, #32
 800471c:	6193      	str	r3, [r2, #24]
  }

  return status;
 800471e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004720:	4618      	mov	r0, r3
 8004722:	3710      	adds	r7, #16
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}
 8004728:	40002800 	.word	0x40002800

0800472c <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 800472c:	b480      	push	{r7}
 800472e:	b083      	sub	sp, #12
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	490f      	ldr	r1, [pc, #60]	; (800477c <HAL_RTCEx_PrivilegeModeSet+0x50>)
 8004740:	4313      	orrs	r3, r2
 8004742:	61cb      	str	r3, [r1, #28]

  /* TAMP and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone);
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	689a      	ldr	r2, [r3, #8]
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	68db      	ldr	r3, [r3, #12]
 800474c:	490c      	ldr	r1, [pc, #48]	; (8004780 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800474e:	4313      	orrs	r3, r2
 8004750:	624b      	str	r3, [r1, #36]	; 0x24

  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SMCR,
 8004752:	4b0b      	ldr	r3, [pc, #44]	; (8004780 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8004754:	6a1b      	ldr	r3, [r3, #32]
 8004756:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	6919      	ldr	r1, [r3, #16]
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	695b      	ldr	r3, [r3, #20]
 8004762:	041b      	lsls	r3, r3, #16
 8004764:	430b      	orrs	r3, r1
 8004766:	4906      	ldr	r1, [pc, #24]	; (8004780 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8004768:	4313      	orrs	r3, r2
 800476a:	620b      	str	r3, [r1, #32]
             (TAMP_SMCR_BKPRWDPROT | TAMP_SMCR_BKPWDPROT),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SMCR_BKPRWDPROT_Pos) | (privilegeState->backupRegisterStartZone3 << TAMP_SMCR_BKPWDPROT_Pos)));

  return HAL_OK;
 800476c:	2300      	movs	r3, #0
}
 800476e:	4618      	mov	r0, r3
 8004770:	370c      	adds	r7, #12
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr
 800477a:	bf00      	nop
 800477c:	40002800 	.word	0x40002800
 8004780:	40003400 	.word	0x40003400

08004784 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b082      	sub	sp, #8
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d101      	bne.n	8004796 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e042      	b.n	800481c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800479c:	2b00      	cmp	r3, #0
 800479e:	d106      	bne.n	80047ae <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2200      	movs	r2, #0
 80047a4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f7fc faed 	bl	8000d88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2224      	movs	r2, #36	; 0x24
 80047b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f022 0201 	bic.w	r2, r2, #1
 80047c4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f000 f82c 	bl	8004824 <UART_SetConfig>
 80047cc:	4603      	mov	r3, r0
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d101      	bne.n	80047d6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e022      	b.n	800481c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d002      	beq.n	80047e4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f000 fb20 	bl	8004e24 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	685a      	ldr	r2, [r3, #4]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80047f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	689a      	ldr	r2, [r3, #8]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004802:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f042 0201 	orr.w	r2, r2, #1
 8004812:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f000 fba7 	bl	8004f68 <UART_CheckIdleState>
 800481a:	4603      	mov	r3, r0
}
 800481c:	4618      	mov	r0, r3
 800481e:	3708      	adds	r7, #8
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}

08004824 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004824:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004828:	b08c      	sub	sp, #48	; 0x30
 800482a:	af00      	add	r7, sp, #0
 800482c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800482e:	2300      	movs	r3, #0
 8004830:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	689a      	ldr	r2, [r3, #8]
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	691b      	ldr	r3, [r3, #16]
 800483c:	431a      	orrs	r2, r3
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	695b      	ldr	r3, [r3, #20]
 8004842:	431a      	orrs	r2, r3
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	69db      	ldr	r3, [r3, #28]
 8004848:	4313      	orrs	r3, r2
 800484a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	4baa      	ldr	r3, [pc, #680]	; (8004afc <UART_SetConfig+0x2d8>)
 8004854:	4013      	ands	r3, r2
 8004856:	697a      	ldr	r2, [r7, #20]
 8004858:	6812      	ldr	r2, [r2, #0]
 800485a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800485c:	430b      	orrs	r3, r1
 800485e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	68da      	ldr	r2, [r3, #12]
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	430a      	orrs	r2, r1
 8004874:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	699b      	ldr	r3, [r3, #24]
 800487a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a9f      	ldr	r2, [pc, #636]	; (8004b00 <UART_SetConfig+0x2dc>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d004      	beq.n	8004890 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	6a1b      	ldr	r3, [r3, #32]
 800488a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800488c:	4313      	orrs	r3, r2
 800488e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800489a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800489e:	697a      	ldr	r2, [r7, #20]
 80048a0:	6812      	ldr	r2, [r2, #0]
 80048a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80048a4:	430b      	orrs	r3, r1
 80048a6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ae:	f023 010f 	bic.w	r1, r3, #15
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	430a      	orrs	r2, r1
 80048bc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a90      	ldr	r2, [pc, #576]	; (8004b04 <UART_SetConfig+0x2e0>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d125      	bne.n	8004914 <UART_SetConfig+0xf0>
 80048c8:	4b8f      	ldr	r3, [pc, #572]	; (8004b08 <UART_SetConfig+0x2e4>)
 80048ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048ce:	f003 0303 	and.w	r3, r3, #3
 80048d2:	2b03      	cmp	r3, #3
 80048d4:	d81a      	bhi.n	800490c <UART_SetConfig+0xe8>
 80048d6:	a201      	add	r2, pc, #4	; (adr r2, 80048dc <UART_SetConfig+0xb8>)
 80048d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048dc:	080048ed 	.word	0x080048ed
 80048e0:	080048fd 	.word	0x080048fd
 80048e4:	080048f5 	.word	0x080048f5
 80048e8:	08004905 	.word	0x08004905
 80048ec:	2301      	movs	r3, #1
 80048ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048f2:	e116      	b.n	8004b22 <UART_SetConfig+0x2fe>
 80048f4:	2302      	movs	r3, #2
 80048f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048fa:	e112      	b.n	8004b22 <UART_SetConfig+0x2fe>
 80048fc:	2304      	movs	r3, #4
 80048fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004902:	e10e      	b.n	8004b22 <UART_SetConfig+0x2fe>
 8004904:	2308      	movs	r3, #8
 8004906:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800490a:	e10a      	b.n	8004b22 <UART_SetConfig+0x2fe>
 800490c:	2310      	movs	r3, #16
 800490e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004912:	e106      	b.n	8004b22 <UART_SetConfig+0x2fe>
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a7c      	ldr	r2, [pc, #496]	; (8004b0c <UART_SetConfig+0x2e8>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d138      	bne.n	8004990 <UART_SetConfig+0x16c>
 800491e:	4b7a      	ldr	r3, [pc, #488]	; (8004b08 <UART_SetConfig+0x2e4>)
 8004920:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004924:	f003 030c 	and.w	r3, r3, #12
 8004928:	2b0c      	cmp	r3, #12
 800492a:	d82d      	bhi.n	8004988 <UART_SetConfig+0x164>
 800492c:	a201      	add	r2, pc, #4	; (adr r2, 8004934 <UART_SetConfig+0x110>)
 800492e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004932:	bf00      	nop
 8004934:	08004969 	.word	0x08004969
 8004938:	08004989 	.word	0x08004989
 800493c:	08004989 	.word	0x08004989
 8004940:	08004989 	.word	0x08004989
 8004944:	08004979 	.word	0x08004979
 8004948:	08004989 	.word	0x08004989
 800494c:	08004989 	.word	0x08004989
 8004950:	08004989 	.word	0x08004989
 8004954:	08004971 	.word	0x08004971
 8004958:	08004989 	.word	0x08004989
 800495c:	08004989 	.word	0x08004989
 8004960:	08004989 	.word	0x08004989
 8004964:	08004981 	.word	0x08004981
 8004968:	2300      	movs	r3, #0
 800496a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800496e:	e0d8      	b.n	8004b22 <UART_SetConfig+0x2fe>
 8004970:	2302      	movs	r3, #2
 8004972:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004976:	e0d4      	b.n	8004b22 <UART_SetConfig+0x2fe>
 8004978:	2304      	movs	r3, #4
 800497a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800497e:	e0d0      	b.n	8004b22 <UART_SetConfig+0x2fe>
 8004980:	2308      	movs	r3, #8
 8004982:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004986:	e0cc      	b.n	8004b22 <UART_SetConfig+0x2fe>
 8004988:	2310      	movs	r3, #16
 800498a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800498e:	e0c8      	b.n	8004b22 <UART_SetConfig+0x2fe>
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a5e      	ldr	r2, [pc, #376]	; (8004b10 <UART_SetConfig+0x2ec>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d125      	bne.n	80049e6 <UART_SetConfig+0x1c2>
 800499a:	4b5b      	ldr	r3, [pc, #364]	; (8004b08 <UART_SetConfig+0x2e4>)
 800499c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049a0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80049a4:	2b30      	cmp	r3, #48	; 0x30
 80049a6:	d016      	beq.n	80049d6 <UART_SetConfig+0x1b2>
 80049a8:	2b30      	cmp	r3, #48	; 0x30
 80049aa:	d818      	bhi.n	80049de <UART_SetConfig+0x1ba>
 80049ac:	2b20      	cmp	r3, #32
 80049ae:	d00a      	beq.n	80049c6 <UART_SetConfig+0x1a2>
 80049b0:	2b20      	cmp	r3, #32
 80049b2:	d814      	bhi.n	80049de <UART_SetConfig+0x1ba>
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d002      	beq.n	80049be <UART_SetConfig+0x19a>
 80049b8:	2b10      	cmp	r3, #16
 80049ba:	d008      	beq.n	80049ce <UART_SetConfig+0x1aa>
 80049bc:	e00f      	b.n	80049de <UART_SetConfig+0x1ba>
 80049be:	2300      	movs	r3, #0
 80049c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049c4:	e0ad      	b.n	8004b22 <UART_SetConfig+0x2fe>
 80049c6:	2302      	movs	r3, #2
 80049c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049cc:	e0a9      	b.n	8004b22 <UART_SetConfig+0x2fe>
 80049ce:	2304      	movs	r3, #4
 80049d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049d4:	e0a5      	b.n	8004b22 <UART_SetConfig+0x2fe>
 80049d6:	2308      	movs	r3, #8
 80049d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049dc:	e0a1      	b.n	8004b22 <UART_SetConfig+0x2fe>
 80049de:	2310      	movs	r3, #16
 80049e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049e4:	e09d      	b.n	8004b22 <UART_SetConfig+0x2fe>
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a4a      	ldr	r2, [pc, #296]	; (8004b14 <UART_SetConfig+0x2f0>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d125      	bne.n	8004a3c <UART_SetConfig+0x218>
 80049f0:	4b45      	ldr	r3, [pc, #276]	; (8004b08 <UART_SetConfig+0x2e4>)
 80049f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049f6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80049fa:	2bc0      	cmp	r3, #192	; 0xc0
 80049fc:	d016      	beq.n	8004a2c <UART_SetConfig+0x208>
 80049fe:	2bc0      	cmp	r3, #192	; 0xc0
 8004a00:	d818      	bhi.n	8004a34 <UART_SetConfig+0x210>
 8004a02:	2b80      	cmp	r3, #128	; 0x80
 8004a04:	d00a      	beq.n	8004a1c <UART_SetConfig+0x1f8>
 8004a06:	2b80      	cmp	r3, #128	; 0x80
 8004a08:	d814      	bhi.n	8004a34 <UART_SetConfig+0x210>
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d002      	beq.n	8004a14 <UART_SetConfig+0x1f0>
 8004a0e:	2b40      	cmp	r3, #64	; 0x40
 8004a10:	d008      	beq.n	8004a24 <UART_SetConfig+0x200>
 8004a12:	e00f      	b.n	8004a34 <UART_SetConfig+0x210>
 8004a14:	2300      	movs	r3, #0
 8004a16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a1a:	e082      	b.n	8004b22 <UART_SetConfig+0x2fe>
 8004a1c:	2302      	movs	r3, #2
 8004a1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a22:	e07e      	b.n	8004b22 <UART_SetConfig+0x2fe>
 8004a24:	2304      	movs	r3, #4
 8004a26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a2a:	e07a      	b.n	8004b22 <UART_SetConfig+0x2fe>
 8004a2c:	2308      	movs	r3, #8
 8004a2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a32:	e076      	b.n	8004b22 <UART_SetConfig+0x2fe>
 8004a34:	2310      	movs	r3, #16
 8004a36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a3a:	e072      	b.n	8004b22 <UART_SetConfig+0x2fe>
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a35      	ldr	r2, [pc, #212]	; (8004b18 <UART_SetConfig+0x2f4>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d12a      	bne.n	8004a9c <UART_SetConfig+0x278>
 8004a46:	4b30      	ldr	r3, [pc, #192]	; (8004b08 <UART_SetConfig+0x2e4>)
 8004a48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a50:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a54:	d01a      	beq.n	8004a8c <UART_SetConfig+0x268>
 8004a56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a5a:	d81b      	bhi.n	8004a94 <UART_SetConfig+0x270>
 8004a5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a60:	d00c      	beq.n	8004a7c <UART_SetConfig+0x258>
 8004a62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a66:	d815      	bhi.n	8004a94 <UART_SetConfig+0x270>
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d003      	beq.n	8004a74 <UART_SetConfig+0x250>
 8004a6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a70:	d008      	beq.n	8004a84 <UART_SetConfig+0x260>
 8004a72:	e00f      	b.n	8004a94 <UART_SetConfig+0x270>
 8004a74:	2300      	movs	r3, #0
 8004a76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a7a:	e052      	b.n	8004b22 <UART_SetConfig+0x2fe>
 8004a7c:	2302      	movs	r3, #2
 8004a7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a82:	e04e      	b.n	8004b22 <UART_SetConfig+0x2fe>
 8004a84:	2304      	movs	r3, #4
 8004a86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a8a:	e04a      	b.n	8004b22 <UART_SetConfig+0x2fe>
 8004a8c:	2308      	movs	r3, #8
 8004a8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a92:	e046      	b.n	8004b22 <UART_SetConfig+0x2fe>
 8004a94:	2310      	movs	r3, #16
 8004a96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a9a:	e042      	b.n	8004b22 <UART_SetConfig+0x2fe>
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a17      	ldr	r2, [pc, #92]	; (8004b00 <UART_SetConfig+0x2dc>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d13a      	bne.n	8004b1c <UART_SetConfig+0x2f8>
 8004aa6:	4b18      	ldr	r3, [pc, #96]	; (8004b08 <UART_SetConfig+0x2e4>)
 8004aa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004ab0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ab4:	d01a      	beq.n	8004aec <UART_SetConfig+0x2c8>
 8004ab6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004aba:	d81b      	bhi.n	8004af4 <UART_SetConfig+0x2d0>
 8004abc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ac0:	d00c      	beq.n	8004adc <UART_SetConfig+0x2b8>
 8004ac2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ac6:	d815      	bhi.n	8004af4 <UART_SetConfig+0x2d0>
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d003      	beq.n	8004ad4 <UART_SetConfig+0x2b0>
 8004acc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ad0:	d008      	beq.n	8004ae4 <UART_SetConfig+0x2c0>
 8004ad2:	e00f      	b.n	8004af4 <UART_SetConfig+0x2d0>
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ada:	e022      	b.n	8004b22 <UART_SetConfig+0x2fe>
 8004adc:	2302      	movs	r3, #2
 8004ade:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ae2:	e01e      	b.n	8004b22 <UART_SetConfig+0x2fe>
 8004ae4:	2304      	movs	r3, #4
 8004ae6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004aea:	e01a      	b.n	8004b22 <UART_SetConfig+0x2fe>
 8004aec:	2308      	movs	r3, #8
 8004aee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004af2:	e016      	b.n	8004b22 <UART_SetConfig+0x2fe>
 8004af4:	2310      	movs	r3, #16
 8004af6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004afa:	e012      	b.n	8004b22 <UART_SetConfig+0x2fe>
 8004afc:	cfff69f3 	.word	0xcfff69f3
 8004b00:	40008000 	.word	0x40008000
 8004b04:	40013800 	.word	0x40013800
 8004b08:	40021000 	.word	0x40021000
 8004b0c:	40004400 	.word	0x40004400
 8004b10:	40004800 	.word	0x40004800
 8004b14:	40004c00 	.word	0x40004c00
 8004b18:	40005000 	.word	0x40005000
 8004b1c:	2310      	movs	r3, #16
 8004b1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4ab0      	ldr	r2, [pc, #704]	; (8004de8 <UART_SetConfig+0x5c4>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	f040 809b 	bne.w	8004c64 <UART_SetConfig+0x440>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004b2e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004b32:	2b08      	cmp	r3, #8
 8004b34:	d827      	bhi.n	8004b86 <UART_SetConfig+0x362>
 8004b36:	a201      	add	r2, pc, #4	; (adr r2, 8004b3c <UART_SetConfig+0x318>)
 8004b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b3c:	08004b61 	.word	0x08004b61
 8004b40:	08004b69 	.word	0x08004b69
 8004b44:	08004b71 	.word	0x08004b71
 8004b48:	08004b87 	.word	0x08004b87
 8004b4c:	08004b77 	.word	0x08004b77
 8004b50:	08004b87 	.word	0x08004b87
 8004b54:	08004b87 	.word	0x08004b87
 8004b58:	08004b87 	.word	0x08004b87
 8004b5c:	08004b7f 	.word	0x08004b7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b60:	f7fe fec6 	bl	80038f0 <HAL_RCC_GetPCLK1Freq>
 8004b64:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004b66:	e014      	b.n	8004b92 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b68:	f7fe fed6 	bl	8003918 <HAL_RCC_GetPCLK2Freq>
 8004b6c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004b6e:	e010      	b.n	8004b92 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b70:	4b9e      	ldr	r3, [pc, #632]	; (8004dec <UART_SetConfig+0x5c8>)
 8004b72:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004b74:	e00d      	b.n	8004b92 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b76:	f7fe fe09 	bl	800378c <HAL_RCC_GetSysClockFreq>
 8004b7a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004b7c:	e009      	b.n	8004b92 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b82:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004b84:	e005      	b.n	8004b92 <UART_SetConfig+0x36e>
      default:
        pclk = 0U;
 8004b86:	2300      	movs	r3, #0
 8004b88:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004b90:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	f000 8130 	beq.w	8004dfa <UART_SetConfig+0x5d6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9e:	4a94      	ldr	r2, [pc, #592]	; (8004df0 <UART_SetConfig+0x5cc>)
 8004ba0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba8:	fbb3 f3f2 	udiv	r3, r3, r2
 8004bac:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	685a      	ldr	r2, [r3, #4]
 8004bb2:	4613      	mov	r3, r2
 8004bb4:	005b      	lsls	r3, r3, #1
 8004bb6:	4413      	add	r3, r2
 8004bb8:	69ba      	ldr	r2, [r7, #24]
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	d305      	bcc.n	8004bca <UART_SetConfig+0x3a6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004bc4:	69ba      	ldr	r2, [r7, #24]
 8004bc6:	429a      	cmp	r2, r3
 8004bc8:	d903      	bls.n	8004bd2 <UART_SetConfig+0x3ae>
      {
        ret = HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004bd0:	e113      	b.n	8004dfa <UART_SetConfig+0x5d6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	60bb      	str	r3, [r7, #8]
 8004bd8:	60fa      	str	r2, [r7, #12]
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bde:	4a84      	ldr	r2, [pc, #528]	; (8004df0 <UART_SetConfig+0x5cc>)
 8004be0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	2200      	movs	r2, #0
 8004be8:	603b      	str	r3, [r7, #0]
 8004bea:	607a      	str	r2, [r7, #4]
 8004bec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004bf0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004bf4:	f7fb fb1e 	bl	8000234 <__aeabi_uldivmod>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	460b      	mov	r3, r1
 8004bfc:	4610      	mov	r0, r2
 8004bfe:	4619      	mov	r1, r3
 8004c00:	f04f 0200 	mov.w	r2, #0
 8004c04:	f04f 0300 	mov.w	r3, #0
 8004c08:	020b      	lsls	r3, r1, #8
 8004c0a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004c0e:	0202      	lsls	r2, r0, #8
 8004c10:	6979      	ldr	r1, [r7, #20]
 8004c12:	6849      	ldr	r1, [r1, #4]
 8004c14:	0849      	lsrs	r1, r1, #1
 8004c16:	2000      	movs	r0, #0
 8004c18:	460c      	mov	r4, r1
 8004c1a:	4605      	mov	r5, r0
 8004c1c:	eb12 0804 	adds.w	r8, r2, r4
 8004c20:	eb43 0905 	adc.w	r9, r3, r5
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	469a      	mov	sl, r3
 8004c2c:	4693      	mov	fp, r2
 8004c2e:	4652      	mov	r2, sl
 8004c30:	465b      	mov	r3, fp
 8004c32:	4640      	mov	r0, r8
 8004c34:	4649      	mov	r1, r9
 8004c36:	f7fb fafd 	bl	8000234 <__aeabi_uldivmod>
 8004c3a:	4602      	mov	r2, r0
 8004c3c:	460b      	mov	r3, r1
 8004c3e:	4613      	mov	r3, r2
 8004c40:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004c42:	6a3b      	ldr	r3, [r7, #32]
 8004c44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c48:	d308      	bcc.n	8004c5c <UART_SetConfig+0x438>
 8004c4a:	6a3b      	ldr	r3, [r7, #32]
 8004c4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c50:	d204      	bcs.n	8004c5c <UART_SetConfig+0x438>
        {
          huart->Instance->BRR = usartdiv;
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	6a3a      	ldr	r2, [r7, #32]
 8004c58:	60da      	str	r2, [r3, #12]
 8004c5a:	e0ce      	b.n	8004dfa <UART_SetConfig+0x5d6>
        }
        else
        {
          ret = HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004c62:	e0ca      	b.n	8004dfa <UART_SetConfig+0x5d6>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	69db      	ldr	r3, [r3, #28]
 8004c68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c6c:	d166      	bne.n	8004d3c <UART_SetConfig+0x518>
  {
    switch (clocksource)
 8004c6e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004c72:	2b08      	cmp	r3, #8
 8004c74:	d827      	bhi.n	8004cc6 <UART_SetConfig+0x4a2>
 8004c76:	a201      	add	r2, pc, #4	; (adr r2, 8004c7c <UART_SetConfig+0x458>)
 8004c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c7c:	08004ca1 	.word	0x08004ca1
 8004c80:	08004ca9 	.word	0x08004ca9
 8004c84:	08004cb1 	.word	0x08004cb1
 8004c88:	08004cc7 	.word	0x08004cc7
 8004c8c:	08004cb7 	.word	0x08004cb7
 8004c90:	08004cc7 	.word	0x08004cc7
 8004c94:	08004cc7 	.word	0x08004cc7
 8004c98:	08004cc7 	.word	0x08004cc7
 8004c9c:	08004cbf 	.word	0x08004cbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ca0:	f7fe fe26 	bl	80038f0 <HAL_RCC_GetPCLK1Freq>
 8004ca4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004ca6:	e014      	b.n	8004cd2 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ca8:	f7fe fe36 	bl	8003918 <HAL_RCC_GetPCLK2Freq>
 8004cac:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004cae:	e010      	b.n	8004cd2 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004cb0:	4b4e      	ldr	r3, [pc, #312]	; (8004dec <UART_SetConfig+0x5c8>)
 8004cb2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004cb4:	e00d      	b.n	8004cd2 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cb6:	f7fe fd69 	bl	800378c <HAL_RCC_GetSysClockFreq>
 8004cba:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004cbc:	e009      	b.n	8004cd2 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cc2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004cc4:	e005      	b.n	8004cd2 <UART_SetConfig+0x4ae>
      default:
        pclk = 0U;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004cd0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	f000 8090 	beq.w	8004dfa <UART_SetConfig+0x5d6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cde:	4a44      	ldr	r2, [pc, #272]	; (8004df0 <UART_SetConfig+0x5cc>)
 8004ce0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ce4:	461a      	mov	r2, r3
 8004ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce8:	fbb3 f3f2 	udiv	r3, r3, r2
 8004cec:	005a      	lsls	r2, r3, #1
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	085b      	lsrs	r3, r3, #1
 8004cf4:	441a      	add	r2, r3
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cfe:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d00:	6a3b      	ldr	r3, [r7, #32]
 8004d02:	2b0f      	cmp	r3, #15
 8004d04:	d916      	bls.n	8004d34 <UART_SetConfig+0x510>
 8004d06:	6a3b      	ldr	r3, [r7, #32]
 8004d08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d0c:	d212      	bcs.n	8004d34 <UART_SetConfig+0x510>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d0e:	6a3b      	ldr	r3, [r7, #32]
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	f023 030f 	bic.w	r3, r3, #15
 8004d16:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d18:	6a3b      	ldr	r3, [r7, #32]
 8004d1a:	085b      	lsrs	r3, r3, #1
 8004d1c:	b29b      	uxth	r3, r3
 8004d1e:	f003 0307 	and.w	r3, r3, #7
 8004d22:	b29a      	uxth	r2, r3
 8004d24:	8bfb      	ldrh	r3, [r7, #30]
 8004d26:	4313      	orrs	r3, r2
 8004d28:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	8bfa      	ldrh	r2, [r7, #30]
 8004d30:	60da      	str	r2, [r3, #12]
 8004d32:	e062      	b.n	8004dfa <UART_SetConfig+0x5d6>
      }
      else
      {
        ret = HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004d3a:	e05e      	b.n	8004dfa <UART_SetConfig+0x5d6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004d3c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004d40:	2b08      	cmp	r3, #8
 8004d42:	d828      	bhi.n	8004d96 <UART_SetConfig+0x572>
 8004d44:	a201      	add	r2, pc, #4	; (adr r2, 8004d4c <UART_SetConfig+0x528>)
 8004d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d4a:	bf00      	nop
 8004d4c:	08004d71 	.word	0x08004d71
 8004d50:	08004d79 	.word	0x08004d79
 8004d54:	08004d81 	.word	0x08004d81
 8004d58:	08004d97 	.word	0x08004d97
 8004d5c:	08004d87 	.word	0x08004d87
 8004d60:	08004d97 	.word	0x08004d97
 8004d64:	08004d97 	.word	0x08004d97
 8004d68:	08004d97 	.word	0x08004d97
 8004d6c:	08004d8f 	.word	0x08004d8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d70:	f7fe fdbe 	bl	80038f0 <HAL_RCC_GetPCLK1Freq>
 8004d74:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004d76:	e014      	b.n	8004da2 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d78:	f7fe fdce 	bl	8003918 <HAL_RCC_GetPCLK2Freq>
 8004d7c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004d7e:	e010      	b.n	8004da2 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d80:	4b1a      	ldr	r3, [pc, #104]	; (8004dec <UART_SetConfig+0x5c8>)
 8004d82:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004d84:	e00d      	b.n	8004da2 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d86:	f7fe fd01 	bl	800378c <HAL_RCC_GetSysClockFreq>
 8004d8a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004d8c:	e009      	b.n	8004da2 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d92:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004d94:	e005      	b.n	8004da2 <UART_SetConfig+0x57e>
      default:
        pclk = 0U;
 8004d96:	2300      	movs	r3, #0
 8004d98:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004da0:	bf00      	nop
    }

    if (pclk != 0U)
 8004da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d028      	beq.n	8004dfa <UART_SetConfig+0x5d6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dac:	4a10      	ldr	r2, [pc, #64]	; (8004df0 <UART_SetConfig+0x5cc>)
 8004dae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004db2:	461a      	mov	r2, r3
 8004db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db6:	fbb3 f2f2 	udiv	r2, r3, r2
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	085b      	lsrs	r3, r3, #1
 8004dc0:	441a      	add	r2, r3
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dca:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004dcc:	6a3b      	ldr	r3, [r7, #32]
 8004dce:	2b0f      	cmp	r3, #15
 8004dd0:	d910      	bls.n	8004df4 <UART_SetConfig+0x5d0>
 8004dd2:	6a3b      	ldr	r3, [r7, #32]
 8004dd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dd8:	d20c      	bcs.n	8004df4 <UART_SetConfig+0x5d0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004dda:	6a3b      	ldr	r3, [r7, #32]
 8004ddc:	b29a      	uxth	r2, r3
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	60da      	str	r2, [r3, #12]
 8004de4:	e009      	b.n	8004dfa <UART_SetConfig+0x5d6>
 8004de6:	bf00      	nop
 8004de8:	40008000 	.word	0x40008000
 8004dec:	00f42400 	.word	0x00f42400
 8004df0:	0800590c 	.word	0x0800590c
      }
      else
      {
        ret = HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	2201      	movs	r2, #1
 8004e06:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	2200      	movs	r2, #0
 8004e14:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004e16:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3730      	adds	r7, #48	; 0x30
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004e24 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b083      	sub	sp, #12
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e30:	f003 0301 	and.w	r3, r3, #1
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d00a      	beq.n	8004e4e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	430a      	orrs	r2, r1
 8004e4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e52:	f003 0302 	and.w	r3, r3, #2
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d00a      	beq.n	8004e70 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	430a      	orrs	r2, r1
 8004e6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e74:	f003 0304 	and.w	r3, r3, #4
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d00a      	beq.n	8004e92 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	430a      	orrs	r2, r1
 8004e90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e96:	f003 0308 	and.w	r3, r3, #8
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d00a      	beq.n	8004eb4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	430a      	orrs	r2, r1
 8004eb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eb8:	f003 0310 	and.w	r3, r3, #16
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d00a      	beq.n	8004ed6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	430a      	orrs	r2, r1
 8004ed4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eda:	f003 0320 	and.w	r3, r3, #32
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d00a      	beq.n	8004ef8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	430a      	orrs	r2, r1
 8004ef6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004efc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d01a      	beq.n	8004f3a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	430a      	orrs	r2, r1
 8004f18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f22:	d10a      	bne.n	8004f3a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	430a      	orrs	r2, r1
 8004f38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d00a      	beq.n	8004f5c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	430a      	orrs	r2, r1
 8004f5a:	605a      	str	r2, [r3, #4]
  }
}
 8004f5c:	bf00      	nop
 8004f5e:	370c      	adds	r7, #12
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr

08004f68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b098      	sub	sp, #96	; 0x60
 8004f6c:	af02      	add	r7, sp, #8
 8004f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2200      	movs	r2, #0
 8004f74:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004f78:	f7fc f992 	bl	80012a0 <HAL_GetTick>
 8004f7c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f003 0308 	and.w	r3, r3, #8
 8004f88:	2b08      	cmp	r3, #8
 8004f8a:	d12f      	bne.n	8004fec <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f8c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f90:	9300      	str	r3, [sp, #0]
 8004f92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f94:	2200      	movs	r2, #0
 8004f96:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f000 f88e 	bl	80050bc <UART_WaitOnFlagUntilTimeout>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d022      	beq.n	8004fec <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fae:	e853 3f00 	ldrex	r3, [r3]
 8004fb2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004fb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fba:	653b      	str	r3, [r7, #80]	; 0x50
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	461a      	mov	r2, r3
 8004fc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fc4:	647b      	str	r3, [r7, #68]	; 0x44
 8004fc6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fc8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004fca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004fcc:	e841 2300 	strex	r3, r2, [r1]
 8004fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004fd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d1e6      	bne.n	8004fa6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2220      	movs	r2, #32
 8004fdc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004fe8:	2303      	movs	r3, #3
 8004fea:	e063      	b.n	80050b4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f003 0304 	and.w	r3, r3, #4
 8004ff6:	2b04      	cmp	r3, #4
 8004ff8:	d149      	bne.n	800508e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ffa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ffe:	9300      	str	r3, [sp, #0]
 8005000:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005002:	2200      	movs	r2, #0
 8005004:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f000 f857 	bl	80050bc <UART_WaitOnFlagUntilTimeout>
 800500e:	4603      	mov	r3, r0
 8005010:	2b00      	cmp	r3, #0
 8005012:	d03c      	beq.n	800508e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800501a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501c:	e853 3f00 	ldrex	r3, [r3]
 8005020:	623b      	str	r3, [r7, #32]
   return(result);
 8005022:	6a3b      	ldr	r3, [r7, #32]
 8005024:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005028:	64fb      	str	r3, [r7, #76]	; 0x4c
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	461a      	mov	r2, r3
 8005030:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005032:	633b      	str	r3, [r7, #48]	; 0x30
 8005034:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005036:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005038:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800503a:	e841 2300 	strex	r3, r2, [r1]
 800503e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005042:	2b00      	cmp	r3, #0
 8005044:	d1e6      	bne.n	8005014 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	3308      	adds	r3, #8
 800504c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	e853 3f00 	ldrex	r3, [r3]
 8005054:	60fb      	str	r3, [r7, #12]
   return(result);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	f023 0301 	bic.w	r3, r3, #1
 800505c:	64bb      	str	r3, [r7, #72]	; 0x48
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	3308      	adds	r3, #8
 8005064:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005066:	61fa      	str	r2, [r7, #28]
 8005068:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800506a:	69b9      	ldr	r1, [r7, #24]
 800506c:	69fa      	ldr	r2, [r7, #28]
 800506e:	e841 2300 	strex	r3, r2, [r1]
 8005072:	617b      	str	r3, [r7, #20]
   return(result);
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d1e5      	bne.n	8005046 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2220      	movs	r2, #32
 800507e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2200      	movs	r2, #0
 8005086:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800508a:	2303      	movs	r3, #3
 800508c:	e012      	b.n	80050b4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2220      	movs	r2, #32
 8005092:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2220      	movs	r2, #32
 800509a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2200      	movs	r2, #0
 80050a2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2200      	movs	r2, #0
 80050a8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2200      	movs	r2, #0
 80050ae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80050b2:	2300      	movs	r3, #0
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	3758      	adds	r7, #88	; 0x58
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}

080050bc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b084      	sub	sp, #16
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	60f8      	str	r0, [r7, #12]
 80050c4:	60b9      	str	r1, [r7, #8]
 80050c6:	603b      	str	r3, [r7, #0]
 80050c8:	4613      	mov	r3, r2
 80050ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050cc:	e049      	b.n	8005162 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050ce:	69bb      	ldr	r3, [r7, #24]
 80050d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050d4:	d045      	beq.n	8005162 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050d6:	f7fc f8e3 	bl	80012a0 <HAL_GetTick>
 80050da:	4602      	mov	r2, r0
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	1ad3      	subs	r3, r2, r3
 80050e0:	69ba      	ldr	r2, [r7, #24]
 80050e2:	429a      	cmp	r2, r3
 80050e4:	d302      	bcc.n	80050ec <UART_WaitOnFlagUntilTimeout+0x30>
 80050e6:	69bb      	ldr	r3, [r7, #24]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d101      	bne.n	80050f0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80050ec:	2303      	movs	r3, #3
 80050ee:	e048      	b.n	8005182 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f003 0304 	and.w	r3, r3, #4
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d031      	beq.n	8005162 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	69db      	ldr	r3, [r3, #28]
 8005104:	f003 0308 	and.w	r3, r3, #8
 8005108:	2b08      	cmp	r3, #8
 800510a:	d110      	bne.n	800512e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	2208      	movs	r2, #8
 8005112:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005114:	68f8      	ldr	r0, [r7, #12]
 8005116:	f000 f838 	bl	800518a <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2208      	movs	r2, #8
 800511e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2200      	movs	r2, #0
 8005126:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	e029      	b.n	8005182 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	69db      	ldr	r3, [r3, #28]
 8005134:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005138:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800513c:	d111      	bne.n	8005162 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005146:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005148:	68f8      	ldr	r0, [r7, #12]
 800514a:	f000 f81e 	bl	800518a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2220      	movs	r2, #32
 8005152:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2200      	movs	r2, #0
 800515a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800515e:	2303      	movs	r3, #3
 8005160:	e00f      	b.n	8005182 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	69da      	ldr	r2, [r3, #28]
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	4013      	ands	r3, r2
 800516c:	68ba      	ldr	r2, [r7, #8]
 800516e:	429a      	cmp	r2, r3
 8005170:	bf0c      	ite	eq
 8005172:	2301      	moveq	r3, #1
 8005174:	2300      	movne	r3, #0
 8005176:	b2db      	uxtb	r3, r3
 8005178:	461a      	mov	r2, r3
 800517a:	79fb      	ldrb	r3, [r7, #7]
 800517c:	429a      	cmp	r2, r3
 800517e:	d0a6      	beq.n	80050ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005180:	2300      	movs	r3, #0
}
 8005182:	4618      	mov	r0, r3
 8005184:	3710      	adds	r7, #16
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}

0800518a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800518a:	b480      	push	{r7}
 800518c:	b095      	sub	sp, #84	; 0x54
 800518e:	af00      	add	r7, sp, #0
 8005190:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800519a:	e853 3f00 	ldrex	r3, [r3]
 800519e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80051a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051a2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80051a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	461a      	mov	r2, r3
 80051ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051b0:	643b      	str	r3, [r7, #64]	; 0x40
 80051b2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051b4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80051b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80051b8:	e841 2300 	strex	r3, r2, [r1]
 80051bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80051be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d1e6      	bne.n	8005192 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	3308      	adds	r3, #8
 80051ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051cc:	6a3b      	ldr	r3, [r7, #32]
 80051ce:	e853 3f00 	ldrex	r3, [r3]
 80051d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80051d4:	69fb      	ldr	r3, [r7, #28]
 80051d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051da:	f023 0301 	bic.w	r3, r3, #1
 80051de:	64bb      	str	r3, [r7, #72]	; 0x48
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	3308      	adds	r3, #8
 80051e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80051e8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80051ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80051ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051f0:	e841 2300 	strex	r3, r2, [r1]
 80051f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80051f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d1e3      	bne.n	80051c4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005200:	2b01      	cmp	r3, #1
 8005202:	d118      	bne.n	8005236 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	e853 3f00 	ldrex	r3, [r3]
 8005210:	60bb      	str	r3, [r7, #8]
   return(result);
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	f023 0310 	bic.w	r3, r3, #16
 8005218:	647b      	str	r3, [r7, #68]	; 0x44
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	461a      	mov	r2, r3
 8005220:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005222:	61bb      	str	r3, [r7, #24]
 8005224:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005226:	6979      	ldr	r1, [r7, #20]
 8005228:	69ba      	ldr	r2, [r7, #24]
 800522a:	e841 2300 	strex	r3, r2, [r1]
 800522e:	613b      	str	r3, [r7, #16]
   return(result);
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d1e6      	bne.n	8005204 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2220      	movs	r2, #32
 800523a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2200      	movs	r2, #0
 8005242:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2200      	movs	r2, #0
 8005248:	675a      	str	r2, [r3, #116]	; 0x74
}
 800524a:	bf00      	nop
 800524c:	3754      	adds	r7, #84	; 0x54
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr

08005256 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005256:	b480      	push	{r7}
 8005258:	b085      	sub	sp, #20
 800525a:	af00      	add	r7, sp, #0
 800525c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005264:	2b01      	cmp	r3, #1
 8005266:	d101      	bne.n	800526c <HAL_UARTEx_DisableFifoMode+0x16>
 8005268:	2302      	movs	r3, #2
 800526a:	e027      	b.n	80052bc <HAL_UARTEx_DisableFifoMode+0x66>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2201      	movs	r2, #1
 8005270:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2224      	movs	r2, #36	; 0x24
 8005278:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f022 0201 	bic.w	r2, r2, #1
 8005292:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800529a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2200      	movs	r2, #0
 80052a0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	68fa      	ldr	r2, [r7, #12]
 80052a8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2220      	movs	r2, #32
 80052ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2200      	movs	r2, #0
 80052b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80052ba:	2300      	movs	r3, #0
}
 80052bc:	4618      	mov	r0, r3
 80052be:	3714      	adds	r7, #20
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr

080052c8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b084      	sub	sp, #16
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80052d8:	2b01      	cmp	r3, #1
 80052da:	d101      	bne.n	80052e0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80052dc:	2302      	movs	r3, #2
 80052de:	e02d      	b.n	800533c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2201      	movs	r2, #1
 80052e4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2224      	movs	r2, #36	; 0x24
 80052ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f022 0201 	bic.w	r2, r2, #1
 8005306:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	683a      	ldr	r2, [r7, #0]
 8005318:	430a      	orrs	r2, r1
 800531a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f000 f84f 	bl	80053c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	68fa      	ldr	r2, [r7, #12]
 8005328:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2220      	movs	r2, #32
 800532e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2200      	movs	r2, #0
 8005336:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800533a:	2300      	movs	r3, #0
}
 800533c:	4618      	mov	r0, r3
 800533e:	3710      	adds	r7, #16
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}

08005344 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b084      	sub	sp, #16
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005354:	2b01      	cmp	r3, #1
 8005356:	d101      	bne.n	800535c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005358:	2302      	movs	r3, #2
 800535a:	e02d      	b.n	80053b8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2201      	movs	r2, #1
 8005360:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2224      	movs	r2, #36	; 0x24
 8005368:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f022 0201 	bic.w	r2, r2, #1
 8005382:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	683a      	ldr	r2, [r7, #0]
 8005394:	430a      	orrs	r2, r1
 8005396:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	f000 f811 	bl	80053c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	68fa      	ldr	r2, [r7, #12]
 80053a4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2220      	movs	r2, #32
 80053aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2200      	movs	r2, #0
 80053b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80053b6:	2300      	movs	r3, #0
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	3710      	adds	r7, #16
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}

080053c0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b085      	sub	sp, #20
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d108      	bne.n	80053e2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2201      	movs	r2, #1
 80053d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2201      	movs	r2, #1
 80053dc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80053e0:	e031      	b.n	8005446 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80053e2:	2308      	movs	r3, #8
 80053e4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80053e6:	2308      	movs	r3, #8
 80053e8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	0e5b      	lsrs	r3, r3, #25
 80053f2:	b2db      	uxtb	r3, r3
 80053f4:	f003 0307 	and.w	r3, r3, #7
 80053f8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	0f5b      	lsrs	r3, r3, #29
 8005402:	b2db      	uxtb	r3, r3
 8005404:	f003 0307 	and.w	r3, r3, #7
 8005408:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800540a:	7bbb      	ldrb	r3, [r7, #14]
 800540c:	7b3a      	ldrb	r2, [r7, #12]
 800540e:	4911      	ldr	r1, [pc, #68]	; (8005454 <UARTEx_SetNbDataToProcess+0x94>)
 8005410:	5c8a      	ldrb	r2, [r1, r2]
 8005412:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005416:	7b3a      	ldrb	r2, [r7, #12]
 8005418:	490f      	ldr	r1, [pc, #60]	; (8005458 <UARTEx_SetNbDataToProcess+0x98>)
 800541a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800541c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005420:	b29a      	uxth	r2, r3
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005428:	7bfb      	ldrb	r3, [r7, #15]
 800542a:	7b7a      	ldrb	r2, [r7, #13]
 800542c:	4909      	ldr	r1, [pc, #36]	; (8005454 <UARTEx_SetNbDataToProcess+0x94>)
 800542e:	5c8a      	ldrb	r2, [r1, r2]
 8005430:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005434:	7b7a      	ldrb	r2, [r7, #13]
 8005436:	4908      	ldr	r1, [pc, #32]	; (8005458 <UARTEx_SetNbDataToProcess+0x98>)
 8005438:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800543a:	fb93 f3f2 	sdiv	r3, r3, r2
 800543e:	b29a      	uxth	r2, r3
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005446:	bf00      	nop
 8005448:	3714      	adds	r7, #20
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr
 8005452:	bf00      	nop
 8005454:	08005924 	.word	0x08005924
 8005458:	0800592c 	.word	0x0800592c

0800545c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800545c:	b480      	push	{r7}
 800545e:	b08b      	sub	sp, #44	; 0x2c
 8005460:	af00      	add	r7, sp, #0
 8005462:	60f8      	str	r0, [r7, #12]
 8005464:	60b9      	str	r1, [r7, #8]
 8005466:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	fa93 f3a3 	rbit	r3, r3
 8005476:	613b      	str	r3, [r7, #16]
  return result;
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800547c:	69bb      	ldr	r3, [r7, #24]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d101      	bne.n	8005486 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8005482:	2320      	movs	r3, #32
 8005484:	e003      	b.n	800548e <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8005486:	69bb      	ldr	r3, [r7, #24]
 8005488:	fab3 f383 	clz	r3, r3
 800548c:	b2db      	uxtb	r3, r3
 800548e:	005b      	lsls	r3, r3, #1
 8005490:	2103      	movs	r1, #3
 8005492:	fa01 f303 	lsl.w	r3, r1, r3
 8005496:	43db      	mvns	r3, r3
 8005498:	401a      	ands	r2, r3
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800549e:	6a3b      	ldr	r3, [r7, #32]
 80054a0:	fa93 f3a3 	rbit	r3, r3
 80054a4:	61fb      	str	r3, [r7, #28]
  return result;
 80054a6:	69fb      	ldr	r3, [r7, #28]
 80054a8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80054aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d101      	bne.n	80054b4 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80054b0:	2320      	movs	r3, #32
 80054b2:	e003      	b.n	80054bc <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80054b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b6:	fab3 f383 	clz	r3, r3
 80054ba:	b2db      	uxtb	r3, r3
 80054bc:	005b      	lsls	r3, r3, #1
 80054be:	6879      	ldr	r1, [r7, #4]
 80054c0:	fa01 f303 	lsl.w	r3, r1, r3
 80054c4:	431a      	orrs	r2, r3
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	601a      	str	r2, [r3, #0]
}
 80054ca:	bf00      	nop
 80054cc:	372c      	adds	r7, #44	; 0x2c
 80054ce:	46bd      	mov	sp, r7
 80054d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d4:	4770      	bx	lr

080054d6 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80054d6:	b480      	push	{r7}
 80054d8:	b085      	sub	sp, #20
 80054da:	af00      	add	r7, sp, #0
 80054dc:	60f8      	str	r0, [r7, #12]
 80054de:	60b9      	str	r1, [r7, #8]
 80054e0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	685a      	ldr	r2, [r3, #4]
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	43db      	mvns	r3, r3
 80054ea:	401a      	ands	r2, r3
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	6879      	ldr	r1, [r7, #4]
 80054f0:	fb01 f303 	mul.w	r3, r1, r3
 80054f4:	431a      	orrs	r2, r3
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	605a      	str	r2, [r3, #4]
}
 80054fa:	bf00      	nop
 80054fc:	3714      	adds	r7, #20
 80054fe:	46bd      	mov	sp, r7
 8005500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005504:	4770      	bx	lr

08005506 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8005506:	b480      	push	{r7}
 8005508:	b08b      	sub	sp, #44	; 0x2c
 800550a:	af00      	add	r7, sp, #0
 800550c:	60f8      	str	r0, [r7, #12]
 800550e:	60b9      	str	r1, [r7, #8]
 8005510:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	689a      	ldr	r2, [r3, #8]
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	fa93 f3a3 	rbit	r3, r3
 8005520:	613b      	str	r3, [r7, #16]
  return result;
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005526:	69bb      	ldr	r3, [r7, #24]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d101      	bne.n	8005530 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800552c:	2320      	movs	r3, #32
 800552e:	e003      	b.n	8005538 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8005530:	69bb      	ldr	r3, [r7, #24]
 8005532:	fab3 f383 	clz	r3, r3
 8005536:	b2db      	uxtb	r3, r3
 8005538:	005b      	lsls	r3, r3, #1
 800553a:	2103      	movs	r1, #3
 800553c:	fa01 f303 	lsl.w	r3, r1, r3
 8005540:	43db      	mvns	r3, r3
 8005542:	401a      	ands	r2, r3
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005548:	6a3b      	ldr	r3, [r7, #32]
 800554a:	fa93 f3a3 	rbit	r3, r3
 800554e:	61fb      	str	r3, [r7, #28]
  return result;
 8005550:	69fb      	ldr	r3, [r7, #28]
 8005552:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005556:	2b00      	cmp	r3, #0
 8005558:	d101      	bne.n	800555e <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800555a:	2320      	movs	r3, #32
 800555c:	e003      	b.n	8005566 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800555e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005560:	fab3 f383 	clz	r3, r3
 8005564:	b2db      	uxtb	r3, r3
 8005566:	005b      	lsls	r3, r3, #1
 8005568:	6879      	ldr	r1, [r7, #4]
 800556a:	fa01 f303 	lsl.w	r3, r1, r3
 800556e:	431a      	orrs	r2, r3
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8005574:	bf00      	nop
 8005576:	372c      	adds	r7, #44	; 0x2c
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr

08005580 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8005580:	b480      	push	{r7}
 8005582:	b08b      	sub	sp, #44	; 0x2c
 8005584:	af00      	add	r7, sp, #0
 8005586:	60f8      	str	r0, [r7, #12]
 8005588:	60b9      	str	r1, [r7, #8]
 800558a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	68da      	ldr	r2, [r3, #12]
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	fa93 f3a3 	rbit	r3, r3
 800559a:	613b      	str	r3, [r7, #16]
  return result;
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80055a0:	69bb      	ldr	r3, [r7, #24]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d101      	bne.n	80055aa <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80055a6:	2320      	movs	r3, #32
 80055a8:	e003      	b.n	80055b2 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80055aa:	69bb      	ldr	r3, [r7, #24]
 80055ac:	fab3 f383 	clz	r3, r3
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	005b      	lsls	r3, r3, #1
 80055b4:	2103      	movs	r1, #3
 80055b6:	fa01 f303 	lsl.w	r3, r1, r3
 80055ba:	43db      	mvns	r3, r3
 80055bc:	401a      	ands	r2, r3
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055c2:	6a3b      	ldr	r3, [r7, #32]
 80055c4:	fa93 f3a3 	rbit	r3, r3
 80055c8:	61fb      	str	r3, [r7, #28]
  return result;
 80055ca:	69fb      	ldr	r3, [r7, #28]
 80055cc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80055ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d101      	bne.n	80055d8 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80055d4:	2320      	movs	r3, #32
 80055d6:	e003      	b.n	80055e0 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80055d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055da:	fab3 f383 	clz	r3, r3
 80055de:	b2db      	uxtb	r3, r3
 80055e0:	005b      	lsls	r3, r3, #1
 80055e2:	6879      	ldr	r1, [r7, #4]
 80055e4:	fa01 f303 	lsl.w	r3, r1, r3
 80055e8:	431a      	orrs	r2, r3
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	60da      	str	r2, [r3, #12]
}
 80055ee:	bf00      	nop
 80055f0:	372c      	adds	r7, #44	; 0x2c
 80055f2:	46bd      	mov	sp, r7
 80055f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f8:	4770      	bx	lr

080055fa <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80055fa:	b480      	push	{r7}
 80055fc:	b08b      	sub	sp, #44	; 0x2c
 80055fe:	af00      	add	r7, sp, #0
 8005600:	60f8      	str	r0, [r7, #12]
 8005602:	60b9      	str	r1, [r7, #8]
 8005604:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	6a1a      	ldr	r2, [r3, #32]
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	fa93 f3a3 	rbit	r3, r3
 8005614:	613b      	str	r3, [r7, #16]
  return result;
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800561a:	69bb      	ldr	r3, [r7, #24]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d101      	bne.n	8005624 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8005620:	2320      	movs	r3, #32
 8005622:	e003      	b.n	800562c <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8005624:	69bb      	ldr	r3, [r7, #24]
 8005626:	fab3 f383 	clz	r3, r3
 800562a:	b2db      	uxtb	r3, r3
 800562c:	009b      	lsls	r3, r3, #2
 800562e:	210f      	movs	r1, #15
 8005630:	fa01 f303 	lsl.w	r3, r1, r3
 8005634:	43db      	mvns	r3, r3
 8005636:	401a      	ands	r2, r3
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800563c:	6a3b      	ldr	r3, [r7, #32]
 800563e:	fa93 f3a3 	rbit	r3, r3
 8005642:	61fb      	str	r3, [r7, #28]
  return result;
 8005644:	69fb      	ldr	r3, [r7, #28]
 8005646:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800564a:	2b00      	cmp	r3, #0
 800564c:	d101      	bne.n	8005652 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800564e:	2320      	movs	r3, #32
 8005650:	e003      	b.n	800565a <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8005652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005654:	fab3 f383 	clz	r3, r3
 8005658:	b2db      	uxtb	r3, r3
 800565a:	009b      	lsls	r3, r3, #2
 800565c:	6879      	ldr	r1, [r7, #4]
 800565e:	fa01 f303 	lsl.w	r3, r1, r3
 8005662:	431a      	orrs	r2, r3
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8005668:	bf00      	nop
 800566a:	372c      	adds	r7, #44	; 0x2c
 800566c:	46bd      	mov	sp, r7
 800566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005672:	4770      	bx	lr

08005674 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8005674:	b480      	push	{r7}
 8005676:	b08b      	sub	sp, #44	; 0x2c
 8005678:	af00      	add	r7, sp, #0
 800567a:	60f8      	str	r0, [r7, #12]
 800567c:	60b9      	str	r1, [r7, #8]
 800567e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	0a1b      	lsrs	r3, r3, #8
 8005688:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	fa93 f3a3 	rbit	r3, r3
 8005690:	613b      	str	r3, [r7, #16]
  return result;
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005696:	69bb      	ldr	r3, [r7, #24]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d101      	bne.n	80056a0 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800569c:	2320      	movs	r3, #32
 800569e:	e003      	b.n	80056a8 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 80056a0:	69bb      	ldr	r3, [r7, #24]
 80056a2:	fab3 f383 	clz	r3, r3
 80056a6:	b2db      	uxtb	r3, r3
 80056a8:	009b      	lsls	r3, r3, #2
 80056aa:	210f      	movs	r1, #15
 80056ac:	fa01 f303 	lsl.w	r3, r1, r3
 80056b0:	43db      	mvns	r3, r3
 80056b2:	401a      	ands	r2, r3
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	0a1b      	lsrs	r3, r3, #8
 80056b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056ba:	6a3b      	ldr	r3, [r7, #32]
 80056bc:	fa93 f3a3 	rbit	r3, r3
 80056c0:	61fb      	str	r3, [r7, #28]
  return result;
 80056c2:	69fb      	ldr	r3, [r7, #28]
 80056c4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80056c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d101      	bne.n	80056d0 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 80056cc:	2320      	movs	r3, #32
 80056ce:	e003      	b.n	80056d8 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 80056d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d2:	fab3 f383 	clz	r3, r3
 80056d6:	b2db      	uxtb	r3, r3
 80056d8:	009b      	lsls	r3, r3, #2
 80056da:	6879      	ldr	r1, [r7, #4]
 80056dc:	fa01 f303 	lsl.w	r3, r1, r3
 80056e0:	431a      	orrs	r2, r3
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 80056e6:	bf00      	nop
 80056e8:	372c      	adds	r7, #44	; 0x2c
 80056ea:	46bd      	mov	sp, r7
 80056ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f0:	4770      	bx	lr

080056f2 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80056f2:	b580      	push	{r7, lr}
 80056f4:	b088      	sub	sp, #32
 80056f6:	af00      	add	r7, sp, #0
 80056f8:	6078      	str	r0, [r7, #4]
 80056fa:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	fa93 f3a3 	rbit	r3, r3
 8005708:	60fb      	str	r3, [r7, #12]
  return result;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d101      	bne.n	8005718 <LL_GPIO_Init+0x26>
    return 32U;
 8005714:	2320      	movs	r3, #32
 8005716:	e003      	b.n	8005720 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	fab3 f383 	clz	r3, r3
 800571e:	b2db      	uxtb	r3, r3
 8005720:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8005722:	e047      	b.n	80057b4 <LL_GPIO_Init+0xc2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	681a      	ldr	r2, [r3, #0]
 8005728:	2101      	movs	r1, #1
 800572a:	69fb      	ldr	r3, [r7, #28]
 800572c:	fa01 f303 	lsl.w	r3, r1, r3
 8005730:	4013      	ands	r3, r2
 8005732:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0U)
 8005734:	69bb      	ldr	r3, [r7, #24]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d039      	beq.n	80057ae <LL_GPIO_Init+0xbc>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	2b01      	cmp	r3, #1
 8005740:	d003      	beq.n	800574a <LL_GPIO_Init+0x58>
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	2b02      	cmp	r3, #2
 8005748:	d10d      	bne.n	8005766 <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	461a      	mov	r2, r3
 8005750:	69b9      	ldr	r1, [r7, #24]
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f7ff fed7 	bl	8005506 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	68db      	ldr	r3, [r3, #12]
 800575c:	461a      	mov	r2, r3
 800575e:	69b9      	ldr	r1, [r7, #24]
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	f7ff feb8 	bl	80054d6 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	691b      	ldr	r3, [r3, #16]
 800576a:	461a      	mov	r2, r3
 800576c:	69b9      	ldr	r1, [r7, #24]
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f7ff ff06 	bl	8005580 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	2b02      	cmp	r3, #2
 800577a:	d111      	bne.n	80057a0 <LL_GPIO_Init+0xae>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800577c:	69bb      	ldr	r3, [r7, #24]
 800577e:	2bff      	cmp	r3, #255	; 0xff
 8005780:	d807      	bhi.n	8005792 <LL_GPIO_Init+0xa0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	695b      	ldr	r3, [r3, #20]
 8005786:	461a      	mov	r2, r3
 8005788:	69b9      	ldr	r1, [r7, #24]
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f7ff ff35 	bl	80055fa <LL_GPIO_SetAFPin_0_7>
 8005790:	e006      	b.n	80057a0 <LL_GPIO_Init+0xae>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	695b      	ldr	r3, [r3, #20]
 8005796:	461a      	mov	r2, r3
 8005798:	69b9      	ldr	r1, [r7, #24]
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f7ff ff6a 	bl	8005674 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	461a      	mov	r2, r3
 80057a6:	69b9      	ldr	r1, [r7, #24]
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f7ff fe57 	bl	800545c <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80057ae:	69fb      	ldr	r3, [r7, #28]
 80057b0:	3301      	adds	r3, #1
 80057b2:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	681a      	ldr	r2, [r3, #0]
 80057b8:	69fb      	ldr	r3, [r7, #28]
 80057ba:	fa22 f303 	lsr.w	r3, r2, r3
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d1b0      	bne.n	8005724 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 80057c2:	2300      	movs	r3, #0
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	3720      	adds	r7, #32
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}

080057cc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b085      	sub	sp, #20
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80057d4:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80057d8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80057e0:	b29a      	uxth	r2, r3
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	b29b      	uxth	r3, r3
 80057e6:	43db      	mvns	r3, r3
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	4013      	ands	r3, r2
 80057ec:	b29a      	uxth	r2, r3
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80057f4:	2300      	movs	r3, #0
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3714      	adds	r7, #20
 80057fa:	46bd      	mov	sp, r7
 80057fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005800:	4770      	bx	lr

08005802 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005802:	b084      	sub	sp, #16
 8005804:	b480      	push	{r7}
 8005806:	b083      	sub	sp, #12
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
 800580c:	f107 0014 	add.w	r0, r7, #20
 8005810:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2201      	movs	r2, #1
 8005818:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2200      	movs	r2, #0
 8005820:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2200      	movs	r2, #0
 8005828:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2200      	movs	r2, #0
 8005830:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005834:	2300      	movs	r3, #0
}
 8005836:	4618      	mov	r0, r3
 8005838:	370c      	adds	r7, #12
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	b004      	add	sp, #16
 8005842:	4770      	bx	lr

08005844 <memset>:
 8005844:	4402      	add	r2, r0
 8005846:	4603      	mov	r3, r0
 8005848:	4293      	cmp	r3, r2
 800584a:	d100      	bne.n	800584e <memset+0xa>
 800584c:	4770      	bx	lr
 800584e:	f803 1b01 	strb.w	r1, [r3], #1
 8005852:	e7f9      	b.n	8005848 <memset+0x4>

08005854 <__libc_init_array>:
 8005854:	b570      	push	{r4, r5, r6, lr}
 8005856:	4d0d      	ldr	r5, [pc, #52]	; (800588c <__libc_init_array+0x38>)
 8005858:	2600      	movs	r6, #0
 800585a:	4c0d      	ldr	r4, [pc, #52]	; (8005890 <__libc_init_array+0x3c>)
 800585c:	1b64      	subs	r4, r4, r5
 800585e:	10a4      	asrs	r4, r4, #2
 8005860:	42a6      	cmp	r6, r4
 8005862:	d109      	bne.n	8005878 <__libc_init_array+0x24>
 8005864:	4d0b      	ldr	r5, [pc, #44]	; (8005894 <__libc_init_array+0x40>)
 8005866:	2600      	movs	r6, #0
 8005868:	4c0b      	ldr	r4, [pc, #44]	; (8005898 <__libc_init_array+0x44>)
 800586a:	f000 f817 	bl	800589c <_init>
 800586e:	1b64      	subs	r4, r4, r5
 8005870:	10a4      	asrs	r4, r4, #2
 8005872:	42a6      	cmp	r6, r4
 8005874:	d105      	bne.n	8005882 <__libc_init_array+0x2e>
 8005876:	bd70      	pop	{r4, r5, r6, pc}
 8005878:	f855 3b04 	ldr.w	r3, [r5], #4
 800587c:	3601      	adds	r6, #1
 800587e:	4798      	blx	r3
 8005880:	e7ee      	b.n	8005860 <__libc_init_array+0xc>
 8005882:	f855 3b04 	ldr.w	r3, [r5], #4
 8005886:	3601      	adds	r6, #1
 8005888:	4798      	blx	r3
 800588a:	e7f2      	b.n	8005872 <__libc_init_array+0x1e>
 800588c:	0800593c 	.word	0x0800593c
 8005890:	0800593c 	.word	0x0800593c
 8005894:	0800593c 	.word	0x0800593c
 8005898:	08005940 	.word	0x08005940

0800589c <_init>:
 800589c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800589e:	bf00      	nop
 80058a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058a2:	bc08      	pop	{r3}
 80058a4:	469e      	mov	lr, r3
 80058a6:	4770      	bx	lr

080058a8 <_fini>:
 80058a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058aa:	bf00      	nop
 80058ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058ae:	bc08      	pop	{r3}
 80058b0:	469e      	mov	lr, r3
 80058b2:	4770      	bx	lr
